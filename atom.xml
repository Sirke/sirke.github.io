<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keis Note</title>
  
  <subtitle>Java developer&#39;s professional blog.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.iskei.cn/"/>
  <updated>2018-04-18T09:00:50.186Z</updated>
  <id>http://www.iskei.cn/</id>
  
  <author>
    <name>Kee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>maven项目操作技巧</title>
    <link href="http://www.iskei.cn/posts/44283.html"/>
    <id>http://www.iskei.cn/posts/44283.html</id>
    <published>2018-03-26T12:30:36.000Z</published>
    <updated>2018-04-18T09:00:50.186Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0164.jpg" alt="image"><br>maven项目技巧<br><a id="more"></a></p><h2 id="Eclipse导入Maven项目并启动的步骤"><a href="#Eclipse导入Maven项目并启动的步骤" class="headerlink" title="Eclipse导入Maven项目并启动的步骤"></a>Eclipse导入Maven项目并启动的步骤</h2><ol><li><p>空白处右击Import选择General里的Existing Projects into Workspace→Next，Browse找到要导入项目所在，选中要导入的项目点击确定；一定要勾选Copy projects into eorkspace→Finish；</p></li><li><p>导入本地项目之后先进行配置，配置步骤如下：</p><p>(1).导入项目 右击maven→update project →OK；</p><p>(2).项目名→右击→properties</p><p>(3).resource 修改字体 utf-8</p></li></ol><p>​    (4).deployment  assembly  点击  add  添加maven dependencies</p><p>​    (6).java compiler 中 compiler compliance settings 选1.6</p><p>​    (7)找到Project Facets 查看Java是改为1.6；</p><p>​    (8)如果JRE版本不对，应该首先右击Properties选择Workspacec default JRE(jre6)点击OK；</p><ol><li><p>导入数据库数据步骤如下:</p><p>(1).在localhost创建一个数据库，名字与导入文件一致；</p><p>(2)右击选择运行SQL文件；数据库中导入数据文件，选择好要导入的文件，不勾选“每个运行中运行多重查询”和“SETAUTOCOMMIT=0”；开始即可</p></li><li><p>导入之后将资源文件中关于数据库的配置用户名密码改成需要的即可；</p></li><li><p>建server部署项目启动即可</p></li></ol><h2 id="eclipse-maven项目导出所使用的jar包"><a href="#eclipse-maven项目导出所使用的jar包" class="headerlink" title="eclipse maven项目导出所使用的jar包"></a>eclipse maven项目导出所使用的jar包</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol><li><p>在eclipse中定位到maven项目的pom.xml文件</p></li><li><p>右击pom.xml文件，选择Run As–》Run Configurations（或者Maven build…）</p></li><li><p>在打开的页面中，Goals输入“dependency:copy-dependencies”，后点击“Run”即可</p></li><li><p>在当前项目的目录的“targed/dependency”下就可以看见。</p></li></ol><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><ol><li><p>或者：在dos环境，进入到pom.xml所在的文件夹。</p><p>输入命令：mvn dependency:copy-dependencies</p><p>也可在当前项目的目录的“targed/dependency”下开间maven项目引用的jar包。<br>eclipse 中maven项目的运行</p></li></ol><h2 id="eclispe-maven项目运行"><a href="#eclispe-maven项目运行" class="headerlink" title="eclispe maven项目运行"></a>eclispe maven项目运行</h2><ol><li>项目构建时，右键pom.xml文件，选择Run As–》Run Configurations（或者Maven build…）</li></ol><p>Golas:中输入项目构建命令，比如compile, run后就开始编译了。</p><ol><li>开发中代码的运行调试，找到要运行的java代码运行，和普通的Java代码一样运行就可以了。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0164.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;maven项目技巧&lt;br&gt;
    
    </summary>
    
      <category term="maven" scheme="http://www.iskei.cn/categories/maven/"/>
    
    
      <category term="maven" scheme="http://www.iskei.cn/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Java 文件上传及下载</title>
    <link href="http://www.iskei.cn/posts/25709.html"/>
    <id>http://www.iskei.cn/posts/25709.html</id>
    <published>2018-03-24T12:30:36.000Z</published>
    <updated>2018-04-18T09:00:50.178Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0163.jpg" alt="image"></p><p>Java 文件上传及下载<br><a id="more"></a></p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>　　文件上传操作通常会附加一些限制，如：文件类型、上传文件总大小、每个文件的最大大小等。除此以外，作为一个通用组件还需要考虑更多的问题，如：支持自定义文件保存目录、支持相对路径和绝对路径、支持自定义保存的文件的文件名称、支持上传进度反馈和上传失败清理等。另外，本座也不想重新造车轮，本组件是基于 Commons File Upload 实现，省却了本座大量的工作 ^_^ 下面先从一个具体的使用例子讲起：</p><h4 id="上传请求界面及代码"><a href="#上传请求界面及代码" class="headerlink" title="上传请求界面及代码"></a>上传请求界面及代码</h4><p><img src="http://filesimg.111cn.net/2012/02/24/20120224013306316.jpg" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"checkupload.action"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    First Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"firstName"</span> <span class="attr">value</span>=<span class="string">"丑"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Last Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">value</span>=<span class="string">"怪兽"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Birthday: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">value</span>=<span class="string">"1978-11-03"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Gender: 男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>" <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        &amp;nbsp;女 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>" <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"true"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Working age: <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"workingAge"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"-1"</span>&gt;</span>-请选择-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>三年<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"5"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>五年<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"10"</span>&gt;</span>十年<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"20"</span>&gt;</span>二十年<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Interest: 游泳 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"interest"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">        &amp;nbsp;打球 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"interest"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">        &amp;nbsp;下棋 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"interest"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">        &amp;nbsp;打麻将 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"interest"</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">        &amp;nbsp;看书 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"interest"</span> <span class="attr">value</span>=<span class="string">"5"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Photo 1.1: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>" <span class="attr">name</span>=<span class="string">"photo-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Photo 1.2: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>" <span class="attr">name</span>=<span class="string">"photo-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Photo 2.1: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>" <span class="attr">name</span>=<span class="string">"photo-2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"确 定"</span>&gt;</span>&amp;nbsp;&amp;nbsp;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重 置"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从上面的 HTML 代码可以看出，表单有 6 个普通域和 3 个文件域，其中前两个文件域的 name 属性相同。</p><h4 id="上传处理代码"><a href="#上传处理代码" class="headerlink" title="上传处理代码"></a>上传处理代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.bruce.util.BeanHelper;</span><br><span class="line"><span class="keyword">import</span> com.bruce.util.Logger;</span><br><span class="line"><span class="keyword">import</span> com.bruce.util.http.FileUploader;</span><br><span class="line"><span class="keyword">import</span> com.bruce.util.http.FileUploader.FileInfo;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.bruce.util.http.FileUploader.*;</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckUpload</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 上传路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String UPLOAD_PATH        = <span class="string">"upload"</span>;</span><br><span class="line">    <span class="comment">// 可接受的文件类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] ACCEPT_TYPES    = &#123;<span class="string">"txt"</span>, <span class="string">"pdf"</span>, <span class="string">"doc"</span>, <span class="string">".Jpg"</span>, <span class="string">"*.zip"</span>, <span class="string">"*.RAR"</span>&#125;;</span><br><span class="line">    <span class="comment">// 总上传文件大小限制</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX_SIZE            = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>;</span><br><span class="line">    <span class="comment">// 单个传文件大小限制</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX_FILE_SIZE        = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 FileUploader 对象</span></span><br><span class="line">        FileUploader fu = <span class="keyword">new</span> FileUploader(UPLOAD_PATH, ACCEPT_TYPES, MAX_SIZE, MAX_FILE_SIZE);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根据实际情况设置对象属性（可选）</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        fu.setFileNameGenerator(new FileNameGenerator()</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public String generate(FileItem item, String suffix)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                return String.format("%d_%d", item.hashCode(), item.get().hashCode());</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        fu.setServletProgressListener(new ProgressListener()</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void update(long pBytesRead, long pContentLength, int pItems)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                System.out.printf("%d: length -&gt; %d, read -&gt; %d.n", pItems, pContentLength, pBytesRead);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行上传并获取操作结果</span></span><br><span class="line">        Result result = fu.upload(getRequest(), getResponse());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查操作结果</span></span><br><span class="line">        <span class="keyword">if</span>(result != FileUploader.Result.SUCCESS)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 设置 request attribute</span></span><br><span class="line">            setRequestAttribute(<span class="string">"error"</span>, fu.getCause());</span><br><span class="line">            <span class="comment">// 记录日志</span></span><br><span class="line">            Logger.exception(fu.getCause(), <span class="string">"upload file fail"</span>, Level.ERROR, <span class="keyword">false</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过非文件表单域创建 Form Bean</span></span><br><span class="line">        Persion persion = BeanHelper.createBean(Persion.class, fu.getParamFields());</span><br><span class="line">        <span class="comment">// 图片保存路径的列表</span></span><br><span class="line">        List&lt;String&gt; photos    = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 轮询文件表单域，填充 photos */</span></span><br><span class="line">        Set&lt;String&gt; keys = fu.getFileFields().keySet();</span><br><span class="line">        <span class="keyword">for</span>(String key : keys)</span><br><span class="line">        &#123;</span><br><span class="line">            FileInfo[] ffs = fu.getFileFields().get(key);</span><br><span class="line">            <span class="keyword">for</span>(FileInfo ff : ffs)</span><br><span class="line">            &#123;</span><br><span class="line">                photos.add(String.format(<span class="string">"(%s) %s%s%s"</span>, key, fu.getSavePath(), File.separator, ff.getSaveFile().getName()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置 Form Bean 的 photos 属性</span></span><br><span class="line">        persion.setPhotos(photos);</span><br><span class="line">        <span class="comment">// 设置 request attribute</span></span><br><span class="line">        setRequestAttribute(<span class="string">"persion"</span>, persion);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Persion</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> workingAge;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] interest;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; photos;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String uploadFileName;</span><br><span class="line">    <span class="keyword">private</span> File saveFile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　分析下上面的 Java 代码，本例先根据保存目录、文件大小限制和文件类型限制创建一个 FileUploader 对象，然后调用该对象的 upload() 方法执行上传并返回操作结果，如果上传成功则 通过 getParamFields() 方法获取所有非文件表单域内容，并交由 BeanHelper 进行解析创建 Form Bean，再调用 getFileFields() 方法获取所有文件表单域的 FileInfo（FileInfo 包含上传文件的原始名称和被保存文件的 File 对象），最后完成 Form Bean 所有字段的填充并把 Form Bean 设置为 request 属性。</p><h4 id="上传结果界面及代码"><a href="#上传结果界面及代码" class="headerlink" title="上传结果界面及代码"></a>上传结果界面及代码</h4><p><img src="http://filesimg.111cn.net/2012/02/24/20120224013312738.jpg" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>Persion Attributs<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;persion.firstName&#125; $&#123;persion.lastName&#125;"</span>/&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Brithday<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;persion.birthday&#125;"</span>/&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;persion.gender&#125;"</span>/&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Working Age<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;persion.workingAge&#125;"</span>/&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Interest<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"its"</span> <span class="attr">items</span>=<span class="string">"$&#123;persion.interest&#125;"</span>&gt;</span></span><br><span class="line">                                 <span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;its&#125;"</span> /&gt;</span> &amp;nbsp;</span><br><span class="line">                          <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Photos<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"p"</span> <span class="attr">items</span>=<span class="string">"$&#123;persion.photos&#125;"</span>&gt;</span></span><br><span class="line">                                 <span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;p&#125;"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 　　从上面的处理结果可以看出，文件上传组件 FileUploader 正确地处理了表单的所有文件域和非文件域名，并且，整个文件上传操作过程非常简单，无需用户过多参与。下面我们来详细看看组件的主要实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    / 不限制文件上传总大小的 Size Max 常量 */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> NO_LIMIT_SIZE_MAX        = -<span class="number">1</span>;</span><br><span class="line">    / 不限制文件上传单个文件大小的 File Size Max 常量 */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> NO_LIMIT_FILE_SIZE_MAX    = -<span class="number">1</span>;</span><br><span class="line">    / 默认的写文件阀值 */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SIZE_THRESHOLD    = DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD;</span><br><span class="line">    / 默认的文件名生成器 */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> FileNameGenerator DEFAULT_FILE_NAME_GENERATOR = <span class="keyword">new</span> CommonFileNameGenerator();</span><br><span class="line">    </span><br><span class="line">    / 设置上传文件的保存路径（不包含文件名）</span><br><span class="line">     * </span><br><span class="line">     * 文件路径，可能是绝对路径或相对路径&lt;br&gt;</span><br><span class="line">     *     <span class="number">1</span>) 绝对路径：以根目录符开始（如：<span class="string">'/'</span>、<span class="string">'D:'</span>），是服务器文件系统的路径&lt;br&gt;</span><br><span class="line">     *     <span class="number">2</span>) 相对路径：不以根目录符开始，是相对于 WEB 应用程序 Context 的路径，（如：mydir 是指</span><br><span class="line">     *         <span class="string">'$&#123;WEB-APP-DIR&#125;/mydir'</span>）&lt;br&gt;</span><br><span class="line">     *     <span class="number">3</span>) 规则：上传文件前会检查该路径是否存在，如果不存在则会尝试生成该路径，如果生成失败则</span><br><span class="line">     *         上传失败并返回 &#123;@link Result#INVALID_SAVE_PATH&#125;</span><br><span class="line">     * </span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">private</span> String savePath;</span><br><span class="line">    / 文件上传的总文件大小限制 */</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sizeMax                        = NO_LIMIT_SIZE_MAX;</span><br><span class="line">    / 文件上传的单个文件大小限制 */</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> fileSizeMax                    = NO_LIMIT_FILE_SIZE_MAX;</span><br><span class="line">    / 可接受的上传文件类型集合，默认：不限制 */</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; acceptTypes                = <span class="keyword">new</span> LStrSet();</span><br><span class="line">    / 非文件表单域的映射 */</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String[]&gt; paramFields    = <span class="keyword">new</span> HashMap&lt;String, String[]&gt;();</span><br><span class="line">    / 文件表单域的映射 */</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, FileInfo[]&gt; fileFields    = <span class="keyword">new</span> HashMap&lt;String, FileInfo[]&gt;();</span><br><span class="line">    / 文件名生成器 */</span><br><span class="line">    <span class="keyword">private</span> FileNameGenerator fileNameGenerator    = DEFAULT_FILE_NAME_GENERATOR;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// commons file upload 相关属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> factorySizeThreshold            = DEFAULT_SIZE_THRESHOLD;</span><br><span class="line">    <span class="keyword">private</span> String factoryRepository;</span><br><span class="line">    <span class="keyword">private</span> FileCleaningTracker factoryCleaningTracker;</span><br><span class="line">    <span class="keyword">private</span> String servletHeaderencoding;</span><br><span class="line">    <span class="keyword">private</span> ProgressListener servletProgressListener;</span><br><span class="line">    </span><br><span class="line">    / 文件上传失败的原因（文件上传失败时使用） */</span><br><span class="line">    <span class="keyword">private</span> Throwable cause;</span><br><span class="line">    </span><br><span class="line">    / 执行上传</span><br><span class="line">     * </span><br><span class="line">     * <span class="meta">@param</span> request    : &#123;<span class="meta">@link</span> HttpServletRequest&#125; 对象</span><br><span class="line">     * <span class="meta">@param</span> response    : &#123;<span class="meta">@link</span> HttpServletResponse&#125; 对象</span><br><span class="line">     * </span><br><span class="line">     * @return            : 成功：返回 &#123;@link Result#SUCCESS&#125; ，失败：返回其他结果，</span><br><span class="line">     *                       失败原因通过 &#123;@link FileUploader#getCause()&#125; 获取</span><br><span class="line">     * </span><br><span class="line">     */</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">upload</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        reset();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取上传目录绝对路径</span></span><br><span class="line">        String absolutePath     = getAbsoluteSavePath(request);</span><br><span class="line">        <span class="keyword">if</span>(absolutePath == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cause = <span class="keyword">new</span> FileNotFoundException(String.format(<span class="string">"path '%s' not found or is not directory"</span>, savePath));</span><br><span class="line">            <span class="keyword">return</span> Result.INVALID_SAVE_PATH;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ServletFileUpload sfu    = getFileUploadComponent();</span><br><span class="line">        List&lt;FileItemInfo&gt; fiis    = <span class="keyword">new</span> ArrayList&lt;FileItemInfo&gt;();</span><br><span class="line">        </span><br><span class="line">        List&lt;FileItem&gt; items    = <span class="keyword">null</span>;</span><br><span class="line">        Result result            = Result.SUCCESS;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取文件名生成器</span></span><br><span class="line">        String encoding                    = servletHeaderencoding != <span class="keyword">null</span> ? servletHeaderencoding : request.getCharacterEncoding();</span><br><span class="line">        FileNameGenerator fnGenerator    = fileNameGenerator != <span class="keyword">null</span> ? fileNameGenerator : DEFAULT_FILE_NAME_GENERATOR;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 执行上传操作</span></span><br><span class="line">            items = (List&lt;FileItem&gt;)sfu.parseRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (FileUploadException e)</span><br><span class="line">        &#123;</span><br><span class="line">            cause = e;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(e <span class="keyword">instanceof</span> FileSizeLimitExceededException)        result = Result.FILE_SIZE_EXCEEDED;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> SizeLimitExceededException)    result = Result.SIZE_EXCEEDED;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> InvalidContentTypeException)    result = Result.INVALID_CONTENT_TYPE;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> IOFileUploadException)            result = Result.FILE_UPLOAD_IO_EXCEPTION;</span><br><span class="line">            <span class="keyword">else</span>                                                result = Result.OTHER_PARSE_REQUEST_EXCEPTION;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(result == Result.SUCCESS)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 解析所有表单域</span></span><br><span class="line">            result = parseFileItems(items, fnGenerator, absolutePath, encoding, fiis);    </span><br><span class="line">            <span class="keyword">if</span>(result == Result.SUCCESS)</span><br><span class="line">                <span class="comment">// 保存文件</span></span><br><span class="line">                result = writeFiles(fiis);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析所有表单域</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">parseFileItems</span><span class="params">(List&lt;FileItem&gt; items, FileNameGenerator fnGenerator, String absolutePath, String encoding, List&lt;FileItemInfo&gt; fiis)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(FileItem item : items)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(item.isFormField())</span><br><span class="line">                <span class="comment">// 解析非文件表单域</span></span><br><span class="line">                parseFormField(item, encoding);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(item.getSize() == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 解析文件表单域</span></span><br><span class="line">                Result result = parseFileField(item, absolutePath, fnGenerator, fiis);</span><br><span class="line">                <span class="keyword">if</span>(result != Result.SUCCESS)</span><br><span class="line">                &#123;</span><br><span class="line">                    reset();</span><br><span class="line">                    </span><br><span class="line">                    cause = <span class="keyword">new</span> InvalidParameterException(String.format(<span class="string">"file '%s' not accepted"</span>, item.getName()));</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Result.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析文件表单域</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">parseFileField</span><span class="params">(FileItem item, String absolutePath, FileNameGenerator fnGenerator, List&lt;FileItemInfo&gt; fiis)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String suffix            = <span class="keyword">null</span>;</span><br><span class="line">        String uploadFileName    = item.getName();</span><br><span class="line">        <span class="keyword">boolean</span> isAcceptType    = acceptTypes.isEmpty();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!isAcceptType)</span><br><span class="line">        &#123;</span><br><span class="line">            suffix = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">int</span> stuffPos = uploadFileName.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">            <span class="keyword">if</span>(stuffPos != -<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                suffix = uploadFileName.substring(stuffPos, uploadFileName.length()).toLowerCase();</span><br><span class="line">                isAcceptType = acceptTypes.contains(suffix);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!isAcceptType)</span><br><span class="line">            <span class="keyword">return</span> Result.INVALID_FILE_TYPE;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过文件名生成器获取文件名</span></span><br><span class="line">        String saveFileName = fnGenerator.generate(item, suffix);</span><br><span class="line">        <span class="keyword">if</span>(!saveFileName.endsWith(suffix))</span><br><span class="line">            saveFileName += suffix;</span><br><span class="line">        </span><br><span class="line">        String fullFileName    = absolutePath + File.separator + saveFileName;</span><br><span class="line">        File saveFile        = <span class="keyword">new</span> File(fullFileName);</span><br><span class="line">        FileInfo info        = <span class="keyword">new</span> FileInfo(uploadFileName, saveFile);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加表单域文件信息</span></span><br><span class="line">        fiis.add(<span class="keyword">new</span> FileItemInfo(item, saveFile));</span><br><span class="line">        addFileField(item.getFieldName(), info);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Result.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseFormField</span><span class="params">(FileItem item, String encoding)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String name = item.getFieldName();</span><br><span class="line">        String value = item.getString();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 字符串编码转换</span></span><br><span class="line">        <span class="keyword">if</span>(!GeneralHelper.isStrEmpty(value) &amp;&amp; encoding != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                value = <span class="keyword">new</span> String(value.getBytes(<span class="string">"ISO-8859-1"</span>), encoding);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(UnsupportedEncodingException e)</span><br><span class="line">            &#123;</span><br><span class="line">    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加表单域名/值映射</span></span><br><span class="line">        addParamField(name, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    / 文件名生成器接口</span><br><span class="line">     * </span><br><span class="line">     * 每次保存一个上传文件前都需要调用该接口的 &#123;@link FileNameGenerator#generate&#125; 方法生成要保存的文件名</span><br><span class="line">     *  </span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileNameGenerator</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        / 文件名生成方法</span><br><span class="line">         * </span><br><span class="line">         * <span class="meta">@param</span> item        : 上传文件对应的 &#123;<span class="meta">@link</span> FileItem&#125; 对象</span><br><span class="line">         * <span class="meta">@param</span> suffix    : 上传文件的后缀名</span><br><span class="line">         * </span><br><span class="line">         */</span><br><span class="line">        <span class="function">String <span class="title">generate</span><span class="params">(FileItem item, String suffix)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    / 默认通用文件名生成器</span><br><span class="line">     * </span><br><span class="line">     * 实现 &#123;<span class="meta">@link</span> FileNameGenerator&#125; 接口，根据序列值和时间生成唯一文件名</span><br><span class="line">     *  </span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonFileNameGenerator</span> <span class="keyword">implements</span> <span class="title">FileNameGenerator</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SERIAL            = <span class="number">999999</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger atomic = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNextInteger</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> value = atomic.incrementAndGet();</span><br><span class="line">            <span class="keyword">if</span>(value &gt;= MAX_SERIAL)</span><br><span class="line">                atomic.set(<span class="number">0</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        / 根据序列值和时间生成 <span class="string">'XXXXXX_YYYYYYYYYYYYY'</span> 格式的唯一文件名 */</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">generate</span><span class="params">(FileItem item, String suffix)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> serial        = getNextInteger();</span><br><span class="line">            <span class="keyword">long</span> millsec    = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">"%06d_%013d"</span>, serial, millsec);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    / 上传文件信息结构体 */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInfo</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String uploadFileName;</span><br><span class="line">        <span class="keyword">private</span> File saveFile;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// getters and setters ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">FileItemInfo</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        FileItem item;</span><br><span class="line">        File file;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// getters and setters ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    / 文件上传结果枚举值 */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> Result</span><br><span class="line">    &#123;</span><br><span class="line">        / 成功 */</span><br><span class="line">        SUCCESS,</span><br><span class="line">        / 失败：文件总大小超过限制 */</span><br><span class="line">        SIZE_EXCEEDED,</span><br><span class="line">        / 失败：单个文件大小超过限制 */</span><br><span class="line">        FILE_SIZE_EXCEEDED,</span><br><span class="line">        / 失败：请求表单类型不正确 */</span><br><span class="line">        INVALID_CONTENT_TYPE,</span><br><span class="line">        / 失败：文件上传 IO 错误 */</span><br><span class="line">        FILE_UPLOAD_IO_EXCEPTION,</span><br><span class="line">        / 失败：解析上传请求其他异常 */</span><br><span class="line">        OTHER_PARSE_REQUEST_EXCEPTION,</span><br><span class="line">        / 失败：文件类型不正确 */</span><br><span class="line">        INVALID_FILE_TYPE,</span><br><span class="line">        / 失败：文件写入失败 */</span><br><span class="line">        WRITE_FILE_FAIL,</span><br><span class="line">        / 失败：文件的保存路径不正确 */</span><br><span class="line">        INVALID_SAVE_PATH;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>应用可以实现自己的 FileNameGenerator 类替代默认的文件名生成器。</p></li><li><p>上传操作通过 FileUploader.Result 返回结果，并没有采用抛出异常的方式，因为本座认为在这里采用异常方式报告结果其实并不方便使用；另一方面，程序可以通过 getCause() 获取详细的错误信息。</p></li></ul><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p>　　相对于文件上传，文件下载则简单很多，主要实现流程是根据文件名找到实际文件，并利用 Java 的相关类对 I/O 流进行读写。下面先看看一个使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.bruce.util.http.FileDownloader.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDownload</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 绝对路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ABSOLUTE_PATH    = <span class="string">"/Server/apache-tomcat-6.0.32/webapps/portal/download/下载测试 - 文本文件.txt"</span>;</span><br><span class="line">    <span class="comment">// 相对路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RELATE_PATH        = <span class="string">"download/下载测试 - 项目框架.jpg"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> type            = getIntParam(<span class="string">"type"</span>, <span class="number">1</span>);</span><br><span class="line">        String filePath        = (type == <span class="number">1</span> ? ABSOLUTE_PATH : RELATE_PATH);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建 FileDownloader 对象</span></span><br><span class="line">        FileDownloader fdl    = <span class="keyword">new</span> FileDownloader(filePath);</span><br><span class="line">        <span class="comment">// 执行下载</span></span><br><span class="line">        Result result = fdl.downLoad(getRequest(), getResponse());</span><br><span class="line">        <span class="comment">// 检查下载结果</span></span><br><span class="line">        <span class="keyword">if</span>(result != Result.SUCCESS)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 记录日志</span></span><br><span class="line">            Logger.exception(fdl.getCause(), String.format(<span class="string">"download file '%s' fail"</span>, fdl.getFilePath()), Level.ERROR, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这个示例可以看出，文件下载组件的使用方法更简单，因为它不需要对下载结果进行很多处理。可以看出该组件也支持相对路径和绝对路径。下面我们来详细看看组件的主要实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">/ 文件下载器 */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDownloader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    / 默认字节交换缓冲区大小 */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_BUFFER_SIZE        = <span class="number">1024</span> * <span class="number">4</span>;</span><br><span class="line">    / 下载文件的默认 Mime Type */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CONTENT_TYPE    = <span class="string">"application/force-download"</span>;</span><br><span class="line">    </span><br><span class="line">    / 设置下载文件的路径（包含文件名） </span><br><span class="line">     * </span><br><span class="line">     * filePath    : 文件路径，可能是绝对路径或相对路径&lt;br&gt;</span><br><span class="line">     *                 <span class="number">1</span>) 绝对路径：以根目录符开始（如：<span class="string">'/'</span>、<span class="string">'D:'</span>），是服务器文件系统的路径&lt;br&gt;</span><br><span class="line">     *                 <span class="number">2</span>) 相对路径：不以根目录符开始，是相对于 WEB 应用程序 Context 的路径，（如：mydir/myfile 是指 <span class="string">'$&#123;WEB-APP-DIR&#125;/mydir/myfile'</span>）</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">private</span> String filePath;</span><br><span class="line">    / 显示在浏览器的下载对话框中的文件名称，默认与  filePath 参数中的文件名一致 */</span><br><span class="line">    <span class="keyword">private</span> String saveFileName;</span><br><span class="line">    / 下载文件的 Mime Type，默认：&#123;@link FileDownloader#DEFAULT_CONTENT_TYPE&#125; */</span><br><span class="line">    <span class="keyword">private</span> String contentType        = DEFAULT_CONTENT_TYPE;</span><br><span class="line">    / 字节缓冲区大小，默认：&#123;@link FileDownloader#DEFAULT_CONTENT_TYPE&#125; */</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bufferSize            = DEFAULT_BUFFER_SIZE;</span><br><span class="line">    / 获取文件下载失败的原因（文件下载失败时使用） */</span><br><span class="line">    <span class="keyword">private</span> Throwable cause;</span><br><span class="line">    </span><br><span class="line">    / 执行下载</span><br><span class="line">     * </span><br><span class="line">     * <span class="meta">@param</span> request    : &#123;<span class="meta">@link</span> HttpServletRequest&#125; 对象</span><br><span class="line">     * <span class="meta">@param</span> response    : &#123;<span class="meta">@link</span> HttpServletResponse&#125; 对象</span><br><span class="line">     * </span><br><span class="line">     * @return            : 成功：返回 &#123;@link Result#SUCCESS&#125; ，失败：返回其他结果，</span><br><span class="line">     *                       失败原因通过 &#123;@link FileDownloader#getCause()&#125; 获取</span><br><span class="line">     * </span><br><span class="line">     */</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">downLoad</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        reset();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取要下载的文件的 File 对象</span></span><br><span class="line">            File file = getFile(request);</span><br><span class="line">            <span class="comment">// 执行下载操作</span></span><br><span class="line">            downLoadFile(request, response, file);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            cause = e;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(e <span class="keyword">instanceof</span> FileNotFoundException)    <span class="keyword">return</span> Result.FILE_NOT_FOUND;</span><br><span class="line">            <span class="keyword">if</span>(e <span class="keyword">instanceof</span> IOException)            <span class="keyword">return</span> Result.READ_WRITE_FAIL;</span><br><span class="line">                                                    <span class="keyword">return</span> Result.UNKNOWN_EXCEPTION;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Result.SUCCESS; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行下载操作</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">downLoadFile</span><span class="params">(HttpServletRequest request, HttpServletResponse response, File file)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String fileName            = <span class="keyword">new</span> String(saveFileName.getBytes(), <span class="string">"ISO-8859-1"</span>);</span><br><span class="line">        <span class="comment">// 解析 HTTP 请求头，获取文件的读取范围</span></span><br><span class="line">        Range&lt;Integer&gt; range    = parseDownloadRange(request);    </span><br><span class="line">        <span class="keyword">int</span> length                = (<span class="keyword">int</span>)file.length();</span><br><span class="line">        <span class="keyword">int</span> begin                = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end                    = length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置 HTTP 响应头</span></span><br><span class="line">        response.setContentType(contentType);</span><br><span class="line">        response.setContentLength(length);</span><br><span class="line">        response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + fileName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 确定文件的读取范围（用于断点续传）</span></span><br><span class="line">        <span class="keyword">if</span>(range != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(range.getBegin()    != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                begin = range.getBegin();</span><br><span class="line">                <span class="keyword">if</span>(range.getEnd() != <span class="keyword">null</span>)</span><br><span class="line">                    end = range.getEnd();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(range.getEnd() != <span class="keyword">null</span>)</span><br><span class="line">                    begin = end + range.getEnd() + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            String contentRange = String.format(<span class="string">"bytes %d-%d/%d"</span>, begin, end, length);</span><br><span class="line">            response.setHeader(<span class="string">"Accept-Ranges"</span>, <span class="string">"bytes"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Content-Range"</span>, contentRange);</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 实际执行下载操作</span></span><br><span class="line">        doDownloadFile(response, file, begin, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实际执行下载操作</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDownloadFile</span><span class="params">(HttpServletResponse response, File file, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        InputStream is    = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os    = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] b    = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferSize];</span><br><span class="line">            is            = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">            os            = <span class="keyword">new</span> BufferedOutputStream(response.getOutputStream());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 跳过已下载的文件内容</span></span><br><span class="line">            is.skip(begin);</span><br><span class="line">            <span class="comment">// I/O 读写</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i, left = end - begin + <span class="number">1</span>; left &gt; <span class="number">0</span> &amp;&amp; ((i = is.read(b, <span class="number">0</span>, Math.min(b.length, left))) != -<span class="number">1</span>); left -= i)</span><br><span class="line">                os.write(b, <span class="number">0</span>, i);</span><br><span class="line">            </span><br><span class="line">            os.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(is != <span class="keyword">null</span>) &#123;<span class="keyword">try</span>&#123;is.close();&#125; <span class="keyword">catch</span>(IOException e) &#123;&#125;&#125;</span><br><span class="line">            <span class="keyword">if</span>(os != <span class="keyword">null</span>) &#123;<span class="keyword">try</span>&#123;os.close();&#125; <span class="keyword">catch</span>(IOException e) &#123;&#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    / 文件下载结果枚举值 */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> Result</span><br><span class="line">    &#123;</span><br><span class="line">        / 成功 */</span><br><span class="line">        SUCCESS,</span><br><span class="line">        / 失败：文件不存在 */</span><br><span class="line">        FILE_NOT_FOUND,</span><br><span class="line">        / 失败：读写操作失败 */</span><br><span class="line">        READ_WRITE_FAIL,</span><br><span class="line">        / 失败：未知异常 */</span><br><span class="line">        UNKNOWN_EXCEPTION;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0163.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Java 文件上传及下载&lt;br&gt;
    
    </summary>
    
      <category term="fileupload" scheme="http://www.iskei.cn/categories/fileupload/"/>
    
    
      <category term="fileupload" scheme="http://www.iskei.cn/tags/fileupload/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO Path and Files</title>
    <link href="http://www.iskei.cn/posts/58642.html"/>
    <id>http://www.iskei.cn/posts/58642.html</id>
    <published>2018-03-23T12:30:36.000Z</published>
    <updated>2018-04-18T09:00:50.178Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0162.jpg" alt="image"></p><p>Java NIO Path接口和Files类配合操作文件<br><a id="more"></a></p><h2 id="Path接口"><a href="#Path接口" class="headerlink" title="Path接口"></a>Path接口</h2><hr><p>1、Path表示的是一个目录名序列，其后还可以跟着一个文件名，路径中第一个部件是根部件时就是绝对路径，例如 / 或 C:\ ，而允许访问的根部件取决于文件系统；</p><p>2、以根部件开始的路径是绝对路径，否则就是相对路径；</p><p>3、静态的<strong>Paths.get</strong>方法接受一个或多个字符串，字符串之间<strong>自动使用</strong>默认文件系统的路径分隔符连接起来（Unix是 /，Windows是 \ ），这就解决了跨平台的问题，接着解析连接起来的结果，如果不是合法路径就抛出InvalidPathException异常，否则就返回一个Path对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设是Unix的文件系统</span></span><br><span class="line">Path absolute = Paths.get(<span class="string">"/home"</span>, <span class="string">"cat"</span>); <span class="comment">//绝对路径 </span></span><br><span class="line">Path relative = Pahts.get(<span class="string">"ixenos"</span>, <span class="string">"config"</span>, <span class="string">"user.properties"</span>); <span class="comment">//相对路径</span></span><br></pre></td></tr></table></figure><p>4、由String路径获取Path对象</p><p><strong>get还可以获取一整条路径</strong>（即多个部件构成的单个字符串），例如从配置文件中读取路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String baseDir = properties.getProperty(<span class="string">"base.dir"</span>);</span><br><span class="line"> <span class="comment">//可能获得 /opt/ixenos 或者 C:\Program Files\ixenos</span></span><br><span class="line"> Path basePath = Paths.get(baseDir);</span><br></pre></td></tr></table></figure><p>5、组合或解析路径</p><p>　　1) 调用 <strong>p.resolve(q)</strong> 将按下面的规则返回一个Path：如果q是绝对路径，则返回q，否则<strong>追加路径</strong>返回 p/q 或者 p\q</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Path workRelative = Paths.get(<span class="string">"work"</span>);</span><br><span class="line">Path workPath = basePath.resolve(workRelative);</span><br><span class="line"> <span class="comment">//resolve也可以接受字符串形参</span></span><br><span class="line">Path workPath = basePath.resolve(<span class="string">"work"</span>);</span><br></pre></td></tr></table></figure><p>　　2) 调用 <strong>p.resolveSibling(“q”)</strong> 将解析指定路径 p 的父路径 o ，并<strong>产生兄弟路径</strong> o/q</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Path tempPath = workPath.resolveSibling(<span class="string">"temp"</span>);</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">   如果workPath是 /opt/ixenos/work</span></span><br><span class="line"><span class="comment">    那么将创建 /opt/ixenos/temp  </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>　　3) 调用 <strong>p.relativize(r)</strong> 将产生一个冗余路径q，对q进行解析将产生<strong>相对路径r，</strong>最终r不包含和p的交集路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    pathA为 /home/misty</span></span><br><span class="line"><span class="comment">    pathB为 /home/ixenos/config </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    现已pathA对pathB进行相对化操作，将产生冗余路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Path pathC = pathA.relativize(pathB); <span class="comment">//此时pathC为 ../ixenos/config</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    normalize方法将移除冗余部件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Path pathD = pathC.normalize(); <span class="comment">//pathD为 /ixenos/config</span></span><br></pre></td></tr></table></figure><p>　　4) <strong>toAbsolutePath</strong> 将产生给定路径的<strong>绝对路径</strong>，从根部件开始</p><p>　　5) Path类还有一些有用的断开和组合路径的方法，比如 <strong>getParent</strong>、<strong>getFileName</strong>、<strong>getRoot</strong>//获得根目录</p><p>　　6) Path有个<strong>toFile</strong>方法用来跟<strong>遗留类File类</strong>打交道，File类也有个toPath方法</p><h2 id="Files工具类"><a href="#Files工具类" class="headerlink" title="Files工具类"></a>Files工具类</h2><hr><h3 id="1、读写文件"><a href="#1、读写文件" class="headerlink" title="1、读写文件"></a>1、<strong>读写文件</strong></h3><p>方法签名:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> path **write**(Path path, <span class="keyword">byte</span>[] bytes, OpenOption... options)</span><br><span class="line">　<span class="function"><span class="keyword">static</span> path <span class="title">write</span><span class="params">(Path path, Iterable&lt;? extends CharSequence&gt; lines, OpenOption... options)</span></span></span><br></pre></td></tr></table></figure><p>这里只列举下面用到的方法，更多方法请看API文档…</p><p><strong>其中OpenOption是个nio接口，StandardOpenOption是其枚举实现类，各枚举实例功能请查看API文档</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Files提供的简便方法适用于处理中等长度的文本文件</span></span><br><span class="line"><span class="comment">    如果要处理的文件长度较大，或者二进制文件，那么还是应该使用经典的IO流 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//将文件所有内容读入byte数组中</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = Files.readAllBytes(path); <span class="comment">//传入Path对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//之后可以根据字符集构建字符串</span></span><br><span class="line">String content = <span class="keyword">new</span> String(bytes, charset);</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以直接当作行序列读入</span></span><br><span class="line">List&lt;String&gt; lines = Files.readAllLines(path, charset);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相反，也可以写一个字符串到文件中，默认是覆盖</span></span><br><span class="line">Files.write(path, content.getBytes(charset)); <span class="comment">//传入byte[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//追加内容，根据参数决定追加等功能</span></span><br><span class="line">Files.write(path, content.getBytes(charset), StandardOpenOption.APPEND); <span class="comment">//传入枚举对象，打开追加开关</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个行String的集合List写出到文件中</span></span><br><span class="line">Files.write(path, lines);</span><br></pre></td></tr></table></figure><h3 id="2、复制、剪切、删除"><a href="#2、复制、剪切、删除" class="headerlink" title="2、复制、剪切、删除"></a><strong>2、复制、剪切、删除</strong></h3><p>方法签名:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　<span class="function"><span class="keyword">static</span> path <span class="title">copy</span><span class="params">(Path source, Path target, CopyOption... options)</span></span></span><br><span class="line"><span class="function">　　<span class="keyword">static</span> path <span class="title">move</span><span class="params">(Path source, Path target, CopyOption... options)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Path path)</span> <span class="comment">//如果path不存在文件将抛出异常，此时调用下面的比较好</span></span></span><br><span class="line"><span class="function">　　<span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteIfExists</span><span class="params">(Path path)</span></span></span><br></pre></td></tr></table></figure><p>　　<a href="">这里只列举下面用到的方法，更多方法请看API文档…</a></p><p><strong>其中CopyOption是个nio接口，StandardCopyOption是其枚举实现类，各枚举实例功能请查看API文档</strong></p><p>　　其中有个<strong>ATOMIC_MOVE可以填入用来保证原子性操作</strong>，要么移动成功完成，要么源文件保持在原位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//复制</span></span><br><span class="line">Files.copy(fromPath, toPath);</span><br><span class="line"><span class="comment">//剪切</span></span><br><span class="line">Files.move(fromPath, toPath);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    以上如果toPath已存在，那么操作失败，</span></span><br><span class="line"><span class="comment">    如果要覆盖，需传入参数REPLACE_EXISTING</span></span><br><span class="line"><span class="comment">    还要复制文件属性，传入COPY_ATTRIBUTES</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Files.copy(fromPath, toPath, StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.COPY_ATTRIBUTES);</span><br></pre></td></tr></table></figure><h3 id="3、创建文件和目录"><a href="#3、创建文件和目录" class="headerlink" title="3、创建文件和目录"></a><strong>3、创建文件和目录</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建新目录，除了最后一个部件，其他必须是已存在的</span></span><br><span class="line">Files.createDirectory(path); </span><br><span class="line"><span class="comment">//创建路径中的中间目录，能创建不存在的中间部件</span></span><br><span class="line">Files.createDirectories(path);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   创建一个空文件，检查文件存在，如果已存在则抛出异常</span></span><br><span class="line"><span class="comment">   而检查文件存在是原子性的，因此在此过程中无法执行文件创建操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Files.createFile(path);</span><br><span class="line"><span class="comment">//添加前/后缀创建临时文件或临时目录</span></span><br><span class="line">Path newPath = Files.createTempFile(dir, prefix, suffix);</span><br><span class="line">Path newPath = Files.createTempDirectory(dir, prefix);</span><br></pre></td></tr></table></figure><h3 id="4、获取文件信息"><a href="#4、获取文件信息" class="headerlink" title="4、获取文件信息"></a><strong>4、获取文件信息</strong></h3><p>略，具体看API文档，或者corejava page51</p><h3 id="5、迭代目录中的文件"><a href="#5、迭代目录中的文件" class="headerlink" title="5、迭代目录中的文件"></a>5、迭代目录中的文件</h3><p>　　<strong>旧的File类</strong>有两个方法获取目录中所有文件构成的字符串数组，String[] list() 和String[] list(FileFilter filter)，但是<strong>当目录中包含大量文件时，这两方法性能会非常低。</strong></p><p><strong>原因分析：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//File类list所有文件</span></span><br><span class="line">    <span class="keyword">public</span> String[] list() &#123;</span><br><span class="line">        SecurityManager security = System.getSecurityManager(); <span class="comment">//文件系统权限获取</span></span><br><span class="line">        <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">            security.checkRead(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isInvalid()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fs.list(<span class="keyword">this</span>); <span class="comment">//底层调用FileSystem的list</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//FileSystem抽象类的list</span></span><br><span class="line"> <span class="comment">//File类中定义fs是由DefaultFileSystem静态生成的</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> FileSystem fs = DefaultFileSystem.getFileSystem();</span><br><span class="line"></span><br><span class="line"><span class="comment">//因此我们来看一下DefaultFileSystem类，发现是生成一个WinNtFileSystem对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultFileSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the FileSystem object for Windows platform.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FileSystem <span class="title">getFileSystem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WinNTFileSystem();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//而WinNtFileSystem类继承于FileSystem抽象类，这里我们主要观察它的list(File file)方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> String[] list(File f);</span><br><span class="line"><span class="comment">/*我们可以看到这是个native方法，说明list的操作是由操作系统的文件系统控制的，当目录中包含大量的文件时，这个方法的性能将会非常低。</span></span><br><span class="line"><span class="comment">由此为了替代，NIO的Files类设计了newDirectoryStream(Path dir)及其重载方法，将生成Iterable对象（可用foreach迭代）*/</span><span class="comment">//~</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//回调过滤</span></span><br><span class="line">    <span class="keyword">public</span> String[] list(FilenameFilter filter) &#123; <span class="comment">//采用接口回调</span></span><br><span class="line">        String names[] = list(); <span class="comment">//调用list所有</span></span><br><span class="line">        <span class="keyword">if</span> ((names == <span class="keyword">null</span>) || (filter == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> names;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; v = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; names.length ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (filter.accept(<span class="keyword">this</span>, names[i])) &#123;  <span class="comment">//回调FilenameFileter对象的accept方法</span></span><br><span class="line">                v.add(names[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v.toArray(<span class="keyword">new</span> String[v.size()]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="这时候高科技来了——Files获得可迭代的目录流，"><a href="#这时候高科技来了——Files获得可迭代的目录流，" class="headerlink" title="这时候高科技来了——Files获得可迭代的目录流，"></a>这时候高科技来了——Files获得可迭代的目录流，</h3><h4 id="传入一个目录Path，遍历子孙目录返回一个目录Path的Stream，注意这里所有涉及的Path都是目录而不是文件！"><a href="#传入一个目录Path，遍历子孙目录返回一个目录Path的Stream，注意这里所有涉及的Path都是目录而不是文件！" class="headerlink" title="传入一个目录Path，遍历子孙目录返回一个目录Path的Stream，注意这里所有涉及的Path都是目录而不是文件！"></a>传入一个目录Path，遍历子孙目录返回一个目录Path的Stream，注意这里所有涉及的Path都是目录而不是文件！</h4><p>因此，Files类设计了<strong>newDirectoryStream(Path dir)</strong>及其重载方法，将生成Iterable对象（可用foreach迭代）</p><p>遍历目录得到一个可迭代的子孙文件集合</p><table><thead><tr><th><code>staticDirectoryStream&lt;Path&gt;</code></th><th><code>newDirectoryStream(Path dir)</code>Opens a directory, returning a <a href=""><code>DirectoryStream</code></a> to iterate over all entries in the directory.</th></tr></thead><tbody><tr><td><code>staticDirectoryStream&lt;Path&gt;</code></td><td><code>newDirectoryStream(Path dir, DirectoryStream.Filter&lt;? superPath&gt; filter)</code>Opens a directory, returning a <a href=""><code>DirectoryStream</code></a> to iterate over the entries in the directory.</td></tr><tr><td><code>staticDirectoryStream&lt;Path&gt;</code></td><td><code>newDirectoryStream(Path dir, String glob)</code></td></tr></tbody></table><p>　　返回一个 <strong>目录流 ，可以看成一个存放着全部Path的实现了Iterable的集合</strong>，</p><p>　　　　因此可用迭代器或foreach迭代，只是使用迭代器的时候要注意不能invoke另一个Iterator：</p><ul><li><ul><li><strong>While DirectoryStream extends Iterable, it is not a general-purpose Iterable as it supports only a single Iterator; invoking the iterator method to obtain a second or subsequent iterator throws IllegalStateException.</strong> </li></ul></li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(DirectoryStream&lt;Path&gt; entries = Files.newDirectoryStream(dir))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(Path entry : entries)</span><br><span class="line">    &#123;</span><br><span class="line">         ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　可以传入glob参数，即使用<strong>glob模式</strong>来<strong>过滤文件</strong>（以取代<code>list(FileFilter filter)：newDirectoryStream(Path dir, String glob)</code> 注意是String类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(DirectoryStream&lt;Path&gt; entries = Files.newDirectoryStream(dir, <span class="string">"*.java"</span>)) <span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　<strong>glob模式</strong></p><p>所谓的 glob 模式是指 shell 所使用的简化了的<strong>正则表达式</strong>。</p><p>1.星号 <em> 匹配<strong>路径组成部分</strong>0个或多个字符；例如 </em>.java 匹配<strong>当前目录中</strong>的所有Java文件</p><p>2.两星号 <strong> 匹配</strong>跨目录边界<strong>0个或多个字符；例如 </strong>.java 匹配在<strong>所有子目录中</strong>的Java文件</p><p>3.问号（?）只匹配一个字符；例如 ????.java 匹配所有<strong>四个字符</strong>的Java文件，不包括扩展名；使用?是因为*是通配符不指定数量</p><p>4.[…] 匹配<strong>一个</strong>字符集合，可以用连线 [0-9] 和取反符 [!0-9]；例如 Test[0-9A-F].java 匹配Testx.java，假设x是一个十六进制数字，[0-9A-F]是匹配单个字符为十六进制数字，比如B（十六进制不区分大小写）</p><p>　　<em>如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）</em>。</p><p>5.{…} 匹配由逗号隔开的<strong>多个可选项</strong>之中的一个；例如 *.{java,class} 匹配所有Java文件和类class文件</p><p>6.\ 转义上述任意模式中的字符；例如 <em>** 匹配所有子目录中文件名包含</em>的文件，这里为 ** 转义，前面是匹配0个或多个字符</p><p>下面是网友总结的Glob模式：</p><table><thead><tr><th>Glob模式</th><th>描述</th></tr></thead><tbody><tr><td>*.txt</td><td>匹配所有扩展名为.txt的文件</td></tr><tr><td>*.{html,htm}</td><td>匹配所有扩展名为.html或.htm的文件。{ }用于组模式，它使用逗号分隔</td></tr><tr><td>?.txt</td><td>匹配任何单个字符做文件名且扩展名为.txt的文件</td></tr><tr><td><em>.</em></td><td>匹配所有含扩展名的文件</td></tr><tr><td>C:\Users*</td><td>匹配所有在C盘Users目录下的文件。反斜线“\”用于对紧跟的字符进行转义</td></tr><tr><td>/home/**</td><td>UNIX平台上匹配所有/home目录及子目录下的文件。**用于匹配当前目录及其所有子目录</td></tr><tr><td>[xyz].txt</td><td>匹配所有单个字符作为文件名，且单个字符只含“x”或“y”或“z”三种之一，且扩展名为.txt的文件。方括号[]用于指定一个集合</td></tr><tr><td>[a-c].txt</td><td>匹配所有单个字符作为文件名，且单个字符只含“a”或“b”或“c”三种之一，且扩展名为.txt的文件。减号“-”用于指定一个范围，且只能用在方括号[]内</td></tr><tr><td>[!a].txt</td><td>匹配所有单个字符作为文件名，且单个字符不能包含字母“a”，且扩展名为.txt的文件。叹号“!”用于否定</td></tr></tbody></table><h3 id="遍历得到某个目录的所有子孙文件集合再迭代不够爽？来，我们来直接遍历某个目录的所有子孙成员（包括目录和文件）"><a href="#遍历得到某个目录的所有子孙文件集合再迭代不够爽？来，我们来直接遍历某个目录的所有子孙成员（包括目录和文件）" class="headerlink" title="遍历得到某个目录的所有子孙文件集合再迭代不够爽？来，我们来直接遍历某个目录的所有子孙成员（包括目录和文件）"></a>遍历得到某个目录的所有子孙文件集合再迭代不够爽？来，我们来直接遍历某个目录的所有子孙成员（包括目录和文件）</h3><p>　　我们可以调用Files类的<strong>walkFileTree</strong>方法，并传入一个FileVisitor接口类型的对象（还有更多方法在API里等你发现……）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*传入一个FileVisitor子类的匿名对象*/</span></span><br><span class="line">Files.walkFileTree(dir, <span class="keyword">new</span> SimpleFileVisitor&lt;Path&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//walkFileTree回调此方法来遍历所有子孙</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path path, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">              <span class="keyword">if</span>(attrs.isDirectory()) <span class="comment">//自定义的选择，属于业务代码，这和walkFileTree的宗旨(遍历所有子孙成员)无关</span></span><br><span class="line">                  System.out.println(path);</span><br><span class="line">              <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFileFailed</span><span class="params">(Path path, IOException exc)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="咱们来总结一下，"><a href="#咱们来总结一下，" class="headerlink" title="咱们来总结一下，"></a>咱们来总结一下，</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Files.newDirectoryStream(Path dir) <span class="comment">//遍历后返回一个可迭代的子孙文件集合；</span></span><br><span class="line">Files.walkFileTree(Path dir, FileVisitor fv) <span class="comment">//是一个遍历子孙目录和文件的过程；</span></span><br></pre></td></tr></table></figure><h2 id="ZIP文件系统"><a href="#ZIP文件系统" class="headerlink" title="ZIP文件系统"></a>ZIP文件系统</h2><hr><p>由上文知道，Paths类会在<strong>默认的文件系统</strong>中查找路径，即在用户本地磁盘中的文件。</p><p>其实，我们也可以有其他的文件系统，比如<strong>ZIP文件系统</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*假设zipname是某个ZIP文件的名字*/</span></span><br><span class="line">FileSystem fs = FileSystems.newFileSystem(Paths.get(zipname), <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p> 上述代码将建立一个<strong>基于zipname的文件系统，它包含ZIP文档中的所有文件</strong>。</p><p>　　1）如果知道<strong>文件名（String类型）</strong>，那么从这个ZIP文档中复制出这个文件就很容易：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Files.copy(fs.getPath(fileName), targetPath);</span><br></pre></td></tr></table></figure><p>　　　　Q：fs.getPath是使用了ZIP文件系统来getPath，那么默认的文件系统能调用吗？</p><p>　　　　A：能。FileSystem类中有一个静态的getDefault()方法，返回一个默认的文件系统对象，同样可以由文件名getPath。</p><p>　　　　　　*具体getPath(String name)是遍历还是随机访问，有空再去看源码实现。<br>　　2）要列出ZIP文档中的所有文件，同样可以用walkFileTree遍历文件树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FileSystem fs = FileSystems.newFileSystem(Paths.get(fileName), <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//walkFileTree需要传入一个要被遍历的目录Path，和一个FileVisitor对象</span></span><br><span class="line">Files.walkFileTree(fs.getPath(<span class="string">"/"</span>), </span><br><span class="line">        newSimpleFileVisitor&lt;Path&gt;()&#123;</span><br><span class="line">               <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">                     System.out.println(file);</span><br><span class="line">                     <span class="keyword">return</span> FileVisitResult.CONTINUE; </span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0162.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Java NIO Path接口和Files类配合操作文件&lt;br&gt;
    
    </summary>
    
      <category term="NIO" scheme="http://www.iskei.cn/categories/NIO/"/>
    
    
      <category term="NIO" scheme="http://www.iskei.cn/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>WebUploader上传组件</title>
    <link href="http://www.iskei.cn/posts/41980.html"/>
    <id>http://www.iskei.cn/posts/41980.html</id>
    <published>2018-03-22T12:30:36.000Z</published>
    <updated>2018-04-18T09:00:50.178Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0161.jpg" alt="image"></p><p>大文件上传组件<br><a id="more"></a></p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p><code>$(function(){…});   jQuery(function($) {…});  $(document).ready(function(){…})</code>这三个的作用是一样的，本人比较需要用第一种、书写简单。文档载入完成后执行的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个div用来存放文件上传时的信息</span></span><br><span class="line"><span class="comment">//一个div用来存放上传相关的按钮</span></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"./web-uploader/webuploader.css"</span> /&gt;</span><br><span class="line">&lt;!--<span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">style</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./jQuery/jquery-2.2.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>--&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"./web-uploader/webuploader.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;div id=<span class="string">"uploader"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"wu-example"</span>&gt;</span><br><span class="line">    &lt;!--用来存放文件信息--&gt;</span><br><span class="line">    &lt;div id=<span class="string">"thelist"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"uploader-list"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"btns"</span>&gt;</span><br><span class="line">        &lt;div id=<span class="string">"picker"</span>&gt;选择文件&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button id="ctlBtn" class="btn btn-default"&gt;开始上传&lt;/</span>button&gt;</span><br><span class="line">        &lt;button id=<span class="string">"goBack"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-default"</span>&gt;返回&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span>*</span><br><span class="line"><span class="number">1</span>、首先用WebUploader.create创建一个 WebUploader对象 ，并在create中添加自定义配置项</span><br><span class="line"><span class="number">2</span>、然后手动给WebUploader对象添加事件，用到的基本事件是 </span><br><span class="line">fileQueued 文件被添加进队列的时候，在thelist div 中显示文件信息</span><br><span class="line">uploadProgress 文件上传过程中创建进度条实时显示</span><br><span class="line">uploadSuccess</span><br><span class="line">uploadError </span><br><span class="line">uploadComplete 在文件上传完后都会触发uploadComplete事件</span><br><span class="line"><span class="number">3</span>、最后 调用upload()方法实现上传，</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var uploader = WebUploader.create(&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ swf文件路径</span></span><br><span class="line"><span class="regexp">swf:  '/</span>js/Uploader.swf<span class="string">',</span></span><br><span class="line"><span class="string">formData:&#123;"dn":$("#requestDn").val()&#125;,//参数列表</span></span><br><span class="line"><span class="string">// 文件接收服务端。</span></span><br><span class="line"><span class="string">server: '</span>/tp5/index/user/uploadFile<span class="string">',</span></span><br><span class="line"><span class="string">// 选择文件的按钮。可选。</span></span><br><span class="line"><span class="string">// 内部根据当前运行是创建，可能是input元素，也可能是flash.</span></span><br><span class="line">pick: '#picker',</span><br><span class="line"><span class="comment">// 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！</span></span><br><span class="line">resize: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 只允许选择图片文件。</span></span><br><span class="line">accept: &#123;</span><br><span class="line">title: <span class="string">'file'</span>,</span><br><span class="line">extensions: <span class="string">'cer'</span></span><br><span class="line"><span class="comment">//                mimeTypes: '.cer,'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> $list = $(<span class="string">"#thelist"</span>);</span><br><span class="line">uploader.on( <span class="string">'fileQueued'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">$list.append( <span class="string">'&lt;div id="'</span> + file.id + <span class="string">'" class="item"&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;h4 class="info"&gt;'</span> + file.name + <span class="string">'&lt;/h4&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;p class="state"&gt;等待上传...&lt;/p&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;p class="progress progress-bar"&gt;上传进度...&lt;/p&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;/div&gt;'</span> );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">uploader.on( <span class="string">'uploadSuccess'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">$( <span class="string">'#'</span>+file.id ).find(<span class="string">'p.state'</span>).text(<span class="string">'已上传'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 文件上传过程中创建进度条实时显示。</span></span><br><span class="line">uploader.on( <span class="string">'uploadProgress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file, percentage </span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> $li = $( <span class="string">'#'</span>+file.id ),</span><br><span class="line">$percent = $li.find(<span class="string">'.progress .progress-bar'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 避免重复创建</span></span><br><span class="line"><span class="keyword">if</span> ( !$percent.length ) &#123;</span><br><span class="line">$percent = $(<span class="string">'&lt;div class="progress progress-striped active"&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;div class="progress-bar" role="progressbar" style="width: 0%"&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;/div&gt;'</span>).appendTo( $li ).find(<span class="string">'.progress-bar'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$li.find(<span class="string">'p.state'</span>).text(<span class="string">'上传中'</span>);</span><br><span class="line"></span><br><span class="line">$percent.css( <span class="string">'width'</span>, percentage * <span class="number">100</span> + <span class="string">'%'</span> );</span><br><span class="line">&#125;);</span><br><span class="line">uploader.on( <span class="string">'uploadError'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">$( <span class="string">'#'</span>+file.id ).find(<span class="string">'p.state'</span>).text(<span class="string">'上传出错'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">uploader.on( <span class="string">'uploadComplete'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">$( <span class="string">'#'</span>+file.id ).find(<span class="string">'.progress'</span>).fadeOut();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#ctlBtn"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">uploader.upload();</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"#goBack"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">"#uploadFileDiv"</span>).empty();</span><br><span class="line">$(<span class="string">"#uploadFile"</span>).removeClass(<span class="string">"hidden"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="接口说明"><a href="#接口说明" class="headerlink" title="接口说明"></a>接口说明</h4><p>这里是简单介绍，具体接口参考 </p><p>webuploader接口文档地址</p><p>Web Uploader内部类的详细说明，以下提及的功能类，都可以在 WebUploader 这个变量中访问到。</p><p>也就是说下面提到的 Base类 、Mediator类 、file类 、Queue类 都可以直接用 WebUploader 创建的变量直接访问，</p><p>例如下面创建的 uploader 变量，就可以直接访问 Base类 的 uploader.browser.ie</p><p>//Demo中使用的是WebUploader.create方法来初始化的，实际上可直接访问WebUploader.Uploader</p><h5 id="Uploader类-上传入口类"><a href="#Uploader类-上传入口类" class="headerlink" title="Uploader类 上传入口类"></a>Uploader类 上传入口类</h5><h6 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h6><p>下面所有参数都是可选的，并且都有默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uploader = WebUploader.Uploader(&#123;</span><br><span class="line"><span class="comment">//几个常用的参数：swf,pick,formData,runtimeOrder</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//所有参数列表</span></span><br><span class="line">swf: <span class="string">'path_of_swf/Uploader.swf'</span>,</span><br><span class="line">dnd: <span class="string">'#dndArea'</span>, <span class="comment">// [默认值：undefined] 指定Drag And Drop拖拽的容器，如果不指定，则不启动。</span></span><br><span class="line">disableGlobalDnd: <span class="literal">true</span>,, <span class="comment">// [默认值：false] 是否禁掉整个页面的拖拽功能，如果不禁用，图片拖进来的时候会默认被浏览器打开</span></span><br><span class="line">paste: <span class="string">'#uploader'</span>, <span class="comment">// [默认值：undefined] 指定监听paste事件的容器，如果不指定，不启用此功能。此功能为通过粘贴来添加截屏的图片。建议设置为document.body.</span></span><br><span class="line">pick:<span class="string">'#filePicker'</span>,<span class="comment">//也可以用下面的方式详细配置</span></span><br><span class="line"><span class="comment">// &#123;Selector, Object&#125;  [默认值：undefined] 指定选择文件的按钮容器，不指定则不创建按钮。</span></span><br><span class="line">pick: &#123;</span><br><span class="line">id: <span class="string">'#filePicker'</span>,<span class="comment">//Seletor|dom 指定选择文件的按钮容器，不指定则不创建按钮。注意 这里虽然写的是 id, 但是不是只支持 id, 还支持 class, 或者 dom 节点。</span></span><br><span class="line">label: <span class="string">'点击选择图片'</span>,<span class="comment">//请采用 innerHTML 代替</span></span><br><span class="line">innerHTML: <span class="string">"点击选择图片"</span>,<span class="comment">// 指定按钮文字。不指定时优先从指定的容器中看是否自带文字。</span></span><br><span class="line">multiple:<span class="literal">true</span> <span class="comment">//是否开起同时选择多个文件能力。</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//限制上传的文件类型</span></span><br><span class="line">accept: &#123;</span><br><span class="line">title: <span class="string">'Images'</span>,<span class="comment">// &#123;String&#125; 文字描述</span></span><br><span class="line">extensions: <span class="string">'gif,jpg,jpeg,bmp,png,rar'</span>,<span class="comment">// &#123;String&#125; 允许的文件后缀，不带点，多个用逗号分割。</span></span><br><span class="line">mimeTypes: <span class="string">'image/gif，image/jpg，image/jpeg，image/bmp，image/png，.rar'</span><span class="comment">// 多个用逗号分割。</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 设置缩略图。</span></span><br><span class="line">thumb: &#123;</span><br><span class="line">width: <span class="number">110</span>,</span><br><span class="line">height: <span class="number">110</span>,</span><br><span class="line"><span class="comment">// 图片质量，只有type为`image/jpeg`的时候才有效。</span></span><br><span class="line">quality: <span class="number">70</span>,</span><br><span class="line"><span class="comment">// 是否允许放大，如果想要生成小图的时候不失真，此选项应该设置为false.</span></span><br><span class="line">allowMagnify: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 是否允许裁剪。是否采用裁剪模式。如果采用这样可以避免空白内容。</span></span><br><span class="line">crop: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 为空的话则保留原有图片格式。</span></span><br><span class="line"><span class="comment">// 否则强制转换成指定的类型。</span></span><br><span class="line">type: <span class="string">'image/jpeg'</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 配置压缩的图片的选项。如果此选项为false, 则图片在上传前不进行压缩。</span></span><br><span class="line">compress: &#123;</span><br><span class="line">width: <span class="number">1600</span>,</span><br><span class="line">height: <span class="number">1600</span>,</span><br><span class="line"><span class="comment">// 图片质量，只有type为`image/jpeg`的时候才有效。</span></span><br><span class="line">quality: <span class="number">90</span>,</span><br><span class="line"><span class="comment">// 是否允许放大，如果想要生成小图的时候不失真，此选项应该设置为false.</span></span><br><span class="line">allowMagnify: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 是否允许裁剪。</span></span><br><span class="line">crop: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 是否保留头部meta信息。</span></span><br><span class="line">preserveHeaders: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 如果发现压缩后文件大小比原来还大，则使用原来图片</span></span><br><span class="line"><span class="comment">// 此属性可能会影响图片自动纠正功能</span></span><br><span class="line">noCompressIfLarger: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 单位字节，如果图片大小小于此值，不会采用压缩。</span></span><br><span class="line">compressSize: <span class="number">0</span></span><br><span class="line">&#125;, </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">auto: <span class="literal">true</span>, <span class="comment">// [默认值：false] 设置为 true 后，不需要手动调用上传，有文件选择即开始上传。</span></span><br><span class="line">runtimeOrder: <span class="string">'flash'</span>, <span class="comment">// [默认值：html5,flash] 指定运行时启动顺序。默认会想尝试 html5 是否支持，如果支持则使用 html5, 否则则使用 flash.可以将此值设置成 flash，来强制使用 flash 运行时。</span></span><br><span class="line">prepareNextFile:<span class="literal">false</span>, <span class="comment">// [默认值：false] 是否允许在文件传输时提前把下一个文件准备好。 对于一个文件的准备工作比较耗时，比如图片压缩，md5序列化。 如果能提前在当前文件传输期处理，可以节省总体耗时。</span></span><br><span class="line">chunked:<span class="literal">false</span>, <span class="comment">// [默认值：false] 是否要分片处理大文件上传。</span></span><br><span class="line">chunkSize: <span class="number">512</span> * <span class="number">1024</span>,<span class="comment">// [默认值：5242880] 如果要分片，分多大一片？ 默认大小为5M.</span></span><br><span class="line">chunkRetry:<span class="number">2</span>, <span class="comment">// [默认值：2] 如果某个分片由于网络问题出错，允许自动重传多少次？</span></span><br><span class="line">threads:<span class="number">3</span>, <span class="comment">// [默认值：3] 上传并发数。允许同时最大上传进程数。</span></span><br><span class="line">formData: &#123;<span class="string">"data"</span>:<span class="string">"value"</span>,<span class="string">"data"</span>:<span class="string">"value"</span>&#125;, <span class="comment">// [默认值：&#123;&#125;] 文件上传请求的参数表，每次发送都会发送此对象中的参数。</span></span><br><span class="line">fileVal:<span class="string">"file"</span>, <span class="comment">// [默认值：'file'] 设置文件上传域的name。</span></span><br><span class="line">method :<span class="string">"POST"</span>, <span class="comment">// [默认值：'POST'] 文件上传方式，POST或者GET。</span></span><br><span class="line">sendAsBinary :<span class="literal">false</span>, <span class="comment">// [默认值：false] 是否已二进制的流的方式发送文件，这样整个上传内容php://input都为文件内容， 其他参数在$_GET数组中。</span></span><br><span class="line">fileNumLimit :<span class="number">10</span>, <span class="comment">// [默认值：undefined] 验证文件总数量, 超出则不允许加入队列。</span></span><br><span class="line">fileSizeLimit : <span class="number">200</span> * <span class="number">1024</span> * <span class="number">1024</span>,    <span class="comment">// 200 M  [默认值：undefined] 验证文件总大小是否超出限制, 超出则不允许加入队列。</span></span><br><span class="line">fileSingleSizeLimit: <span class="number">50</span> * <span class="number">1024</span> * <span class="number">1024</span>,    <span class="comment">// 50 M [默认值：undefined] 验证单个文件大小是否超出限制, 超出则不允许加入队列。</span></span><br><span class="line">duplicate :<span class="literal">true</span>, <span class="comment">// [默认值：undefined] 去重， 根据文件名字、文件大小和最后修改时间来生成hash Key.</span></span><br><span class="line">disableWidgets: &#123;<span class="built_in">String</span>, <span class="built_in">Array</span>&#125;, <span class="comment">// [默认值：undefined] 默认所有 Uploader.register 了的 widget 都会被加载，如果禁用某一部分，请通过此 option 指定黑名单。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="uploader对象的选项"><a href="#uploader对象的选项" class="headerlink" title="uploader对象的选项"></a>uploader对象的选项</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、option() <span class="comment">//获取或者设置Uploader配置项。</span></span><br><span class="line"><span class="comment">// 修改后图片上传前，尝试将图片压缩到1600 * 1600</span></span><br><span class="line">uploader.option( <span class="string">'compress'</span>, &#123;</span><br><span class="line">width: <span class="number">1600</span>,</span><br><span class="line">height: <span class="number">1600</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="number">2</span>、getStats() <span class="comment">//获取文件统计信息。返回一个包含一下信息的对象。</span></span><br><span class="line"><span class="comment">//successNum 上传成功的文件数</span></span><br><span class="line"><span class="comment">//progressNum 上传中的文件数</span></span><br><span class="line"><span class="comment">//cancelNum 被删除的文件数</span></span><br><span class="line"><span class="comment">//invalidNum 无效的文件数</span></span><br><span class="line"><span class="comment">//uploadFailNum 上传失败的文件数</span></span><br><span class="line"><span class="comment">//queueNum 还在队列中的文件数</span></span><br><span class="line"><span class="comment">//interruptNum 被暂停的文件数</span></span><br><span class="line">stats = uploader.getStats();</span><br><span class="line"><span class="keyword">if</span> ( stats.successNum &amp;&amp; !stats.uploadFailNum ) &#123;</span><br><span class="line">setState( <span class="string">'finish'</span> );</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3</span>、destroy() <span class="comment">//销毁 webuploader 实例</span></span><br><span class="line"><span class="number">4</span>、addButton() <span class="comment">//添加文件选择按钮，如果一个按钮不够，需要调用此方法来添加。参数跟options.pick一致。</span></span><br><span class="line">uploader.addButton(&#123;</span><br><span class="line">id: <span class="string">'#filePicker2'</span>,</span><br><span class="line">label: <span class="string">'继续添加'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="number">5</span>、makeThumb() <span class="comment">//生成缩略图，此过程为异步，所以需要传入callback。 通常情况在图片加入队里后调用此方法来生成预览图以增强交互效果。</span></span><br><span class="line"><span class="comment">//当 width 或者 height 的值介于 0 - 1 时，被当成百分比使用。</span></span><br><span class="line"><span class="comment">//callback中可以接收到两个参数。</span></span><br><span class="line"><span class="comment">//第一个为error，如果生成缩略图有错误，此error将为真。</span></span><br><span class="line"><span class="comment">//第二个为ret, 缩略图的Data URL值。</span></span><br><span class="line"><span class="comment">//注意 Date URL在IE6/7中不支持，所以不用调用此方法了，直接显示一张暂不支持预览图片好了。 也可以借助服务端，将 base64 数据传给服务端，生成一个临时文件供预览。</span></span><br><span class="line">uploader.makeThumb( file, <span class="function"><span class="keyword">function</span>(<span class="params"> error, src </span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> img;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( error ) &#123;</span><br><span class="line">$wrap.text( <span class="string">'不能预览'</span> );</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( isSupportBase64 ) &#123;</span><br><span class="line">img = $(<span class="string">'&lt;img src="'</span>+src+<span class="string">'"&gt;'</span>);</span><br><span class="line">$wrap.empty().append( img );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$.ajax(<span class="string">'../../server/preview.php'</span>, &#123;</span><br><span class="line">method: <span class="string">'POST'</span>,</span><br><span class="line">data: src,</span><br><span class="line">dataType:<span class="string">'json'</span></span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"> response </span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (response.result) &#123;</span><br><span class="line">img = $(<span class="string">'&lt;img src="'</span>+response.result+<span class="string">'"&gt;'</span>);</span><br><span class="line">$wrap.empty().append( img );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$wrap.text(<span class="string">"预览出错"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, thumbnailWidth, thumbnailHeight );</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、md5File()<span class="comment">// 计算文件 md5 值，返回一个 promise 对象，可以监听 progress 进度。</span></span><br><span class="line"><span class="number">7</span>、addFiles()  <span class="comment">//添加文件到队列</span></span><br><span class="line"><span class="number">8</span>、removeFile()  <span class="comment">//移除某一文件, 默认只会标记文件状态为已取消，如果第二个参数为 true 则会从 queue 中移除</span></span><br><span class="line"><span class="number">9</span>、getFiles()  <span class="comment">//返回指定状态的文件集合，不传参数将返回所有状态的文件。</span></span><br><span class="line"><span class="number">10</span>、retry() <span class="comment">//重试上传，重试指定文件，或者从出错的文件开始重新上传。</span></span><br><span class="line"><span class="number">11</span>、sort() <span class="comment">//排序队列中的文件，在上传之前调整可以控制上传顺序。</span></span><br><span class="line"><span class="number">12</span>、reset() <span class="comment">//重置uploader。目前只重置了队列。</span></span><br><span class="line"><span class="number">13</span>、predictRuntimeType() <span class="comment">//预测Uploader将采用哪个Runtime</span></span><br><span class="line"><span class="number">14</span>、upload() <span class="comment">//开始上传。此方法可以从初始状态调用开始上传流程，也可以从暂停状态调用，继续上传流程。可以指定开始某一个文件</span></span><br><span class="line"><span class="number">15</span>、stop() <span class="comment">//暂停上传。第一个参数为是否中断上传当前正在上传的文件。如果第一个参数是文件，则只暂停指定文件。</span></span><br><span class="line"><span class="number">16</span>、cancelFile() <span class="comment">//标记文件状态为已取消, 同时将中断文件传输。</span></span><br><span class="line"><span class="number">17</span>、isInProgress() <span class="comment">//判断Uplaoder是否正在上传中。</span></span><br><span class="line"><span class="number">18</span>、skipFile() <span class="comment">//掉过一个文件上传，直接标记指定文件为已上传状态。</span></span><br><span class="line"><span class="number">19</span>、request() <span class="comment">//发送命令。当传入callback或者handler中返回promise时。返回一个当所有handler中的promise都完成后完成的新promise。</span></span><br><span class="line"></span><br><span class="line"><span class="number">20</span>、Uploader.register() <span class="comment">//添加组件</span></span><br><span class="line"><span class="number">21</span>、Uploader.unRegister() <span class="comment">//删除插件，只有在注册时指定了名字的才能被删除。</span></span><br></pre></td></tr></table></figure><h6 id="事件说明"><a href="#事件说明" class="headerlink" title="事件说明"></a>事件说明</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">dndAccept :<span class="comment">// 阻止,此事件可以拒绝某些类型的文件拖入进来。目前只有 chrome 提供这样的 API，且只能通过 mime-type 验证。</span></span><br><span class="line">beforeFileQueued :<span class="comment">// 当文件被加入队列之前触发，此事件的handler返回值为false，则此文件不会被添加进入队列。</span></span><br><span class="line">fileQueued :<span class="comment">// 当文件被加入队列以后触发。</span></span><br><span class="line">filesQueued :<span class="comment">// 当一批文件添加进队列以后触发。</span></span><br><span class="line">fileDequeued :<span class="comment">// 当文件被移除队列后触发。</span></span><br><span class="line">reset :<span class="comment">// 当 uploader 被重置的时候触发。</span></span><br><span class="line">startUpload :<span class="comment">// 当开始上传流程时触发。</span></span><br><span class="line">stopUpload :<span class="comment">// 当开始上传流程暂停时触发。</span></span><br><span class="line">uploadFinished :<span class="comment">// 当所有文件上传结束时触发。</span></span><br><span class="line">uploadStart :<span class="comment">// 某个文件开始上传前触发，一个文件只会触发一次。</span></span><br><span class="line">uploadBeforeSend :<span class="comment">// 当某个文件的分块在发送前触发，主要用来询问是否要添加附带参数，大文件在开起分片上传的前提下此事件可能会触发多次。</span></span><br><span class="line">uploadAccept :<span class="comment">// 当某个文件上传到服务端响应后，会派送此事件来询问服务端响应是否有效。如果此事件handler返回值为false, 则此文件将派送server类型的uploadError事件。</span></span><br><span class="line">uploadProgress :<span class="comment">// 上传过程中触发，携带上传进度。</span></span><br><span class="line">uploadError :<span class="comment">// 当文件上传出错时触发。</span></span><br><span class="line">uploadSuccess :<span class="comment">// 当文件上传成功时触发。</span></span><br><span class="line">uploadComplete :<span class="comment">// 不管成功或者失败，文件上传完成时触发。</span></span><br><span class="line">error :<span class="comment">// 当validate不通过时，会以派送错误事件的形式通知调用者。通过upload.on('error', handler)可以捕获到此类错误，目前有以下错误会在特定的情况下派送错来。</span></span><br><span class="line"><span class="comment">//Q_EXCEED_NUM_LIMIT 在设置了fileNumLimit且尝试给uploader添加的文件数量超出这个值时派送。</span></span><br><span class="line"><span class="comment">//Q_EXCEED_SIZE_LIMIT 在设置了Q_EXCEED_SIZE_LIMIT且尝试给uploader添加的文件总大小超出这个值时派送。</span></span><br><span class="line"><span class="comment">//Q_TYPE_DENIED 当文件类型不满足时触发。。</span></span><br><span class="line"><span class="comment">/*Web Uploader内部类的详细说明，以下提及的功能类，都可以在`WebUploader`这个变量中访问到。 即 Base类 Mediator类  File类都可以在`WebUploader`这个变量中访问到*/</span></span><br></pre></td></tr></table></figure><h5 id="Base类"><a href="#Base类" class="headerlink" title="Base类"></a>Base类</h5><p>基础类方法 WebUploader 基础类，提供一些简单常用的方法  WebUploader.browser.ie</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">create() <span class="comment">//创建Uploader实例，等同于new Uploader( opts );</span></span><br><span class="line">version <span class="comment">//当前版本号</span></span><br><span class="line">$<span class="comment">//引用依赖的jQuery或者Zepto对象</span></span><br><span class="line">browser  <span class="comment">//简单的浏览器检查结果</span></span><br><span class="line">os  android、ios</span><br><span class="line">inherits <span class="comment">//实现类与类之间的继承</span></span><br><span class="line">noop  <span class="comment">//一个不做任何事情的方法。可以用来赋值给默认的callback</span></span><br><span class="line">bindFn <span class="comment">//返回一个新的方法，此方法将已指定的context来执行</span></span><br><span class="line">log <span class="comment">//引用Console.log如果存在的话，否则引用一个空函数noop。</span></span><br><span class="line">slice <span class="comment">//被uncurrythis的数组slice方法。 将用来将非数组对象转化成数组对象</span></span><br><span class="line">guid <span class="comment">//生成唯一的ID</span></span><br><span class="line">formatSize <span class="comment">//格式化文件大小, 输出成带单位的字符串</span></span><br><span class="line">Deferred <span class="comment">//创建一个Deferred对象。 详细的Deferred用法说明，请参照jQuery的API文档。Deferred对象在钩子回掉函数中经常要用到，用来处理需要等待的异步操作。</span></span><br><span class="line">isPromise <span class="comment">//判断传入的参数是否为一个 promise 对象。</span></span><br><span class="line">when <span class="comment">//返回一个promise，此promise在所有传入的promise都完成了后完成</span></span><br></pre></td></tr></table></figure><h5 id="Mediator类"><a href="#Mediator类" class="headerlink" title="Mediator类"></a>Mediator类</h5><p>事件处理类，可以独立使用，也可以扩展给对象使用 中介，它本身是个单例，但可以通过installTo方法，使任何对象具备事件行为。 主要目的是负责模块与模块之间的合作，降低耦合度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">on once off trigger installTo</span><br></pre></td></tr></table></figure><h5 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h5><p>文件类  本类的一般在 UploadProgress 这些事件中的回调函数中变量使用比较多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">name<span class="comment">//文件名，包括扩展名（后缀）</span></span><br><span class="line">size<span class="comment">//文件体积（字节）</span></span><br><span class="line">type<span class="comment">//文件MIMETYPE类型，与文件类型的对应关系请参考http://t.cn/z8ZnFny</span></span><br><span class="line">lastModifiedDate<span class="comment">//文件最后修改日期</span></span><br><span class="line">id<span class="comment">//文件ID，每个对象具有唯一ID，与文件名无关</span></span><br><span class="line">ext<span class="comment">//文件扩展名，通过文件名获取，例如test.png的扩展名为png</span></span><br><span class="line">statusText<span class="comment">//状态文字说明。在不同的status语境下有不同的用途。</span></span><br><span class="line">setStatus<span class="comment">//设置状态，状态变化时会触发change事件。</span></span><br><span class="line">setStatus( status[, statusText] );<span class="comment">//参数:status &#123;File.Status, String&#125;文件状态值</span></span><br><span class="line">statusText <span class="comment">//&#123;String&#125; [可选] [默认值: ''] 状态说明，常在error时使用，用http, abort,server等来标记是由于什么原因导致文件错误。</span></span><br><span class="line">File.Status<span class="comment">//文件状态值，具体包括以下几种类型：</span></span><br><span class="line">inited <span class="comment">//初始状态</span></span><br><span class="line">queued <span class="comment">//已经进入队列, 等待上传</span></span><br><span class="line">progress <span class="comment">//上传中</span></span><br><span class="line">complete <span class="comment">//上传完成。</span></span><br><span class="line">error <span class="comment">//上传出错，可重试</span></span><br><span class="line">interrupt <span class="comment">//上传中断，可续传。</span></span><br><span class="line">invalid <span class="comment">//文件不合格，不能重试上传。会自动从队列中移除。</span></span><br><span class="line">cancelled <span class="comment">//文件被移除。</span></span><br></pre></td></tr></table></figure><h5 id="Queue-类"><a href="#Queue-类" class="headerlink" title="Queue 类"></a>Queue 类</h5><p>文件队列, 用来存储各个状态中的文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">stats<span class="comment">//统计文件数。</span></span><br><span class="line">numOfQueue <span class="comment">//队列中的文件数。</span></span><br><span class="line">numOfSuccess <span class="comment">//上传成功的文件数</span></span><br><span class="line">numOfCancel <span class="comment">//被取消的文件数</span></span><br><span class="line">numOfProgress <span class="comment">//正在上传中的文件数</span></span><br><span class="line">numOfUploadFailed <span class="comment">//上传错误的文件数。</span></span><br><span class="line">numOfInvalid <span class="comment">//无效的文件数。</span></span><br><span class="line">numofDeleted <span class="comment">//被移除的文件数。</span></span><br><span class="line">append<span class="comment">//将新文件加入对队列尾部</span></span><br><span class="line">   prepend<span class="comment">//将新文件加入对队列头部</span></span><br><span class="line">   getFile<span class="comment">//获取文件对象</span></span><br><span class="line">   fetch<span class="comment">//从队列中取出一个指定状态的文件。</span></span><br><span class="line">   sort<span class="comment">//对队列进行排序，能够控制文件上传顺序。</span></span><br><span class="line">   getFiles<span class="comment">//获取指定类型的文件列表, 列表中每一个成员为File对象。</span></span><br><span class="line">   removeFile<span class="comment">//在队列中删除文件。</span></span><br></pre></td></tr></table></figure><p>​    github中的代码给的例子基本上可以实现想要的功能，如果有别的需求可以结合代码中的例子根据接口手册进行相应的修改。</p><p>​    Web Uploader的所有代码都在一个内部闭包中，对外暴露了唯一的一个变量WebUploader，所以完全不用担心此框架会与其他框架冲突。<br>Uploader实例具有Backbone同样的事件API：<code>on，off，once，trigger。</code><br>如同Document Element中的onEvent一样，他的执行比on添加的handler的要晚。如果那些handler里面，有一个return false了，此onEvent里面是不会执行到的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">uploader.on( <span class="string">'fileQueued'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do some things.</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">uploader.onFileQueued = <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do some things.</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="断点上传实例"><a href="#断点上传实例" class="headerlink" title="断点上传实例"></a>断点上传实例</h4><h5 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h5><p>Uploader.swf、webuploader.css、webuploader.js，其中Uploader.swf只在初始化webUploader时用到，其余两个文件在页面引用即可。下载地址：<a href="https://github.com/fex-team/webuploader/releases" target="_blank" rel="noopener">https://github.com/fex-team/webuploader/releases</a></p><h5 id="Jsp代码："><a href="#Jsp代码：" class="headerlink" title="Jsp代码："></a>Jsp代码：</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 断点续传   start--&gt;</span><br><span class="line">&lt;!-- 隐藏域 实时保存上传进度 --&gt;</span><br><span class="line">&lt;input id=<span class="string">"jindutiao"</span> type=<span class="string">"hidden"</span>/&gt;</span><br><span class="line">&lt;div id=<span class="string">"uploader"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"wu-example"</span>&gt;</span><br><span class="line">    &lt;label class="text-right" style="font-weight:100;float:left;margin-left:15px;width:144px;margin-right:15px;"&gt;大文件：&lt;/label&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"btns"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"picker"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"webuploader-container"</span>&gt;</span><br><span class="line">        &lt;div class="webuploader-pick"&gt;选择文件&lt;/div&gt;</span><br><span class="line">        &lt;div id=<span class="string">"rt_rt_1bchdejhrarjdvd11h41eoh1nt1"</span> style=<span class="string">"position: absolute; top: 0px; left: 0px; width: 88px; height: 35px; overflow: hidden; bottom: auto; right: auto;"</span>&gt;</span><br><span class="line">            &lt;input id=<span class="string">"file_bp"</span> name=<span class="string">"file"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"webuploader-element-invisible"</span> type=<span class="string">"file"</span> /&gt;</span><br><span class="line">            &lt;label style="opacity: 0; width: 100%; height: 100%; display: block; cursor: pointer; background: rgb(255, 255, 255) none repeat scroll 0% 0%;"&gt;&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 文件列表：选择文件后在该div显示 --&gt;</span><br><span class="line">    &lt;div id="thelist" class="uploader-list list-group-item clearfix ng-hide" style="margin-left:160px;"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;label class="text-right" style="font-weight:100;float:left;margin-left:15px;width:144px;margin-right:15px;"&gt;&lt;/label&gt;</span><br><span class="line">    &lt;button class="btn m-b-xs btn-sm btn-info btn-addon" id="startOrStopBtn" style="padding:7px 50px;margin-top:20px;"&gt;开始上传&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 断点续传   end--&gt;</span><br></pre></td></tr></table></figure><h5 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;  </span><br><span class="line">jQuery(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*******************初始化参数*********************************/</span></span><br><span class="line">    <span class="keyword">var</span> $list = $(<span class="string">'#thelist'</span>),<span class="comment">//文件列表</span></span><br><span class="line">        $btn = $(<span class="string">'#startOrStopBtn'</span>),<span class="comment">//开始上传按钮</span></span><br><span class="line">        state = <span class="string">'pending'</span>,<span class="comment">//初始按钮状态</span></span><br><span class="line">        uploader; <span class="comment">//uploader对象</span></span><br><span class="line">    <span class="keyword">var</span> fileMd5;  <span class="comment">//文件唯一标识</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/******************下面的参数是自定义的*************************/</span></span><br><span class="line">    <span class="keyword">var</span> fileName;<span class="comment">//文件名称</span></span><br><span class="line">    <span class="keyword">var</span> oldJindu;<span class="comment">//如果该文件之前上传过 已经上传的进度是多少</span></span><br><span class="line">    <span class="keyword">var</span> count=<span class="number">0</span>;<span class="comment">//当前正在上传的文件在数组中的下标，一次上传多个文件时使用</span></span><br><span class="line">    <span class="keyword">var</span> filesArr=<span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//文件数组：每当有文件被添加进队列的时候 就push到数组中</span></span><br><span class="line">    <span class="keyword">var</span> map=&#123;&#125;;<span class="comment">//key存储文件id，value存储该文件上传过的进度</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/***************************************************** 监听分块上传过程中的三个时间点 start ***********************************************************/</span></span><br><span class="line">    WebUploader.Uploader.register(&#123;  </span><br><span class="line">        <span class="string">"before-send-file"</span>:<span class="string">"beforeSendFile"</span>,<span class="comment">//整个文件上传前</span></span><br><span class="line">        <span class="string">"before-send"</span>:<span class="string">"beforeSend"</span>,  <span class="comment">//每个分片上传前</span></span><br><span class="line">        <span class="string">"after-send-file"</span>:<span class="string">"afterSendFile"</span>,  <span class="comment">//分片上传完毕</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">//时间点1：所有分块进行上传之前调用此函数  </span></span><br><span class="line">        beforeSendFile:<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> deferred = WebUploader.Deferred();  </span><br><span class="line">            <span class="comment">//1、计算文件的唯一标记fileMd5，用于断点续传  如果.md5File(file)方法里只写一个file参数则计算MD5值会很慢 所以加了后面的参数：10*1024*1024</span></span><br><span class="line">            (<span class="keyword">new</span> WebUploader.Uploader()).md5File(file,<span class="number">0</span>,<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>).progress(<span class="function"><span class="keyword">function</span>(<span class="params">percentage</span>)</span>&#123;</span><br><span class="line">                $(<span class="string">'#'</span>+file.id ).find(<span class="string">'p.state'</span>).text(<span class="string">'正在读取文件信息...'</span>);</span><br><span class="line">            &#125;)  </span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;  </span><br><span class="line">                $(<span class="string">'#'</span>+file.id ).find(<span class="string">"p.state"</span>).text(<span class="string">"成功获取文件信息..."</span>);  </span><br><span class="line">                fileMd5=val;  </span><br><span class="line">                <span class="comment">//获取文件信息后进入下一步  </span></span><br><span class="line">                deferred.resolve();  </span><br><span class="line">            &#125;);  </span><br><span class="line">            </span><br><span class="line">            fileName=file.name; <span class="comment">//为自定义参数文件名赋值</span></span><br><span class="line">            <span class="keyword">return</span> deferred.promise();  </span><br><span class="line">        &#125;,  </span><br><span class="line">        <span class="comment">//时间点2：如果有分块上传，则每个分块上传之前调用此函数  </span></span><br><span class="line">        beforeSend:<span class="function"><span class="keyword">function</span>(<span class="params">block</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> deferred = WebUploader.Deferred();  </span><br><span class="line">            $.ajax(&#123;  </span><br><span class="line">                type:<span class="string">"POST"</span>,  </span><br><span class="line">                url:<span class="string">"$&#123;ctx&#125;/testController/mergeOrCheckChunks.do?param=checkChunk"</span>,  <span class="comment">//ajax验证每一个分片</span></span><br><span class="line">                data:&#123;  </span><br><span class="line">                    fileName : fileName,</span><br><span class="line">                    jindutiao:$(<span class="string">"#jindutiao"</span>).val(),</span><br><span class="line">                    fileMd5:fileMd5,  <span class="comment">//文件唯一标记  </span></span><br><span class="line">                    chunk:block.chunk,  <span class="comment">//当前分块下标  </span></span><br><span class="line">                    chunkSize:block.end-block.start<span class="comment">//当前分块大小  </span></span><br><span class="line">                &#125;,  </span><br><span class="line">                cache: <span class="literal">false</span>,</span><br><span class="line">                <span class="keyword">async</span>: <span class="literal">false</span>,  <span class="comment">// 与js同步</span></span><br><span class="line">                timeout: <span class="number">1000</span>, <span class="comment">//todo 超时的话，只能认为该分片未上传过</span></span><br><span class="line">                dataType:<span class="string">"json"</span>,  </span><br><span class="line">                success:<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;  </span><br><span class="line">                    <span class="keyword">if</span>(response.ifExist)&#123;</span><br><span class="line">                        <span class="comment">//分块存在，跳过  </span></span><br><span class="line">                        deferred.reject();  </span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                        <span class="comment">//分块不存在或不完整，重新发送该分块内容  </span></span><br><span class="line">                        deferred.resolve();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);  </span><br><span class="line">                             </span><br><span class="line">            <span class="keyword">this</span>.owner.options.formData.fileMd5 = fileMd5;  </span><br><span class="line">            deferred.resolve();  </span><br><span class="line">            <span class="keyword">return</span> deferred.promise();  </span><br><span class="line">        &#125;,  </span><br><span class="line">        <span class="comment">//时间点3：所有分块上传成功后调用此函数  </span></span><br><span class="line">        afterSendFile:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//如果分块上传成功，则通知后台合并分块  </span></span><br><span class="line">            $.ajax(&#123;  </span><br><span class="line">                type:<span class="string">"POST"</span>,  </span><br><span class="line">                url:<span class="string">"$&#123;ctx&#125;/testController/mergeOrCheckChunks.do?param=mergeChunks"</span>,  <span class="comment">//ajax将所有片段合并成整体</span></span><br><span class="line">                data:&#123;  </span><br><span class="line">                    fileName : fileName,</span><br><span class="line">                    fileMd5:fileMd5,</span><br><span class="line">                &#125;,  </span><br><span class="line">                success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                    count++; <span class="comment">//每上传完成一个文件 count+1</span></span><br><span class="line">                    <span class="keyword">if</span>(count&lt;=filesArr.length<span class="number">-1</span>)&#123;</span><br><span class="line">                        uploader.upload(filesArr[count].id);<span class="comment">//上传文件列表中的下一个文件</span></span><br><span class="line">                    &#125;</span><br><span class="line">                     <span class="comment">//合并成功之后的操作</span></span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/***************************************************** 监听分块上传过程中的三个时间点 end **************************************************************/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/************************************************************ 初始化WebUploader start ******************************************************************/</span></span><br><span class="line">    uploader = WebUploader.create(&#123;</span><br><span class="line">        auto:<span class="literal">false</span>,<span class="comment">//选择文件后是否自动上传</span></span><br><span class="line">        chunked: <span class="literal">true</span>,<span class="comment">//开启分片上传</span></span><br><span class="line">        chunkSize:<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>,<span class="comment">// 如果要分片，分多大一片？默认大小为5M</span></span><br><span class="line">        chunkRetry: <span class="number">3</span>,<span class="comment">//如果某个分片由于网络问题出错，允许自动重传多少次</span></span><br><span class="line">        threads: <span class="number">3</span>,<span class="comment">//上传并发数。允许同时最大上传进程数[默认值：3]</span></span><br><span class="line">        duplicate : <span class="literal">false</span>,<span class="comment">//是否重复上传（同时选择多个一样的文件），true可以重复上传</span></span><br><span class="line">        prepareNextFile: <span class="literal">true</span>,<span class="comment">//上传当前分片时预处理下一分片</span></span><br><span class="line">        swf: <span class="string">'$&#123;ctx&#125;/resource/webuploader/Uploader.swf'</span>,<span class="comment">// swf文件路径  </span></span><br><span class="line">        server: <span class="string">'$&#123;ctx&#125;/testController/fileSave.do'</span>,<span class="comment">// 文件接收服务端</span></span><br><span class="line">        fileSizeLimit:<span class="number">6</span>*<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>,<span class="comment">//6G 验证文件总大小是否超出限制, 超出则不允许加入队列</span></span><br><span class="line">        fileSingleSizeLimit:<span class="number">3</span>*<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>,  <span class="comment">//3G 验证单个文件大小是否超出限制, 超出则不允许加入队列</span></span><br><span class="line">        pick: &#123;</span><br><span class="line">                id: <span class="string">'#picker'</span>, <span class="comment">//这个id是你要点击上传文件按钮的外层div的id</span></span><br><span class="line">                multiple : <span class="literal">false</span> <span class="comment">//是否可以批量上传，true可以同时选择多个文件</span></span><br><span class="line">        &#125;,  </span><br><span class="line">        resize: <span class="literal">false</span>,  <span class="comment">//不压缩image, 默认如果是jpeg，文件上传前会先压缩再上传！</span></span><br><span class="line">        accept: &#123;  </span><br><span class="line">                <span class="comment">//允许上传的文件后缀，不带点，多个用逗号分割</span></span><br><span class="line">            extensions: <span class="string">"txt,jpg,jpeg,bmp,png,zip,rar,war,pdf,cebx,doc,docx,ppt,pptx,xls,xlsx"</span>,  </span><br><span class="line">            mimeTypes: <span class="string">'.txt,.jpg,.jpeg,.bmp,.png,.zip,.rar,.war,.pdf,.cebx,.doc,.docx,.ppt,.pptx,.xls,.xlsx'</span>,  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">    <span class="comment">/************************************************************ 初始化WebUploader end ********************************************************************/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当有文件被添加进队列的时候（点击上传文件按钮，弹出文件选择框，选择完文件点击确定后触发的事件）  </span></span><br><span class="line">    uploader.on(<span class="string">'fileQueued'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//限制单个文件的大小 超出了提示</span></span><br><span class="line">        <span class="keyword">if</span>(file.size&gt;<span class="number">3</span>*<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>)&#123;</span><br><span class="line">            alert(<span class="string">"单个文件大小不能超过3G"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*************如果一次只能选择一个文件，再次选择替换前一个，就增加如下代码*******************************/</span></span><br><span class="line">        <span class="comment">//清空文件队列</span></span><br><span class="line">        $list.html(<span class="string">""</span>);</span><br><span class="line">        <span class="comment">//清空文件数组</span></span><br><span class="line">        filesArr=[];</span><br><span class="line">        <span class="comment">/*************如果一次只能选择一个文件，再次选择替换前一个，就增加以上代码*******************************/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将选择的文件添加进文件数组</span></span><br><span class="line">        filesArr.push(file);</span><br><span class="line"></span><br><span class="line">        $.ajax(&#123;  </span><br><span class="line">            type:<span class="string">"POST"</span>,  </span><br><span class="line">            url:<span class="string">"$&#123;ctx&#125;/testController/selectProgressByFileName.do"</span>,  <span class="comment">//先检查该文件是否上传过，如果上传过，上传进度是多少</span></span><br><span class="line">            data:&#123;  </span><br><span class="line">                fileName : file.name  <span class="comment">//文件名</span></span><br><span class="line">            &#125;,  </span><br><span class="line">            cache: <span class="literal">false</span>,</span><br><span class="line">            <span class="keyword">async</span>: <span class="literal">false</span>,  <span class="comment">// 同步</span></span><br><span class="line">            dataType:<span class="string">"json"</span>,  </span><br><span class="line">            success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;  </span><br><span class="line">                <span class="comment">//上传过</span></span><br><span class="line">                <span class="keyword">if</span>(data&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//上传过的进度的百分比</span></span><br><span class="line">                            oldJindu=data/<span class="number">100</span>;</span><br><span class="line">                    <span class="comment">//如果上传过 上传了多少</span></span><br><span class="line">                    <span class="keyword">var</span> jindutiaoStyle=<span class="string">"width:"</span>+data+<span class="string">"%"</span>;</span><br><span class="line">                    $list.append( <span class="string">'&lt;div id="'</span> + file.id + <span class="string">'" class="item"&gt;'</span> +</span><br><span class="line">                        <span class="string">'&lt;h4 class="info"&gt;'</span> + file.name + <span class="string">'&lt;/h4&gt;'</span> +</span><br><span class="line">                        <span class="string">'&lt;p class="state"&gt;已上传'</span>+data+<span class="string">'%&lt;/p&gt;'</span> +</span><br><span class="line">                        <span class="string">'&lt;a href="javascript:void(0);" class="btn btn-primary file_btn btnRemoveFile"&gt;删除&lt;/a&gt;'</span> +</span><br><span class="line">                            <span class="string">'&lt;div class="progress progress-striped active"&gt;'</span> +</span><br><span class="line">                      <span class="string">'&lt;div class="progress-bar" role="progressbar" style="'</span>+jindutiaoStyle+<span class="string">'"&gt;'</span> +</span><br><span class="line">                      <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">                    <span class="string">'&lt;/div&gt;'</span>+</span><br><span class="line">                    <span class="string">'&lt;/div&gt;'</span> );</span><br><span class="line">                    <span class="comment">//将上传过的进度存入map集合</span></span><br><span class="line">                    map[file.id]=oldJindu;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;<span class="comment">//没有上传过</span></span><br><span class="line">                    $list.append( <span class="string">'&lt;div id="'</span> + file.id + <span class="string">'" class="item"&gt;'</span> +</span><br><span class="line">                        <span class="string">'&lt;h4 class="info"&gt;'</span> + file.name + <span class="string">'&lt;/h4&gt;'</span> +</span><br><span class="line">                        <span class="string">'&lt;p class="state"&gt;等待上传...&lt;/p&gt;'</span> +</span><br><span class="line">                        <span class="string">'&lt;a href="javascript:void(0);" class="btn btn-primary file_btn btnRemoveFile"&gt;删除&lt;/a&gt;'</span> +</span><br><span class="line">                    <span class="string">'&lt;/div&gt;'</span> );</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);</span><br><span class="line">        uploader.stop(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//删除队列中的文件</span></span><br><span class="line">        $(<span class="string">".btnRemoveFile"</span>).bind(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> fileItem = $(<span class="keyword">this</span>).parent();</span><br><span class="line">            uploader.removeFile($(fileItem).attr(<span class="string">"id"</span>), <span class="literal">true</span>);</span><br><span class="line">            $(fileItem).fadeOut(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(fileItem).remove();</span><br><span class="line">            &#125;);</span><br><span class="line">        </span><br><span class="line">            <span class="comment">//数组中的文件也要删除</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;filesArr.length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(filesArr[i].id==$(fileItem).attr(<span class="string">"id"</span>))&#123;</span><br><span class="line">                    filesArr.splice(i,<span class="number">1</span>);<span class="comment">//i是要删除的元素在数组中的下标，1代表从下标位置开始连续删除一个元素</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);  </span><br><span class="line">         </span><br><span class="line">    <span class="comment">//文件上传过程中创建进度条实时显示</span></span><br><span class="line">    uploader.on(<span class="string">'uploadProgress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">file, percentage</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $li = $( <span class="string">'#'</span>+file.id ),</span><br><span class="line">        $percent = $li.find(<span class="string">'.progress .progress-bar'</span>);</span><br><span class="line">        <span class="comment">//避免重复创建</span></span><br><span class="line">        <span class="keyword">if</span> (!$percent.length)&#123;</span><br><span class="line">            $percent = $(<span class="string">'&lt;div class="progress progress-striped active"&gt;'</span> +</span><br><span class="line">              <span class="string">'&lt;div class="progress-bar" role="progressbar" style="width: 0%"&gt;'</span> +</span><br><span class="line">              <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;/div&gt;'</span>).appendTo( $li ).find(<span class="string">'.progress-bar'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将实时进度存入隐藏域</span></span><br><span class="line">        $(<span class="string">"#jindutiao"</span>).val(<span class="built_in">Math</span>.round(percentage * <span class="number">100</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//根据fielId获得当前要上传的文件的进度</span></span><br><span class="line">        <span class="keyword">var</span> oldJinduValue = map[file.id];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(percentage&lt;oldJinduValue &amp;&amp; oldJinduValue!=<span class="number">1</span>)&#123;</span><br><span class="line">            $li.find(<span class="string">'p.state'</span>).text(<span class="string">'上传中'</span>+<span class="built_in">Math</span>.round(oldJinduValue * <span class="number">100</span>) + <span class="string">'%'</span>);</span><br><span class="line">            $percent.css(<span class="string">'width'</span>, oldJinduValue * <span class="number">100</span> + <span class="string">'%'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $li.find(<span class="string">'p.state'</span>).text(<span class="string">'上传中'</span>+<span class="built_in">Math</span>.round(percentage * <span class="number">100</span>) + <span class="string">'%'</span>);</span><br><span class="line">            $percent.css(<span class="string">'width'</span>, percentage * <span class="number">100</span> + <span class="string">'%'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//上传成功后执行的方法</span></span><br><span class="line">    uploader.on(<span class="string">'uploadSuccess'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;  </span><br><span class="line">        <span class="comment">//上传成功去掉进度条</span></span><br><span class="line">        $(<span class="string">'#'</span>+file.id).find(<span class="string">'.progress'</span>).fadeOut();</span><br><span class="line">        <span class="comment">//隐藏删除按钮</span></span><br><span class="line">        $(<span class="string">".btnRemoveFile"</span>).hide();</span><br><span class="line">        <span class="comment">//隐藏上传按钮</span></span><br><span class="line">        $(<span class="string">"#startOrStopBtn"</span>).hide();</span><br><span class="line">        $(<span class="string">'#'</span>+file.id).find(<span class="string">'p.state'</span>).text(<span class="string">'文件已上传成功，系统后台正在处理，请稍后...'</span>);  </span><br><span class="line">    &#125;);  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//上传出错后执行的方法</span></span><br><span class="line">    uploader.on(<span class="string">'uploadError'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">        errorUpload=<span class="literal">true</span>;</span><br><span class="line">        $btn.text(<span class="string">'开始上传'</span>);</span><br><span class="line">        uploader.stop(<span class="literal">true</span>);</span><br><span class="line">        $(<span class="string">'#'</span>+file.id).find(<span class="string">'p.state'</span>).text(<span class="string">'上传出错，请检查网络连接'</span>);</span><br><span class="line">    &#125;);  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//文件上传成功失败都会走这个方法</span></span><br><span class="line">    uploader.on(<span class="string">'uploadComplete'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;);  </span><br><span class="line">    </span><br><span class="line">    uploader.on(<span class="string">'all'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type === <span class="string">'startUpload'</span>)&#123;</span><br><span class="line">            state = <span class="string">'uploading'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">'stopUpload'</span>)&#123;</span><br><span class="line">            state = <span class="string">'paused'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">'uploadFinished'</span>)&#123;</span><br><span class="line">            state = <span class="string">'done'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (state === <span class="string">'uploading'</span>)&#123;</span><br><span class="line">            $btn.text(<span class="string">'暂停上传'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $btn.text(<span class="string">'开始上传'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传按钮的onclick时间</span></span><br><span class="line">    $btn.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state === <span class="string">'uploading'</span>)&#123;</span><br><span class="line">            uploader.stop(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//当前上传文件的文件名</span></span><br><span class="line">            <span class="keyword">var</span> currentFileName;</span><br><span class="line">            <span class="comment">//当前上传文件的文件id</span></span><br><span class="line">            <span class="keyword">var</span> currentFileId;</span><br><span class="line">            <span class="comment">//count=0 说明没开始传 默认从文件列表的第一个开始传</span></span><br><span class="line">            <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">                currentFileName=filesArr[<span class="number">0</span>].name;</span><br><span class="line">                currentFileId=filesArr[<span class="number">0</span>].id;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(count&lt;=filesArr.length<span class="number">-1</span>)&#123;</span><br><span class="line">                    currentFileName=filesArr[count].name;</span><br><span class="line">                    currentFileId=filesArr[count].id;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//先查询该文件是否上传过 如果上传过已经上传的进度是多少</span></span><br><span class="line">            $.ajax(&#123;  </span><br><span class="line">                type:<span class="string">"POST"</span>,  </span><br><span class="line">                url:<span class="string">"$&#123;ctx&#125;/testController/selectProgressByFileName.do"</span>,  </span><br><span class="line">                data:&#123;  </span><br><span class="line">                    fileName : currentFileName<span class="comment">//文件名</span></span><br><span class="line">                &#125;,  </span><br><span class="line">                cache: <span class="literal">false</span>,</span><br><span class="line">                <span class="keyword">async</span>: <span class="literal">false</span>,  <span class="comment">// 同步</span></span><br><span class="line">                dataType:<span class="string">"json"</span>,  </span><br><span class="line">                success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;  </span><br><span class="line">                    <span class="comment">//如果上传过 将进度存入map</span></span><br><span class="line">                    <span class="keyword">if</span>(data&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        map[currentFileId]=data/<span class="number">100</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//执行上传</span></span><br><span class="line">                    uploader.upload(currentFileId);</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//合并、验证分片方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeOrCheckChunks</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    String param = request.getParameter(<span class="string">"param"</span>);  </span><br><span class="line">    String fileName = request.getParameter(<span class="string">"fileName"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当前登录用户信息</span></span><br><span class="line">    SysUser sysUser = (SysUser)request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">    String newFilePath = sysUser.getUserId()+<span class="string">"_"</span>+fileName;</span><br><span class="line">    String savePath = request.getRealPath(<span class="string">"/"</span>);</span><br><span class="line">    <span class="comment">//文件上传的临时文件保存在项目的temp文件夹下 定时删除</span></span><br><span class="line">    savePath = <span class="keyword">new</span> File(savePath) + <span class="string">"/upload/"</span>;</span><br><span class="line">    <span class="keyword">if</span>(param.equals(<span class="string">"mergeChunks"</span>))&#123;</span><br><span class="line">        <span class="comment">//合并文件  </span></span><br><span class="line">        Jedis jedis =<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis =jedisPool.getResource();</span><br><span class="line">            <span class="comment">//读取目录里的所有文件  </span></span><br><span class="line">            File f = <span class="keyword">new</span> File(savePath+<span class="string">"/"</span>+jedis.get(<span class="string">"fileName_"</span>+fileName));  </span><br><span class="line">            File[] fileArray = f.listFiles(<span class="keyword">new</span> FileFilter()&#123;  </span><br><span class="line">                <span class="comment">//排除目录只要文件  </span></span><br><span class="line">                <span class="meta">@Override</span>  </span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;  </span><br><span class="line">                    <span class="keyword">if</span>(pathname.isDirectory())&#123;  </span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//转成集合，便于排序  </span></span><br><span class="line">            List&lt;File&gt; fileList = <span class="keyword">new</span> ArrayList&lt;File&gt;(Arrays.asList(fileArray));  </span><br><span class="line">            Collections.sort(fileList,<span class="keyword">new</span> Comparator&lt;File&gt;() &#123;  </span><br><span class="line">                <span class="meta">@Override</span>  </span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(File o1, File o2)</span> </span>&#123;  </span><br><span class="line">                    <span class="keyword">if</span>(Integer.parseInt(o1.getName()) &lt; Integer.parseInt(o2.getName()))&#123;  </span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);  </span><br><span class="line"></span><br><span class="line">            <span class="comment">//截取文件名的后缀名</span></span><br><span class="line">            <span class="comment">//最后一个"."的位置</span></span><br><span class="line">            <span class="keyword">int</span> pointIndex=fileName.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">            <span class="comment">//后缀名</span></span><br><span class="line">            String suffix=fileName.substring(pointIndex);</span><br><span class="line">            <span class="comment">//合并后的文件</span></span><br><span class="line">            File outputFile = <span class="keyword">new</span> File(savePath+<span class="string">"/"</span>+jedis.get(<span class="string">"fileName_"</span>+fileName)+suffix);  </span><br><span class="line">            <span class="comment">//创建文件  </span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputFile.createNewFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">//输出流  </span></span><br><span class="line">            FileChannel outChnnel = <span class="keyword">new</span> FileOutputStream(outputFile).getChannel();  </span><br><span class="line">            <span class="comment">//合并  </span></span><br><span class="line">            FileChannel inChannel;  </span><br><span class="line">            <span class="keyword">for</span>(File file : fileList)&#123;  </span><br><span class="line">                inChannel = <span class="keyword">new</span> FileInputStream(file).getChannel();  </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inChannel.transferTo(<span class="number">0</span>, inChannel.size(), outChnnel);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="comment">//删除分片  </span></span><br><span class="line">                file.delete();  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outChnnel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">            <span class="comment">//清除文件夹  </span></span><br><span class="line">            File tempFile = <span class="keyword">new</span> File(savePath+<span class="string">"/"</span>+jedis.get(<span class="string">"fileName_"</span>+fileName));  </span><br><span class="line">            <span class="keyword">if</span>(tempFile.isDirectory() &amp;&amp; tempFile.exists())&#123;  </span><br><span class="line">                tempFile.delete();  </span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">            Map&lt;String, String&gt; resultMap=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">//将文件的最后上传时间和生成的文件名返回</span></span><br><span class="line">            resultMap.put(<span class="string">"lastUploadTime"</span>, jedis.get(<span class="string">"lastUploadTime_"</span>+newFilePath));</span><br><span class="line">            resultMap.put(<span class="string">"pathFileName"</span>, jedis.get(<span class="string">"fileName_"</span>+fileName)+suffix);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/****************清除redis中的相关信息**********************/</span></span><br><span class="line">            <span class="comment">//合并成功后删除redis中的进度信息</span></span><br><span class="line">            jedis.del(<span class="string">"jindutiao_"</span>+newFilePath);</span><br><span class="line">            <span class="comment">//合并成功后删除redis中的最后上传时间，只存没上传完成的</span></span><br><span class="line">            jedis.del(<span class="string">"lastUploadTime_"</span>+newFilePath);</span><br><span class="line">            <span class="comment">//合并成功后删除文件名称与该文件上传时生成的存储分片的临时文件夹的名称在redis中的信息  key：上传文件的真实名称   value：存储分片的临时文件夹名称（由上传文件的MD5值+时间戳组成）</span></span><br><span class="line">            <span class="comment">//如果下次再上传同名文件  redis中将存储新的临时文件夹名称  没有上传完成的还要保留在redis中 直到定时任务生效</span></span><br><span class="line">            jedis.del(<span class="string">"fileName_"</span>+fileName);</span><br><span class="line">            </span><br><span class="line">            Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line">            String json=gson.toJson(resultMap);</span><br><span class="line">            PrintWriterJsonUtils.printWriter(response, json);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            jedisPool.returnResource(jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(param.equals(<span class="string">"checkChunk"</span>))&#123;  </span><br><span class="line">        <span class="comment">/*************************检查当前分块是否上传成功**********************************/</span>  </span><br><span class="line">        String fileMd5 = request.getParameter(<span class="string">"fileMd5"</span>);  </span><br><span class="line">        String chunk = request.getParameter(<span class="string">"chunk"</span>);  </span><br><span class="line">        String chunkSize = request.getParameter(<span class="string">"chunkSize"</span>);  </span><br><span class="line">        String jindutiao=request.getParameter(<span class="string">"jindutiao"</span>);<span class="comment">//文件上传的实时进度</span></span><br><span class="line"></span><br><span class="line">        Jedis jedis =<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis =jedisPool.getResource();</span><br><span class="line">            <span class="comment">//将当前进度存入redis</span></span><br><span class="line">            jedis.set(<span class="string">"jindutiao_"</span>+newFilePath, jindutiao);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将系统当前时间转换为字符串</span></span><br><span class="line">            Date date=<span class="keyword">new</span> Date();  </span><br><span class="line">            SimpleDateFormat formatter=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  </span><br><span class="line">            String lastUploadTime=formatter.format(date);  </span><br><span class="line">            <span class="comment">//将最后上传时间以字符串形式存入redis</span></span><br><span class="line">            jedis.set(<span class="string">"lastUploadTime_"</span>+newFilePath, lastUploadTime);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//自定义文件名： 时间戳（13位）</span></span><br><span class="line">            String tempFileName= String.valueOf(System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">if</span>(jedis.get(<span class="string">"fileName_"</span>+fileName)==<span class="keyword">null</span> || <span class="string">""</span>.equals(jedis.get(<span class="string">"fileName_"</span>+fileName)))&#123;</span><br><span class="line">                <span class="comment">//将文件名与该文件上传时生成的存储分片的临时文件夹的名称存入redis</span></span><br><span class="line">                <span class="comment">//文件上传时生成的存储分片的临时文件夹的名称由MD5和时间戳组成</span></span><br><span class="line">                jedis.set(<span class="string">"fileName_"</span>+fileName, fileMd5+tempFileName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            File checkFile = <span class="keyword">new</span> File(savePath+<span class="string">"/"</span>+jedis.get(<span class="string">"fileName_"</span>+fileName)+<span class="string">"/"</span>+chunk);  </span><br><span class="line"></span><br><span class="line">            response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);  </span><br><span class="line">            <span class="comment">//检查文件是否存在，且大小是否一致  </span></span><br><span class="line">            <span class="keyword">if</span>(checkFile.exists() &amp;&amp; checkFile.length()==Integer.parseInt(chunkSize))&#123;  </span><br><span class="line">                <span class="comment">//上传过  </span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    response.getWriter().write(<span class="string">"&#123;\"ifExist\":1&#125;"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                <span class="comment">//没有上传过  </span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    response.getWriter().write(<span class="string">"&#123;\"ifExist\":0&#125;"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            jedisPool.returnResource(jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//保存上传分片</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileSave</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();  </span><br><span class="line">    ServletFileUpload sfu = <span class="keyword">new</span> ServletFileUpload(factory);  </span><br><span class="line">    sfu.setHeaderEncoding(<span class="string">"utf-8"</span>);  </span><br><span class="line">        </span><br><span class="line">        String savePath = request.getRealPath(<span class="string">"/"</span>);</span><br><span class="line">        savePath = <span class="keyword">new</span> File(savePath) + <span class="string">"/upload/"</span>;  </span><br><span class="line">          </span><br><span class="line">        String fileMd5 = <span class="keyword">null</span>;  </span><br><span class="line">        String chunk = <span class="keyword">null</span>;  </span><br><span class="line">    String fileName=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            List&lt;FileItem&gt; items = sfu.parseRequest(request);  </span><br><span class="line">              </span><br><span class="line">            <span class="keyword">for</span>(FileItem item:items)&#123;</span><br><span class="line">                <span class="comment">//上传文件的真实名称</span></span><br><span class="line">                fileName=item.getName();</span><br><span class="line">                <span class="keyword">if</span>(item.isFormField())&#123;  </span><br><span class="line">                    String fieldName = item.getFieldName();  </span><br><span class="line">                    <span class="keyword">if</span>(fieldName.equals(<span class="string">"fileMd5"</span>))&#123;  </span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                fileMd5 = item.getString(<span class="string">"utf-8"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">if</span>(fieldName.equals(<span class="string">"chunk"</span>))&#123;  </span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                chunk = item.getString(<span class="string">"utf-8"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            Jedis jedis =<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                jedis =jedisPool.getResource();</span><br><span class="line">                File file = <span class="keyword">new</span> File(savePath+<span class="string">"/"</span>+jedis.get(<span class="string">"fileName_"</span>+fileName));  </span><br><span class="line">                <span class="keyword">if</span>(!file.exists())&#123;  </span><br><span class="line">                    file.mkdir();  </span><br><span class="line">                &#125;  </span><br><span class="line">                File chunkFile = <span class="keyword">new</span> File(savePath+<span class="string">"/"</span>+jedis.get(<span class="string">"fileName_"</span>+fileName)+<span class="string">"/"</span>+chunk);</span><br><span class="line">                FileUtils.copyInputStreamToFile(item.getInputStream(), chunkFile);  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                jedisPool.returnResource(jedis);</span><br><span class="line">            &#125;</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileUploadException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//当有文件添加进队列时 通过文件名查看该文件是否上传过 上传进度是多少</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">selectProgressByFileName</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">    String jindutiao=<span class="string">""</span>;</span><br><span class="line">    Jedis jedis =<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        jedis =jedisPool.getResource();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=fileName &amp;&amp; !<span class="string">""</span>.equals(fileName))&#123;</span><br><span class="line">            jindutiao=jedis.get(<span class="string">"jindutiao_"</span>+fileName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        jedisPool.returnResource(jedis);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jindutiao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：webUploader断点上传多个大文件时是按队列顺序上传的，即队列中的文件一个一个上传，前一个上传完成才会开始上传下一个，不能实现同时上传。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0161.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;大文件上传组件&lt;br&gt;
    
    </summary>
    
      <category term="WebUploader" scheme="http://www.iskei.cn/categories/WebUploader/"/>
    
    
      <category term="WebUploader" scheme="http://www.iskei.cn/tags/WebUploader/"/>
    
  </entry>
  
  <entry>
    <title>maven项目的tomcat配置</title>
    <link href="http://www.iskei.cn/posts/42040.html"/>
    <id>http://www.iskei.cn/posts/42040.html</id>
    <published>2018-03-20T12:30:36.000Z</published>
    <updated>2018-04-18T09:00:50.186Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0159.jpg" alt="image"></p><p>maven项目的tomcat配置<br><a id="more"></a></p><h3 id="一、没有Tomcat情况"><a href="#一、没有Tomcat情况" class="headerlink" title="一、没有Tomcat情况"></a>一、没有Tomcat情况</h3><p>  <code>Run As--&gt;Maven build--&gt;tomcat:run</code>    (不支持jdk1.8+tomcat8;项目启动没问题,访问报错500;jdk1.7 可以正常访问)</p><h3 id="二、war包形式"><a href="#二、war包形式" class="headerlink" title="二、war包形式"></a>二、war包形式</h3><ol><li><p>使用maven导出war包</p><p><code>Run As--&gt;Maven build... --&gt;package</code></p><p>成功后会提示生成的war包路径。一般在项目的target目录下。 (<code>注：pom.xml的&lt;packaging/&gt;配置为war打包后的就是war包，配置为jar时打包后的就是jar包</code>)</p></li><li><p>将war包部署至tomcat中</p></li></ol><p>将war放到Tomcat的webapps目录下，配置<code>conf\server.xml</code>文件<code>在&lt;Host&gt;中添加配置信息：(C:\Java\apache-tomcat-7.0.79\conf)</code></p><ul><li><p>① path:启动项目后访问项目的路径</p></li><li><p>② docBase:项目路径，可以使用绝对路径或相对路径，相对路径是相对于webapps</p></li><li><p>③ 你还可以在server.xml中配置你的端口号和项目名称，从而改变访问的url。    </p></li></ul><ol><li>启动tomcat</li></ol><p>注: 在部署项目的时候直接将web项目编译后的文件放在webapps也是同样的</p><pre><code>JavaEE项目部署 `默认存放在webapp--&gt;WEB-INF--&gt;classes下面(如：C:\Java\apache-tomcat-7.0.79\webapps\mobile_scm\WEB-INF\classes)` maven项目部署 `默认存放在target下面(如：E:\MavenWorks\babasport\target)`</code></pre><h3 id="三、Tomcat启动"><a href="#三、Tomcat启动" class="headerlink" title="三、Tomcat启动"></a>三、Tomcat启动</h3><p>项目发布 直接到webapps下</p><h4 id="maven工程的tomcat热部署"><a href="#maven工程的tomcat热部署" class="headerlink" title="maven工程的tomcat热部署"></a>maven工程的tomcat热部署</h4><p>教程：tomcat热部署：webapps下的项目正在运行，直接把开发的新版本发布到正在运行的Tomcat下(不能关闭Tomcat再发布新版本</p><p>   开发者本地将代码通过Git push到服务器端，服务器自动编译-打包-发布等等；也就是说发布到tomcat中后，不需要重启tomcat。</p><ol><li>热部署前准备：</li></ol><ul><li><p>配置Tomcat登录的用户名和密码</p><p>热部署需要用户名和密码进行远程发布，修改user配置文件一是为了管理员进入tomcat管理页面并提高其安全性，二是为了在maven设置正确的用户名；</p><pre><code>`C:\Java\apache-tomcat-7.0.79\conf\tomcat-users.xml`</code></pre></li><li><p>找到tomcat-user配置文件:</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Tomcat登录的用户名和密码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-script"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"admin"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"tomcat"</span> <span class="attr">password</span>=<span class="string">"123456"</span> <span class="attr">roles</span>=<span class="string">"manager-gui,manager-script,admin,manager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>重启Tomcat，访问<code>http://localhost:8080</code></p><p>进入tomcat服务器根目录，点击“manager app”输入用户名和密码，成功进入管理页面，说明第一步配置成功。</p><p>注：端口号改为80 可以默认不显示；访问项目应该隐藏项目名称；</p></li></ol><h4 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h4><ol><li><p>Maven的Server的配置    </p><p>在Maven的安装路径找到<code>conf目录下的setting.xml文件(&quot;E:\software\apache-maven-3.5.0\conf&quot;)，在&lt;servers&gt;节点中添加tomcat7</code>下配置的用户信息    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：如果在pom.xml中没有配置用户名和密码，则使用setting里的配置，如果有的话，就是用pom里的配置（就近原则）配置完记得要<code>Maven--&gt;Update projiect</code>(刷新)</p></li><li><p>pom.xml中添加tomcat插件</p></li></ol><ul><li>① <code>可以在pom.xml中右键--&gt;Maven--&gt;Add Plugin--&gt;tomcat 自动添加插件</code></li><li>② 可以手动配置插件和Tomcat的访问路径</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>babasport<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 本地jdk版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 配置tomcat的访问 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 访问路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/manager/text<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 项目发布到根目录,覆盖ROOT，URL访问可以省略项目名称 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;path&gt;/&lt;/path&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span>&gt;</span>/babasport<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">server</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">server</span>&gt;</span>  <span class="comment">&lt;!-- 此处的名字必须和setting.xml中配置的ID一致--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>最后来验证一下：启动tomcat服务器，保证里面没有发布任何项目</li></ol><ul><li><p>如果是eclipse</p><p><code>直接右键项目---run as ---maven bulid...输入“tomcat7:deploy”(二次发布以后输入&quot;tomcat7:redeploy&quot;)</code></p></li><li><p>如果使用的是命令行</p><p><code>直接输入“mvn tomcat7:redeploy”</code></p></li></ul><p>测试通过，输入地址可以正常的访问！</p><h4 id="server下设置tomcat发布位置"><a href="#server下设置tomcat发布位置" class="headerlink" title="server下设置tomcat发布位置"></a>server下设置tomcat发布位置</h4><p>maven项目发布后默认存放到target目录下(如：E:\MavenWorks\babasport\target)；开发web项目时，还需要手动复制到web服务器下(Tomcat)</p><p>如果能自动部署到Web服务器，而不用每次手动把target下编译好的war包拷贝到Tomcat下就更好了。</p><p>对servers设置：</p><ol><li>修改发布路径到webapps下</li><li>修改timeout服务器启动和停止时间为300秒</li><li>发布到webapps下的根目录(项目访问URL不需要填写项目名， 取消勾选自动发布!</li><li>浏览器访问 <code>http://localhost:8080/</code> (省略了项目名称)    </li></ol><p>注：如果用eclipse，<code>http://localhost:8080/项目名称</code>  也可以访问； </p><pre><code>用myeclipse，只能访问`http://localhost:8080/`</code></pre><p>注：如果不能成功发布到 / 目录下，或许需要做以下修改(一般默认完成，不用做修改)   </p><ul><li>1 删除webContext的发布</li><li>2 增加webapp发布到根目录下</li><li>3 增加<code>Maven库(jar包)到WEB-INF/lib 下</code></li></ul><h3 id="四、控制台不输出log没有反应"><a href="#四、控制台不输出log没有反应" class="headerlink" title="四、控制台不输出log没有反应"></a>四、控制台不输出log没有反应</h3><p>MyEclipse中Maven build…项目控制台不输出log 没有反应</p><pre><code>一开始项目与都是可以通过maven build... 然后输入tomcat:run 跑起来的，后来忘记做了啥操作跑步起来了，控制台也不输出log了，总是一闪就过去了，后来也是试了各种方法，可能是自己换了当前项目的jdk版本，下面是解决方案</code></pre><p>右击maven项目: <code>Build Path ---&gt; configure Build Path... ---&gt; 先选中你当前的jdk remove掉 ，然后重新添加 ----&gt; Add Library ---&gt;  选择 JRE System Library  ---&gt; 选择Alternate JRE---&gt; 然后点击installed JRES 进入界面后选择你要用的jdk版本 ---&gt; edit ---&gt; 在Default VM arguments 添加 :Dmaven.multiModuleProjectDirectory=$MAVEN_HOME</code></p><p>这样就可以，希望可以解决你的问题 !</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0159.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;maven项目的tomcat配置&lt;br&gt;
    
    </summary>
    
      <category term="maven" scheme="http://www.iskei.cn/categories/maven/"/>
    
    
      <category term="maven" scheme="http://www.iskei.cn/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Java basic knowledge</title>
    <link href="http://www.iskei.cn/posts/18967.html"/>
    <id>http://www.iskei.cn/posts/18967.html</id>
    <published>2018-03-18T12:30:36.000Z</published>
    <updated>2018-04-18T09:00:50.162Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0158.jpg" alt="image"></p><p>27天学完Java<br><a id="more"></a></p><h3 id="DAY001"><a href="#DAY001" class="headerlink" title="DAY001"></a>DAY001</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/xuexi/001DAY.jpg" alt=""></p><h4 id="DOS命令-理解"><a href="#DOS命令-理解" class="headerlink" title="DOS命令(理解)"></a>DOS命令(理解)</h4><p>​    (1)切换盘符(掌握)      <code>d: 回车</code></p><p>​    (2)显示某目录下的所有文件或者文件夹(掌握)    <code>dir 回车</code></p><p> ​    (3)创建文件夹     <code>md 文件夹名称 回车</code></p><p> ​    (4)删除文件夹    <code>rd 文件夹名称 回车</code></p><pre><code>(5)进入目录(掌握 )          `单级进入 cd 目录名称`     `多级进入 cd 目录名称1\目录名称2\...`(6)回退目录(掌握)         `单级回退 cd..`    `回退根目录 cd\`(7)删除文件    `del 文件名称`    `*.txt 可以表示多个文件名称`(8)清屏(掌握)           `cls`(9)退出        `exit`(10)删除带内容的文件夹     `rd /s 文件夹名称 会提示是否删除`    `rd /q /s 文件夹名称 直接删除`    </code></pre><h4 id="path环境变量-理解"><a href="#path环境变量-理解" class="headerlink" title="path环境变量(理解)"></a>path环境变量(理解)</h4><p>​    (1)为什么要配置path环境变量<br>        为了让javac和java命令可以在任意目录下使用<br>    (2)如何配置<br>        A:方式1 直接修改path，在前面追加JDK的bin目录<br>        B:方式2(掌握)<br>            新建JAVA_HOME: JDK的安装目录<br>            修改path: %JAVA_HOME%\bin;后面是以前的环境变量</p><h4 id="classpath环境变量-理解"><a href="#classpath环境变量-理解" class="headerlink" title="classpath环境变量(理解)"></a>classpath环境变量(理解)</h4><p>​    (1)为什么要配置classpath环境变量<br>        为了让class文件可以在任意目录下运行<br>    (2)如何配置<br>        新建：classpath，把你想要在任意目录下运行的class文件所在目录配置过去即可。<br>        注意：将来在执行的时候，有先后顺序关系<br>    (3)path和classpath的区别<br>        path是为了让exe文件可以在任意目录下运行<br>        classpath是为了让class文件可以在任意目录下运行</p><h4 id="注释-掌握"><a href="#注释-掌握" class="headerlink" title="注释(掌握)"></a>注释(掌握)</h4><p>​    (1)注释:用于解释说明程序的文字<br>    (2)分类：<br>        A:单行：//注释文字<br>        B:多行：/<em> 注释文字 </em>/<br>        C:文档注释：/<em>* 注释文字 </em>/<br>    (3)带注释的HelloWorld案例<br>    (4)注释的作用：<br>        A:解释说明程序，提高程序的阅读性<br>        B:帮助我们调试程序</p><h4 id="关键字-掌握"><a href="#关键字-掌握" class="headerlink" title="关键字(掌握)"></a>关键字(掌握)</h4><p>​    (1)关键字:被Java赋予特定含义的单词<br>    (2)特点:全部小写<br>    (3)注意事项：<br>        A:goto和const作为保留字存在，目前不使用<br>        B:类似于Editplus这样的高级记事本，会对关键字有特殊颜色标记，方便记忆</p><h4 id="标识符-掌握"><a href="#标识符-掌握" class="headerlink" title="标识符(掌握)"></a>标识符(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标识符：就是给类,接口,方法,变量等起名字时使用的字符序列(字符串)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">组成规则：</span></span><br><span class="line"><span class="comment">A:英文字母大小写</span></span><br><span class="line"><span class="comment">B:数字</span></span><br><span class="line"><span class="comment">C:_和$</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">A:不能以数字开头</span></span><br><span class="line"><span class="comment">B:不能是Java中的关键字</span></span><br><span class="line"><span class="comment">C:区分大小写</span></span><br><span class="line"><span class="comment">Student,student 这是两个名称</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">常见的命名规则：见名知意</span></span><br><span class="line"><span class="comment">A:包 其实就是文件夹,用于解决相同类名问题</span></span><br><span class="line"><span class="comment">全部小写</span></span><br><span class="line"><span class="comment">单级：com</span></span><br><span class="line"><span class="comment">多级：cn.itcast</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">B:类或者接口</span></span><br><span class="line"><span class="comment">一个单词：首字母大写</span></span><br><span class="line"><span class="comment">Student,Person,Teacher</span></span><br><span class="line"><span class="comment">多个单词：每个单词的首字母大写</span></span><br><span class="line"><span class="comment">HelloWorld,MyName,NameDemo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">C:方法或者变量</span></span><br><span class="line"><span class="comment">一个单词：全部小写</span></span><br><span class="line"><span class="comment">name,age,show()</span></span><br><span class="line"><span class="comment">多个单词：从第二个单词开始，每个单词首字母大写</span></span><br><span class="line"><span class="comment">myName,showAllStudentNames()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">D:常量</span></span><br><span class="line"><span class="comment">一个单词：全部大写</span></span><br><span class="line"><span class="comment">AGE</span></span><br><span class="line"><span class="comment">多个单词：每个单词都大写，用_连接</span></span><br><span class="line"><span class="comment">STUDENT_MAX_AGE</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DAY002"><a href="#DAY002" class="headerlink" title="DAY002"></a>DAY002</h2><p><img src="http://ovi3ob9p4.bkt.clouddn.com/xuexi/002DAY.jpg" alt=""></p><h4 id="常量-掌握"><a href="#常量-掌握" class="headerlink" title="常量(掌握)"></a>常量(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">常量：在程序执行的过程中其值不可以发生改变</span></span><br><span class="line"><span class="comment">举例：π</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">A:字面值常量</span></span><br><span class="line"><span class="comment">1，12.5</span></span><br><span class="line"><span class="comment">B:自定义常量(面向对象部分讲解)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">字面值常量分类：</span></span><br><span class="line"><span class="comment">A:字符串常量 用""括起来的内容</span></span><br><span class="line"><span class="comment">B:整数常量 所有的整数数据</span></span><br><span class="line"><span class="comment">C:小数常量 所有的带小数的数据</span></span><br><span class="line"><span class="comment">D:字符常量 用单引号括起来的内容</span></span><br><span class="line"><span class="comment">E:布尔常量 只有两个值：true和false</span></span><br><span class="line"><span class="comment">F:空常量 null(数组部分去讲解)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConstantDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//字符串常量</span></span><br><span class="line">System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//整数常量</span></span><br><span class="line">System.out.println(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//小数常量</span></span><br><span class="line">System.out.println(<span class="number">12.345</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符常量</span></span><br><span class="line">System.out.println(<span class="string">'A'</span>);</span><br><span class="line"><span class="comment">//下面的是错误的</span></span><br><span class="line"><span class="comment">//System.out.println('BC');</span></span><br><span class="line">System.out.println(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔常量</span></span><br><span class="line">System.out.println(<span class="keyword">true</span>);</span><br><span class="line">System.out.println(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进制-理解"><a href="#进制-理解" class="headerlink" title="进制(理解)"></a>进制(理解)</h4><p>​    (1)一种计数的方式。x进制表示逢x进1。<br>    (2)进制转换<br>        A:其他进制到十进制<br>            系数*基数^权之和。<br>        B:十进制到其他进制<br>            除基取余,直到商为0,余数反转。<br>        C:快速转换<br>            a:二进制和十进制<br>                8421码<br>            b:二进制和八进制<br>                三位组合<br>            c:二进制和十六进制<br>                四位组合<br>        D:任意X进制到任意Y进制的转换<br>            可以使用十进制作为桥梁即可。</p><h4 id="有符号数据表示法-理解"><a href="#有符号数据表示法-理解" class="headerlink" title="有符号数据表示法(理解)"></a>有符号数据表示法(理解)</h4><p>​    (1)计算机中数据的存储和运算都是采用补码进行的。<br>    (2)数据的有符号表示法<br>        用0表示正号,1表示负号。<br>        A:原码<br>            正数:正常的二进制<br>            负数:符号为为1的二进制<br>        B:反码<br>            正数:和原码相同<br>            负数:和原码的区别是,符号位不变，数值位取反。1变0，0变1<br>        C:补码<br>            正数:和原码相同<br>            负数:反码+1<br>    (3)数据的有符号表示法练习<br>        A:已知原码，求反码和补码<br>        B:已知补码，求原码。<br>    (4)补充：float浮点数在计算机中的表示<br>            符号位        指数位        底数位<br>            S        E        M</p><h4 id="变量-掌握"><a href="#变量-掌握" class="headerlink" title="变量(掌握)"></a>变量(掌握)</h4><p>​    (1)变量：在程序的运行过程中，其值发生改变的量。<br>    (2)定义格式：<br>        A:数据类型 变量名 = 初始化值;<br>        B:数据类型 变量名;<br>          变量名 = 初始化值;</p><h4 id="数据类型-掌握"><a href="#数据类型-掌握" class="headerlink" title="数据类型(掌握)"></a>数据类型(掌握)</h4><p>​    (1)数据类型分类<br>        A:基本类型：4类8种<br>        B:引用类型：类，接口，数组<br>    (2)基本类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">为了更好的表达现实世界的事物，Java针对不同的事物提供了不同的数据类型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数据类型：</span></span><br><span class="line"><span class="comment">基本类型：4类8种</span></span><br><span class="line"><span class="comment">引用类型：类，接口，数组。(后面讲)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">基本类型:</span></span><br><span class="line"><span class="comment">整数：占用的内存空间</span></span><br><span class="line"><span class="comment">byte1字节</span></span><br><span class="line"><span class="comment">01111111</span></span><br><span class="line"><span class="comment">10000000(1既表示符号位，又表示数值 -128)</span></span><br><span class="line"><span class="comment">short2字节</span></span><br><span class="line"><span class="comment">int4字节</span></span><br><span class="line"><span class="comment">long8字节</span></span><br><span class="line"><span class="comment">浮点数：</span></span><br><span class="line"><span class="comment">float4字节</span></span><br><span class="line"><span class="comment">double8字节</span></span><br><span class="line"><span class="comment">字符：</span></span><br><span class="line"><span class="comment">char2字节</span></span><br><span class="line"><span class="comment">布尔：</span></span><br><span class="line"><span class="comment">boolean未知。1字节</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">面试题：</span></span><br><span class="line"><span class="comment">Java中字符可以存储一个汉字吗?</span></span><br><span class="line"><span class="comment">可以。因为Java语言采用的是unicode编码，</span></span><br><span class="line"><span class="comment">而unicode编码的每个字符是两个字节，</span></span><br><span class="line"><span class="comment">所以，java中的字符可以存储一个汉字。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">整数默认是int类型</span></span><br><span class="line"><span class="comment">浮点数默认是double类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">long类型的变量，要加l或者L。</span></span><br><span class="line"><span class="comment">float类型的变量，要加f或者F。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在同一对&#123;&#125;里面，是不能有同名的变量。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataType</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义变量的格式：</span></span><br><span class="line"><span class="comment">//数据类型 变量名 = 初始化值;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义byte类型的变量</span></span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="number">1</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义short类型的变量</span></span><br><span class="line"><span class="keyword">short</span> s = <span class="number">100</span>;</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义int类型的变量</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">100000</span>;</span><br><span class="line">System.out.println(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line"><span class="comment">//int j = 2147483648;</span></span><br><span class="line"><span class="comment">//System.out.println(j);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义long类型的变量</span></span><br><span class="line"><span class="keyword">long</span> l = <span class="number">2147483648L</span>;</span><br><span class="line">System.out.println(l);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义float类型的变量</span></span><br><span class="line"><span class="keyword">float</span> f = <span class="number">12.34F</span>;</span><br><span class="line">System.out.println(f);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义double类型的变量</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">23.56</span>;</span><br><span class="line">System.out.println(d);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义char类型的变量</span></span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">'a'</span>;</span><br><span class="line">System.out.println(ch);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义boolean类型的变量</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">System.out.println(flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用变量的注意事项"><a href="#使用变量的注意事项" class="headerlink" title="使用变量的注意事项"></a>使用变量的注意事项</h5><p>​    A:作用域<br>        每一个变量在它所属的大括号内有效，并且，同一个作用域不能定义同名的变量。</p><p>(for循环()中定义的变量与在for{}中定义有相同的作用域)<br>    B:初始化值<br>        变量必须先声明，赋值，最后才能使用<br>    C:在一行上定义的问题<br>        可以在一行上定义多个变量，但是不建议。</p><h4 id="类型转换-掌握"><a href="#类型转换-掌握" class="headerlink" title="类型转换(掌握)"></a>类型转换(掌握)</h4><p>​    注意：<br>        boolean类型不参与。</p><ol><li><p>隐式转换：从小到大</p><pre><code>    byte,short,char --&gt; int --&gt; long --&gt; float --&gt; doublelong为什么可以到float呢?A:因为long和float的底层存储结构不同。B:数据范围    long: 2^63    float: 3.4*10^38        3.4*10^38 &gt; 3.4*8^38 = 3.4*2^3^38 = 3.4*2^114 &gt; 2^63</code></pre></li><li><p>强制转换：从大到小</p><pre><code>一般不建议这样做，因为可能有精度的损失。</code></pre><p> 格式：</p><pre><code>目标数据类型 变量名 = (目标数据类型)(被转换的数据);</code></pre></li></ol><h4 id="运算符-理解"><a href="#运算符-理解" class="headerlink" title="运算符(理解)"></a>运算符(理解)</h4><ol><li><p>运算：对常量和变量进行操作的过程称为运算。</p></li><li><p>运算符：对常量和变量进行操作的符号称为运算符</p></li><li><p>表达式：由运算符把常量和变量连接起来的式子</p><p>注意：表达式必须有结果</p></li></ol><h4 id="算术运算符-掌握"><a href="#算术运算符-掌握" class="headerlink" title="算术运算符(掌握)"></a>算术运算符(掌握)</h4><ol><li>+,-,*,/,%,++,–`</li><li><p><code>+:</code></p><pre><code>    正号加法字符串连接符</code></pre></li><li><p>%和/的区别`</p><pre><code>    `%：余数``/：商`    整数相除，结果是整数。想得到小数，可以乘以或者除以1.0    %的结果的符号和前面的那个数一致。</code></pre></li><li><p><code>++,--</code></p><pre><code>A:单独使用放在数据的前面和后面效果一样。</code></pre><p> B:参与操作使用</p><pre><code>放在数据的前面，先数据变化，再参与运算。放在数据的后面，先参与运算，再数据变化。</code></pre></li></ol><h4 id="赋值运算符-掌握"><a href="#赋值运算符-掌握" class="headerlink" title="赋值运算符(掌握)"></a>赋值运算符(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">赋值运算符：</span></span><br><span class="line"><span class="comment">基本：=</span></span><br><span class="line"><span class="comment">复合：+=,-=,*=,/=,%=,...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//把10赋值给int类型的变量a</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//复合的用法</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">b += <span class="number">20</span>; <span class="comment">//结果等价于：b = b + 20;</span></span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关系运算符-掌握"><a href="#关系运算符-掌握" class="headerlink" title="关系运算符(掌握)"></a>关系运算符(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关系运算符：</span></span><br><span class="line"><span class="comment">==,!=,&gt;,&gt;=,&lt;,&lt;=</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">无论表达式是简单还是复杂，结果肯定是boolean类型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">关系运算符“==”不能误写成“=” 。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">20</span>;</span><br><span class="line">System.out.println(a == b);</span><br><span class="line">System.out.println(a == c);</span><br><span class="line">System.out.println((a + b*c) == (a*b + c));</span><br><span class="line">System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(a = b); <span class="comment">//把b的值赋值给a，把a的值作为结果留下来</span></span><br><span class="line">System.out.println(a = c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="逻辑运算符-掌握"><a href="#逻辑运算符-掌握" class="headerlink" title="逻辑运算符(掌握)"></a>逻辑运算符(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&amp;&amp;和&amp;的区别? 前者有短路效果，只要左边是false，右边不执行。而后者，全部执行。</span></span><br><span class="line"><span class="comment">||和|的区别? 前者有短路效果，只要左边是true，右边不执行。而后者，全部执行。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp;:逻辑与有false则false</span></span><br><span class="line">System.out.println(a&gt;b &amp; a&gt;c); <span class="comment">//false &amp; false = false</span></span><br><span class="line">System.out.println(a&gt;b &amp; a&lt;c); <span class="comment">//false &amp; true = false</span></span><br><span class="line">System.out.println(a&lt;b &amp; a&gt;c); <span class="comment">//true &amp; false = false</span></span><br><span class="line">System.out.println(a&lt;b &amp; a&lt;c); <span class="comment">//true &amp; true = true</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp;&amp;:</span></span><br><span class="line">System.out.println(a&gt;b &amp;&amp; a&gt;c); <span class="comment">//false &amp;&amp; false = false</span></span><br><span class="line">System.out.println(a&gt;b &amp;&amp; a&lt;c); <span class="comment">//false &amp;&amp; true = false</span></span><br><span class="line">System.out.println(a&lt;b &amp;&amp; a&gt;c); <span class="comment">//true &amp;&amp; false = false</span></span><br><span class="line">System.out.println(a&lt;b &amp;&amp; a&lt;c); <span class="comment">//true &amp;&amp; true = true</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//|:逻辑或有true则true</span></span><br><span class="line">System.out.println(a&gt;b | a&gt;c); <span class="comment">//false | false = false</span></span><br><span class="line">System.out.println(a&gt;b | a&lt;c); <span class="comment">//false | true = true</span></span><br><span class="line">System.out.println(a&lt;b | a&gt;c); <span class="comment">//true | false = true</span></span><br><span class="line">System.out.println(a&lt;b | a&lt;c); <span class="comment">//true | true = true</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//||:</span></span><br><span class="line">System.out.println(a&gt;b || a&gt;c); <span class="comment">//false || false = false</span></span><br><span class="line">System.out.println(a&gt;b || a&lt;c); <span class="comment">//false || true = true</span></span><br><span class="line">System.out.println(a&lt;b || a&gt;c); <span class="comment">//true || false = true</span></span><br><span class="line">System.out.println(a&lt;b || a&lt;c); <span class="comment">//true || true = true</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//System.out.println((x++)&gt;3 &amp; (y++)&gt;4); //false &amp; false = false</span></span><br><span class="line"><span class="comment">//System.out.println(x);//4</span></span><br><span class="line"><span class="comment">//System.out.println(y);//5</span></span><br><span class="line">System.out.println((x++)&gt;<span class="number">3</span> &amp;&amp; (y++)&gt;<span class="number">4</span>);</span><br><span class="line">System.out.println(x);<span class="comment">//4</span></span><br><span class="line">System.out.println(y);<span class="comment">//4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">逻辑运算符：</span></span><br><span class="line"><span class="comment">&amp;,|,!,^</span></span><br><span class="line"><span class="comment">&amp;&amp;,||</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">逻辑运算符连接的应该是一个布尔表达式。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//&amp;,|,!,^</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp;:逻辑与有false则false</span></span><br><span class="line">System.out.println(a&gt;b &amp; a&gt;c); <span class="comment">//false &amp; false = false</span></span><br><span class="line">System.out.println(a&gt;b &amp; a&lt;c); <span class="comment">//false &amp; true = false</span></span><br><span class="line">System.out.println(a&lt;b &amp; a&gt;c); <span class="comment">//true &amp; false = false</span></span><br><span class="line">System.out.println(a&lt;b &amp; a&lt;c); <span class="comment">//true &amp; true = true</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//|:逻辑或有true则true</span></span><br><span class="line">System.out.println(a&gt;b | a&gt;c); <span class="comment">//false | false = false</span></span><br><span class="line">System.out.println(a&gt;b | a&lt;c); <span class="comment">//false | true = true</span></span><br><span class="line">System.out.println(a&lt;b | a&gt;c); <span class="comment">//true | false = true</span></span><br><span class="line">System.out.println(a&lt;b | a&lt;c); <span class="comment">//true | true = true</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//^:逻辑异或 相同false，不同true。</span></span><br><span class="line"><span class="comment">//情侣：男男，男女，女男，女女</span></span><br><span class="line">System.out.println(a&gt;b ^ a&gt;c); <span class="comment">//false ^ false = false</span></span><br><span class="line">System.out.println(a&gt;b ^ a&lt;c); <span class="comment">//false ^ true = true</span></span><br><span class="line">System.out.println(a&lt;b ^ a&gt;c); <span class="comment">//true ^ false = true</span></span><br><span class="line">System.out.println(a&lt;b ^ a&lt;c); <span class="comment">//true ^ true = false</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//!:逻辑非</span></span><br><span class="line">System.out.println((a&gt;b));<span class="comment">//false</span></span><br><span class="line">System.out.println(!(a&gt;b));<span class="comment">//true</span></span><br><span class="line">System.out.println(!!(a&gt;b));<span class="comment">//false</span></span><br><span class="line">System.out.println(!!!(a&gt;b));<span class="comment">//true</span></span><br><span class="line">System.out.println(!!!!(a&gt;b));<span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用字符与ASCII代码对照表"><a href="#常用字符与ASCII代码对照表" class="headerlink" title="常用字符与ASCII代码对照表"></a>常用字符与ASCII代码对照表</h4><p>为了便于查询，以下列出<strong>ASCII**</strong>码表**：第128～255号为扩展字符（不常用）</p><table><thead><tr><th>ASCII码</th><th>键盘</th><th>ASCII 码</th><th>键盘</th><th>ASCII 码</th><th>键盘</th><th>ASCII 码</th><th>键盘</th></tr></thead><tbody><tr><td>27</td><td>ESC</td><td>32</td><td>SPACE</td><td>33</td><td>!</td><td>34</td><td>“</td></tr><tr><td>35</td><td>#</td><td>36</td><td>$</td><td>37</td><td>%</td><td>38</td><td>&amp;</td></tr><tr><td>39</td><td>‘</td><td>40</td><td>(</td><td>41</td><td>)</td><td>42</td><td>*</td></tr><tr><td>43</td><td>+</td><td>44</td><td>‘</td><td>45</td><td>-</td><td>46</td><td>.</td></tr><tr><td>47</td><td>/</td><td>48</td><td>0</td><td>49</td><td>1</td><td>50</td><td>2</td></tr><tr><td>51</td><td>3</td><td>52</td><td>4</td><td>53</td><td>5</td><td>54</td><td>6</td></tr><tr><td>55</td><td>7</td><td>56</td><td>8</td><td>57</td><td>9</td><td>58</td><td>:</td></tr><tr><td>59</td><td>;</td><td>60</td><td>&lt;</td><td>61</td><td>=</td><td>62</td><td>&gt;</td></tr><tr><td>63</td><td>?</td><td>64</td><td>@</td><td>65</td><td>A</td><td>66</td><td>B</td></tr><tr><td>67</td><td>C</td><td>68</td><td>D</td><td>69</td><td>E</td><td>70</td><td>F</td></tr><tr><td>71</td><td>G</td><td>72</td><td>H</td><td>73</td><td>I</td><td>74</td><td>J</td></tr><tr><td>75</td><td>K</td><td>76</td><td>L</td><td>77</td><td>M</td><td>78</td><td>N</td></tr><tr><td>79</td><td>O</td><td>80</td><td>P</td><td>81</td><td>Q</td><td>82</td><td>R</td></tr><tr><td>83</td><td>S</td><td>84</td><td>T</td><td>85</td><td>U</td><td>86</td><td>V</td></tr><tr><td>87</td><td>W</td><td>88</td><td>X</td><td>89</td><td>Y</td><td>90</td><td>Z</td></tr><tr><td>91</td><td>[</td><td>92</td><td>\</td><td>93</td><td>]</td><td>94</td><td>^</td></tr><tr><td>95</td><td>_</td><td>96</td><td>`</td><td>97</td><td>a</td><td>98</td><td>b</td></tr><tr><td>99</td><td>c</td><td>100</td><td>d</td><td>101</td><td>e</td><td>102</td><td>f</td></tr><tr><td>103</td><td>g</td><td>104</td><td>h</td><td>105</td><td>i</td><td>106</td><td>j</td></tr><tr><td>107</td><td>k</td><td>108</td><td>l</td><td>109</td><td>m</td><td>110</td><td>n</td></tr><tr><td>111</td><td>o</td><td>112</td><td>p</td><td>113</td><td>q</td><td>114</td><td>r</td></tr><tr><td>115</td><td>s</td><td>116</td><td>t</td><td>117</td><td>u</td><td>118</td><td>v</td></tr><tr><td>119</td><td>w</td><td>120</td><td>x</td><td>121</td><td>y</td><td>122</td><td>z</td></tr><tr><td>123</td><td>{</td><td>124</td><td>\</td><td></td><td>125</td><td>}</td><td>126</td><td>~</td></tr></tbody></table><p><strong>运算符的优先级（从高到低）</strong></p><table><thead><tr><th>优先级</th><th>描述</th><th>运算符</th></tr></thead><tbody><tr><td>1</td><td>括号</td><td>()、[]</td></tr><tr><td>2</td><td>正负号</td><td>+、-</td></tr><tr><td>3</td><td>自增自减，非</td><td>++、–、!</td></tr><tr><td>4</td><td>乘除，取余</td><td>*、/、%</td></tr><tr><td>5</td><td>加减</td><td>+、-</td></tr><tr><td>6</td><td>移位运算</td><td>&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td></tr><tr><td>7</td><td>大小关系</td><td>&gt;、&gt;=、&lt;、&lt;=</td></tr><tr><td>8</td><td>相等关系</td><td>==、!=</td></tr><tr><td>9</td><td>按位与</td><td>&amp;</td></tr><tr><td>10</td><td>按位异或</td><td>^</td></tr><tr><td>11</td><td>按位或</td><td>\</td><td></td></tr><tr><td>12</td><td>逻辑与</td><td>&amp;&amp;</td></tr><tr><td>13</td><td>逻辑或</td><td>\</td><td>\</td><td></td></tr><tr><td>14</td><td>条件运算</td><td>?:</td></tr><tr><td>15</td><td>赋值运算</td><td>=、+=、-=、*=、/=、%=</td></tr><tr><td>16</td><td>位赋值运算</td><td>&amp;=、\</td><td>=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=</td></tr></tbody></table><p>如果在程序中，要改变运算顺序，可以使用()。</p><h3 id="DAY003"><a href="#DAY003" class="headerlink" title="DAY003"></a>DAY003</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/xuexi/003DAY.jpg" alt=""></p><h4 id="位运算符-了解"><a href="#位运算符-了解" class="headerlink" title="位运算符(了解)"></a>位运算符(了解)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">位运算符：位运算符一定是先把数据转成二进制，然后再运算。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">面试题：&amp;和&amp;&amp;的区别?</span></span><br><span class="line"><span class="comment">A:&amp;和&amp;&amp;都可以作为逻辑运算，&amp;&amp;具有短路效果。</span></span><br><span class="line"><span class="comment">B:&amp;还可以作为位运算。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//&amp;,|,^,~</span></span><br><span class="line">System.out.println(<span class="number">3</span> &amp; <span class="number">4</span>); <span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="number">3</span> | <span class="number">4</span>); <span class="comment">//7</span></span><br><span class="line">System.out.println(<span class="number">3</span> ^ <span class="number">4</span>); <span class="comment">//7</span></span><br><span class="line">System.out.println(~<span class="number">3</span>); <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A:计算出3，4的二进制</span></span><br><span class="line"><span class="comment">3的二进制：00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">4的二进制：00000000 00000000 00000000 00000100</span></span><br><span class="line"><span class="comment">B:位&amp;运算有0则0</span></span><br><span class="line"><span class="comment">00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">   &amp;00000000 00000000 00000000 00000100</span></span><br><span class="line"><span class="comment">   ------------------------------------</span></span><br><span class="line"><span class="comment">    00000000 00000000 00000000 00000000</span></span><br><span class="line"><span class="comment">C:位|运算有1则1</span></span><br><span class="line"><span class="comment">00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">   &amp;00000000 00000000 00000000 00000100</span></span><br><span class="line"><span class="comment">   ------------------------------------</span></span><br><span class="line"><span class="comment">    00000000 00000000 00000000 00000111</span></span><br><span class="line"><span class="comment">D:位^运算相同则0，不同则1</span></span><br><span class="line"><span class="comment">00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">   &amp;00000000 00000000 00000000 00000100</span></span><br><span class="line"><span class="comment">   ------------------------------------</span></span><br><span class="line"><span class="comment">    00000000 00000000 00000000 00000111</span></span><br><span class="line"><span class="comment">E:位~运算 把数据每个位都按位取反</span></span><br><span class="line"><span class="comment">00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">   ~11111111 11111111 11111111 11111100</span></span><br><span class="line"><span class="comment"> 反:11111111 11111111 11111111 11111011</span></span><br><span class="line"><span class="comment"> 原:10000000 00000000 00000000 00000100</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;&lt;:左移，右边补0</span></span><br><span class="line"><span class="comment">&gt;&gt;:右移，根据最高位确定补齐是0还是1</span></span><br><span class="line"><span class="comment">&gt;&gt;&gt;:无符号右移 左边补0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">System.out.println(4 &lt;&lt; 2); //16 = 4 * 2^2</span></span><br><span class="line"><span class="comment">System.out.println(3 &lt;&lt; 3); //3 * 2 ^ 3</span></span><br><span class="line"><span class="comment">System.out.println(32 &gt;&gt; 2); //32 / 2^2</span></span><br><span class="line"><span class="comment">System.out.println(32 &gt;&gt;&gt; 2);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">System.out.println(-<span class="number">32</span> &gt;&gt; <span class="number">2</span>);</span><br><span class="line">System.out.println(-<span class="number">32</span> &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A:&lt;&lt;</span></span><br><span class="line"><span class="comment">4的二进制：</span></span><br><span class="line"><span class="comment">00000000 00000000 00000000 00000100</span></span><br><span class="line"><span class="comment">(00)000000 00000000 00000000 0000010000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">B:&gt;&gt;&gt;</span></span><br><span class="line"><span class="comment">原：10000000 00000000 00000000 00100000</span></span><br><span class="line"><span class="comment">反：11111111 11111111 11111111 11011111</span></span><br><span class="line"><span class="comment">补：11111111 11111111 11111111 11100000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&gt;&gt;&gt;</span></span><br><span class="line"><span class="comment">11111111 11111111 11111111 11100000</span></span><br><span class="line"><span class="comment">0011111111 11111111 11111111 111000(00)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">位^运算符号：针对同一个数据异或两次，其值不变</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 面试题：</span></span><br><span class="line"><span class="comment">请把两个数据进行交换。</span></span><br><span class="line"><span class="comment">说明：如果我没有指定数据的类型，默认是int类型。适用于我讲课。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">System.out.println(1 ^ 2 ^ 2);//1</span></span><br><span class="line"><span class="comment">System.out.println(1 ^ 1 ^ 2);//2</span></span><br><span class="line"><span class="comment">System.out.println(15 ^ 3 ^ 7 ^ 7 ^ 3);//15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义两个变量</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(a+"---"+b);</span></span><br><span class="line">System.out.println(<span class="string">"a="</span>+a+<span class="string">",b="</span>+b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//怎么做呢?</span></span><br><span class="line"><span class="comment">//方式1：使用第三方变量。开发中常用此方案。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int temp = a;</span></span><br><span class="line"><span class="comment">a = b;</span></span><br><span class="line"><span class="comment">b = temp;</span></span><br><span class="line"><span class="comment">System.out.println("a="+a+",b="+b);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2：不好，可能a+b已经超出范围了。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a = a + b; //a=30</span></span><br><span class="line"><span class="comment">b = a - b; //b=10</span></span><br><span class="line"><span class="comment">a = a - b; //a=20</span></span><br><span class="line"><span class="comment">System.out.println("a="+a+",b="+b);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3：不好，可能a+b已经超出范围了。</span></span><br><span class="line"><span class="comment">//a = (a+b) - (b=a); //一句话搞定</span></span><br><span class="line"><span class="comment">//System.out.println("a="+a+",b="+b);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式4：面试</span></span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b; <span class="comment">//b = a ^ b = a ^ b ^ b = a;</span></span><br><span class="line">a = a ^ b; <span class="comment">//a = a ^ b = a ^ b ^ a = b;</span></span><br><span class="line">System.out.println(<span class="string">"a="</span>+a+<span class="string">",b="</span>+b);</span><br><span class="line"><span class="comment">//记忆：左边，a,b,a。右边a^b</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三元运算符-掌握"><a href="#三元运算符-掌握" class="headerlink" title="三元运算符(掌握)"></a>三元运算符(掌握)</h4><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">三元运算符：</span></span><br><span class="line"><span class="comment">格式</span></span><br><span class="line"><span class="comment">(关系表达式)?表达式1：表达式2；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行流程：</span></span><br><span class="line"><span class="comment">计算关系表达式，看其返回值</span></span><br><span class="line"><span class="comment">true:表达式1就是整个表达式的值</span></span><br><span class="line"><span class="comment">false:表达式2就是整个表达式的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取两个数据中的较大值</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> z = (x &gt; y)? x : y;</span><br><span class="line">System.out.println(z);</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较两个数是否相等</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//boolean flag = (a==b)?true:false;</span></span><br><span class="line"><span class="keyword">boolean</span> flag = (a == b);</span><br><span class="line">System.out.println(flag);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取三个数据中的较大值</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> d = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">int</span> e = <span class="number">50</span>;</span><br><span class="line"><span class="comment">//int max = (c&gt;d)?(c&gt;e?c:e):(d&gt;e?d:e);</span></span><br><span class="line"><span class="keyword">int</span> temp = (c&gt;d)?c:d;</span><br><span class="line"><span class="keyword">int</span> max = (temp&gt;e)?temp:e;</span><br><span class="line">System.out.println(max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="键盘录入数据-掌握"><a href="#键盘录入数据-掌握" class="headerlink" title="键盘录入数据(掌握)"></a>键盘录入数据(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">为了程序的数据更加的灵活，我们决定加入键盘录入数据。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何使用键盘录入数据呢?目前你就给我记住了。</span></span><br><span class="line"><span class="comment">A:导包</span></span><br><span class="line"><span class="comment">import java.util.Scanner;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在class的上面</span></span><br><span class="line"><span class="comment">B:创建对象</span></span><br><span class="line"><span class="comment">Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">C:获取数据</span></span><br><span class="line"><span class="comment">int i = sc.nextInt();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"请输入一个整数："</span>);</span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line"><span class="keyword">int</span> i = sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"i:"</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="流程控制-掌握"><a href="#流程控制-掌握" class="headerlink" title="流程控制(掌握)"></a>流程控制(掌握)</h4><p>​    (1)流程控制语句：<br>        顺序结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，</span></span><br><span class="line"><span class="comment">依次执行，程序中大多数的代码都是这样执行的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">总的来说：写在前面的先执行，写在后面的后执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我爱林青霞"</span>);</span><br><span class="line">System.out.println(<span class="string">"我爱Java"</span>);</span><br><span class="line">System.out.println(<span class="string">"我爱张曼玉"</span>);</span><br><span class="line">System.out.println(<span class="string">"林青霞爱张曼玉"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        选择结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if语句的第二种格式和三元运算符的区别：</span></span><br><span class="line"><span class="comment">三元运算符：</span></span><br><span class="line"><span class="comment">关系表达式?表达式1:表达式2;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if语句格式2：</span></span><br><span class="line"><span class="comment">if(关系表达式)&#123;</span></span><br><span class="line"><span class="comment">语句体1;</span></span><br><span class="line"><span class="comment">&#125;else &#123;</span></span><br><span class="line"><span class="comment">语句体2;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">总结：</span></span><br><span class="line"><span class="comment">三元运算符能够实现的，if语句的第二种格式都可以实现。反之不成立。</span></span><br><span class="line"><span class="comment">什么时候不成立呢?</span></span><br><span class="line"><span class="comment">当if语句的语句体是一条输出语句时，就不成立。</span></span><br><span class="line"><span class="comment">因为三元运算符是一个运算符，要求有结果返回，而输出语句不能作为一个结果返回。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IfDemo4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取键盘录入数据</span></span><br><span class="line">System.out.println(<span class="string">"请输入第一个数据："</span>);</span><br><span class="line"><span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">"请输入第二个数据："</span>);</span><br><span class="line"><span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用三元运算符实现</span></span><br><span class="line"><span class="keyword">int</span> c =  (a&gt;b)?a:b;</span><br><span class="line">System.out.println(<span class="string">"c:"</span>+c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用if语句格式2实现</span></span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">d = a;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">d = b;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"d:"</span>+d);</span><br><span class="line">System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接把结果输出</span></span><br><span class="line"><span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">System.out.println(<span class="string">"a:"</span>+a);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"b:"</span>+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用三元运算符改进</span></span><br><span class="line"><span class="comment">//(a&gt;b)?System.out.println("a:"+a):System.out.println("b:"+b);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if语句格式3：</span></span><br><span class="line"><span class="comment">if(关系表达式1) &#123;</span></span><br><span class="line"><span class="comment">     语句体1;</span></span><br><span class="line"><span class="comment">&#125;else  if (关系表达式2) &#123;</span></span><br><span class="line"><span class="comment"> 语句体2;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">…</span></span><br><span class="line"><span class="comment">else &#123;</span></span><br><span class="line"><span class="comment"> 语句体n+1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行流程：</span></span><br><span class="line"><span class="comment">首先判断关系表达式1看其结果是true还是false</span></span><br><span class="line"><span class="comment">如果是true就执行语句体1</span></span><br><span class="line"><span class="comment">如果是false就继续判断关系表达式2看其结果是true还是false</span></span><br><span class="line"><span class="comment">如果是true就执行语句体2</span></span><br><span class="line"><span class="comment">如果是false就继续判断关系表达式…看其结果是true还是false</span></span><br><span class="line"><span class="comment">…</span></span><br><span class="line"><span class="comment">如果没有任何关系表达式为true，就执行语句体n+1。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">需求：</span></span><br><span class="line"><span class="comment">键盘录入学生成绩，根据成绩输出对于的评价。</span></span><br><span class="line"><span class="comment">90-100优秀</span></span><br><span class="line"><span class="comment">80-90好</span></span><br><span class="line"><span class="comment">70-80良</span></span><br><span class="line"><span class="comment">60-70及格</span></span><br><span class="line"><span class="comment">60以下不及格</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IfDemo5</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//键盘录入学生成绩</span></span><br><span class="line">System.out.println(<span class="string">"请输入成绩："</span>);</span><br><span class="line"><span class="keyword">int</span> score = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验数据的时候，一定要注意：</span></span><br><span class="line"><span class="comment">//正确数据</span></span><br><span class="line"><span class="comment">//错误数据</span></span><br><span class="line"><span class="comment">//边界数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(score&gt;=90 &amp;&amp; score&lt;=100) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("优秀");</span></span><br><span class="line"><span class="comment">&#125;else if(score&gt;=80 &amp;&amp; score&lt;90) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("好");</span></span><br><span class="line"><span class="comment">&#125;else if(score&gt;=70 &amp;&amp; score&lt;80) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("良");</span></span><br><span class="line"><span class="comment">&#125;else if(score&gt;=60 &amp;&amp; score&lt;70) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("及格");</span></span><br><span class="line"><span class="comment">&#125;else &#123;</span></span><br><span class="line"><span class="comment">System.out.println("不及格");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个时候，虽然可以满足要求了。但是没有考虑到错误数据的情况。</span></span><br><span class="line"><span class="comment">//所以，我们需要加一个判断</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(score&gt;=90 &amp;&amp; score&lt;=100) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("优秀");</span></span><br><span class="line"><span class="comment">&#125;else if(score&gt;=80 &amp;&amp; score&lt;90) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("好");</span></span><br><span class="line"><span class="comment">&#125;else if(score&gt;=70 &amp;&amp; score&lt;80) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("良");</span></span><br><span class="line"><span class="comment">&#125;else if(score&gt;=60 &amp;&amp; score&lt;70) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("及格");</span></span><br><span class="line"><span class="comment">&#125;else if(score&gt;=0 &amp;&amp; score&lt;60) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("不及格");</span></span><br><span class="line"><span class="comment">&#125;else &#123;</span></span><br><span class="line"><span class="comment">System.out.println("输入的成绩有误");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我们也可以先判断成绩是否有误</span></span><br><span class="line"><span class="keyword">if</span>(score&lt;<span class="number">0</span> || score&gt;<span class="number">100</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"输入的成绩有误"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">90</span> &amp;&amp; score&lt;=<span class="number">100</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"优秀"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span> &amp;&amp; score&lt;<span class="number">90</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"好"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">70</span> &amp;&amp; score&lt;<span class="number">80</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"良"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">60</span> &amp;&amp; score&lt;<span class="number">70</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"不及格"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">switch语句格式：</span></span><br><span class="line"><span class="comment">switch(表达式) &#123;</span></span><br><span class="line"><span class="comment">case 值1：</span></span><br><span class="line"><span class="comment">语句体1;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">    case 值2：</span></span><br><span class="line"><span class="comment">语句体2;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">…</span></span><br><span class="line"><span class="comment">    default：</span></span><br><span class="line"><span class="comment">语句体n+1;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">格式解释：</span></span><br><span class="line"><span class="comment">A:switch表示这是switch语句</span></span><br><span class="line"><span class="comment">B:表达式的取值</span></span><br><span class="line"><span class="comment">byte,short,int,char</span></span><br><span class="line"><span class="comment">JDK5以后可以是枚举类型。(enum)</span></span><br><span class="line"><span class="comment">JDK7以后可以是字符串。(String)</span></span><br><span class="line"><span class="comment">C:case后面跟的是要和表达式进行比较的值</span></span><br><span class="line"><span class="comment">D:语句体可以是多条语句</span></span><br><span class="line"><span class="comment">E:break表示中断，结束的意思，可以结束switch语句</span></span><br><span class="line"><span class="comment">F:default语句表示所有情况都不匹配的时候，就执行该处的内容，和if语句的else相似。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">面试题：</span></span><br><span class="line"><span class="comment">switch的表达式可以是byte类型吗?可以是long类型吗?可以是String类型吗?</span></span><br><span class="line"><span class="comment">可以。</span></span><br><span class="line"><span class="comment">不可以。</span></span><br><span class="line"><span class="comment">JDK7以后可以。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行流程：</span></span><br><span class="line"><span class="comment">A:首先计算出表达式的值</span></span><br><span class="line"><span class="comment">B:其次，和case依次比较，一旦有对应的值，就会执行相应的语句，</span></span><br><span class="line"><span class="comment">  在执行的过程中，遇到break就会结束。</span></span><br><span class="line"><span class="comment">C:最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">需求：根据键盘录入的数值1，2，3，…7输出对应的星期一，星期二，星期三…星期日。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">A:键盘录入数据，用Scanner实现</span></span><br><span class="line"><span class="comment">B:对录入的数据进行判断，用switch实现</span></span><br><span class="line"><span class="comment">C:输出对应的结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项</span></span><br><span class="line"><span class="comment">A:case后面只能是常量，不能是变量，而且，多个case后面的值不能出现相同的</span></span><br><span class="line"><span class="comment">B:default可以省略吗</span></span><br><span class="line"><span class="comment">可以省略。一般不建议。除非判断的值是固定的。</span></span><br><span class="line"><span class="comment">C:break可以省略吗</span></span><br><span class="line"><span class="comment">可以。最后一个肯定是没有任何问题的。</span></span><br><span class="line"><span class="comment">中间的省略也是可以的，但是不建议，因为可能对我们想要的结果产生影响。</span></span><br><span class="line"><span class="comment">D:default的位置一定要在最后吗</span></span><br><span class="line"><span class="comment">不一定，可以在任何和case相对应的位置。</span></span><br><span class="line"><span class="comment">但是，这个时候，最好加上break。</span></span><br><span class="line"><span class="comment">E:switch语句的结束条件</span></span><br><span class="line"><span class="comment">a:遇到break。</span></span><br><span class="line"><span class="comment">b:执行到程序的末尾</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitchDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//键盘录入数据</span></span><br><span class="line">System.out.println(<span class="string">"请输入一个数据(1-7)："</span>);</span><br><span class="line"><span class="keyword">int</span> week = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//用switch语句实现</span></span><br><span class="line"><span class="keyword">switch</span>(week) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">System.out.println(<span class="string">"星期一"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">System.out.println(<span class="string">"星期二"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">System.out.println(<span class="string">"星期三"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">System.out.println(<span class="string">"星期四"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">System.out.println(<span class="string">"星期五"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">System.out.println(<span class="string">"星期六"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">System.out.println(<span class="string">"星期日"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">"你输入的数据有误"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    循环结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for和while的区别：</span></span><br><span class="line"><span class="comment">使用区别：控制条件语句所控制的那个变量，在for循环结束后，就不能再被访问到了，</span></span><br><span class="line"><span class="comment">  而while循环结束还可以继续使用，如果你想继续使用，就用while，否则推荐使用for。</span></span><br><span class="line"><span class="comment">  原因是for循环结束，该变量就从内存中消失，能够提高内存的使用效率。</span></span><br><span class="line"><span class="comment">场景区别：</span></span><br><span class="line"><span class="comment">for循环适合针对一个范围判断进行操作</span></span><br><span class="line"><span class="comment">水仙花</span></span><br><span class="line"><span class="comment">while循环适合判断次数不明确操作</span></span><br><span class="line"><span class="comment">吃葡萄</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhileDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&lt;<span class="number">10</span>) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(x+<span class="string">"---"</span>);</span><br><span class="line">System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;<span class="number">10</span>; y++) &#123;</span><br><span class="line">System.out.println(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(y+"---");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">do...while格式：</span></span><br><span class="line"><span class="comment">do &#123;</span></span><br><span class="line"><span class="comment">语句体;</span></span><br><span class="line"><span class="comment">&#125;while(条件表达式);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">变形格式：</span></span><br><span class="line"><span class="comment">初始化语句;</span></span><br><span class="line"><span class="comment">do &#123;</span></span><br><span class="line"><span class="comment">循环体语句;</span></span><br><span class="line"><span class="comment">控制条件语句;</span></span><br><span class="line"><span class="comment">&#125;while(判断条件语句);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for(初始化语句;判断条件语句;控制条件语句) &#123;</span></span><br><span class="line"><span class="comment"> 循环体语句;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoWhileDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int sum = 0;</span></span><br><span class="line"><span class="comment">for(int x=1; x&lt;=100; x++) &#123;</span></span><br><span class="line"><span class="comment">sum+=x;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println(sum);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//do...while</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">sum+=x;</span><br><span class="line">x++;</span><br><span class="line">&#125;<span class="keyword">while</span> (x&lt;=<span class="number">100</span>);</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：在控制台输出九九乘法表。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1*1=1</span></span><br><span class="line"><span class="comment">1*2=22*2=4</span></span><br><span class="line"><span class="comment">1*3=32*3=63*3=9</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">1*9=92*9=183*9=274*9=36...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">转移字符：</span></span><br><span class="line"><span class="comment">\ttab键的位置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForForDemo3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果我们把每一行看作一颗*</span></span><br><span class="line"><span class="comment">//那么这其实就是我们刚才的三角形</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for(int x=1; x&lt;=9; x++) &#123;</span></span><br><span class="line"><span class="comment">for(int y=1; y&lt;=x; y++) &#123;</span></span><br><span class="line"><span class="comment">System.out.print("*"+"\t");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//接下来，我们要把*替换为表达式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;=<span class="number">9</span>; x++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">1</span>; y&lt;=x; y++) &#123;</span><br><span class="line">System.out.print(y+<span class="string">"*"</span>+x+<span class="string">"="</span>+(x*y)+<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DAY004"><a href="#DAY004" class="headerlink" title="DAY004"></a>DAY004</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/xuexi/004DAY.jpg" alt=""></p><h4 id="循环语句-掌握"><a href="#循环语句-掌握" class="headerlink" title="循环语句(掌握)"></a>循环语句(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="number">1</span>)<span class="keyword">for</span>循环</span><br><span class="line"><span class="keyword">for</span>(初始化表达式;条件表达式;控制条件表达式)&#123;</span><br><span class="line">循环体;</span><br><span class="line">&#125;</span><br><span class="line">执行流程：</span><br><span class="line">A:首先执行初始化表达式</span><br><span class="line">B:其次执行条件表达式，看其返回值</span><br><span class="line">如果是<span class="keyword">true</span>，就继续</span><br><span class="line">如果是<span class="keyword">false</span>，就结束循环</span><br><span class="line">C:执行循环体;</span><br><span class="line">D:执行控制条件表达式</span><br><span class="line">E:回到B</span><br><span class="line">(<span class="number">2</span>)<span class="keyword">while</span>循环</span><br><span class="line">基本格式：</span><br><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">变形：</span><br><span class="line">初始化表达式;</span><br><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">循环体;</span><br><span class="line">控制条件表达式;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="number">3</span>)<span class="keyword">do</span>...<span class="keyword">while</span>循环(理解)</span><br><span class="line">基本格式：</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式);</span><br><span class="line"></span><br><span class="line">变形:</span><br><span class="line">初始化表达式;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">循环体;</span><br><span class="line">控制条件表达式;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式);</span><br><span class="line">(<span class="number">4</span>)三种循环的区别</span><br><span class="line">A:<span class="keyword">do</span>...<span class="keyword">while</span>至少执行一次循环体，而其他两种循环都是先判断在执行。</span><br><span class="line">B:<span class="keyword">while</span>和<span class="keyword">for</span>循环是可以等价转换的。在使用的时候，优先选择<span class="keyword">for</span>。</span><br><span class="line">规则：</span><br><span class="line">a:如果控制条件表达式控制的那个变量，后面还要使用，只能使用<span class="keyword">while</span></span><br><span class="line">b:<span class="keyword">for</span>适合范围的取值，<span class="keyword">while</span>适合次数不明确的操作</span><br><span class="line">(<span class="number">5</span>)注意事项：</span><br><span class="line">死循环：</span><br><span class="line"><span class="keyword">for</span>(;;)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;&#125;</span><br><span class="line">(<span class="number">6</span>)案例：</span><br><span class="line">A:输出<span class="number">10</span>次HelloWorld</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">10</span>; x++) &#123;</span><br><span class="line">System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">&#125;</span><br><span class="line">B:输出<span class="number">1</span>-<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;=<span class="number">10</span>; x++) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">C:输出<span class="number">10</span>-<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">10</span>; x&gt;<span class="number">0</span>; x--) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">D:求<span class="number">1</span>-<span class="number">10</span>的和</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;=<span class="number">10</span>; x++) &#123;</span><br><span class="line">sum += x;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">E:求<span class="number">1</span>-<span class="number">100</span>的偶数和(奇数自己写)</span><br><span class="line"><span class="comment">//方式1：</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;=<span class="number">100</span>; x+=<span class="number">2</span>) &#123;</span><br><span class="line">sum += x;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2：</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;=<span class="number">100</span>; x++) &#123;</span><br><span class="line"><span class="keyword">if</span>(x%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">sum += x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">F:输出水仙花的数</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">100</span>; x&lt;<span class="number">1000</span>; x++) &#123;</span><br><span class="line"><span class="keyword">int</span> ge = x%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> shi = x/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> bai = x/<span class="number">10</span>/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x == (ge*ge*ge+shi*shi*shi+bai*bai*bai)) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">G:统计水仙花的个数</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">100</span>; x&lt;<span class="number">1000</span>; x++) &#123;</span><br><span class="line"><span class="keyword">int</span> ge = x%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> shi = x/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> bai = x/<span class="number">10</span>/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x == (ge*ge*ge+shi*shi*shi+bai*bai*bai)) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br><span class="line">H:输出满足条件的<span class="number">5</span>位数</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">10000</span>; x&lt;<span class="number">100000</span>; x++) &#123;</span><br><span class="line"><span class="keyword">int</span> ge = x%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> shi = x/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> bai = x/<span class="number">10</span>/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> qian = x/<span class="number">10</span>/<span class="number">10</span>/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> wan = x/<span class="number">10</span>/<span class="number">10</span>/<span class="number">10</span>/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((ge==wan) &amp;&amp; (shi==qian) &amp;&amp; (bai==ge+shi+qian+wan)) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">I:统计满足条件的数据</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">1000</span>; x++) &#123;</span><br><span class="line"><span class="keyword">if</span>(x%<span class="number">3</span>==<span class="number">2</span> &amp;&amp; x%<span class="number">5</span>==<span class="number">3</span> &amp;&amp; x%<span class="number">7</span>==<span class="number">2</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br><span class="line">J:折叠次数</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> end = <span class="number">884800</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(start&lt;=end) &#123;</span><br><span class="line">count++;</span><br><span class="line"></span><br><span class="line">start*=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(count);</span><br><span class="line">K:小芳存钱的题目，自己把代码看懂即可。</span><br></pre></td></tr></table></figure><h4 id="控制跳转语句-掌握"><a href="#控制跳转语句-掌握" class="headerlink" title="控制跳转语句(掌握)"></a>控制跳转语句(掌握)</h4><ol><li><p>break:中断</p><pre><code>    A:场景    switch    循环语句中B:使用    退出单层循环    退出多层循环(带标签的使用)</code></pre></li><li><p>continue:继续</p><pre><code>    A:场景    循环语句中B:使用    退出单层循环    退出多层循环(带标签的使用)break和continue的区别：break:退出整个循环continue:退出一次循环，进行下一次</code></pre></li><li><p>return:返回</p><pre><code>返回，让方法结束。其实在void类型的方法，最后也有一个return。</code></pre><p> 只不过是：reutrn;</p><p> . 在控制台输出多少次：    </p><pre><code>&quot;Java基础班&quot;</code></pre></li></ol><h4 id="方法-掌握"><a href="#方法-掌握" class="headerlink" title="方法(掌握)"></a>方法(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法：完成特定功能的代码块</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">修饰符 返回值类型 方法名(参数类型 参数名1，参数类型 参数名2…) &#123;</span></span><br><span class="line"><span class="comment">方法体;</span></span><br><span class="line"><span class="comment">return 返回值;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">修饰符：public static</span></span><br><span class="line"><span class="comment">返回值类型：功能最终的值的数据类型</span></span><br><span class="line"><span class="comment">方法名：是为了方便调用而起的一个名字</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">形式参数：用于接受实际参数的变量</span></span><br><span class="line"><span class="comment">实际参数：实际参与运算的数据</span></span><br><span class="line"><span class="comment">方法体：完成特定功能的代码</span></span><br><span class="line"><span class="comment">return 返回值：通过return把结果返回给调用者</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">我们虽然知道了方法的格式，那么我们该如何写一个方法呢?</span></span><br><span class="line"><span class="comment">两个明确：</span></span><br><span class="line"><span class="comment">A:返回值类型</span></span><br><span class="line"><span class="comment">结果的数据类型</span></span><br><span class="line"><span class="comment">B:参数列表</span></span><br><span class="line"><span class="comment">有几个参数参加，并且每个参数的数据类型是什么</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">需求：求两个数据之和的案例</span></span><br><span class="line"><span class="comment">A:我没有说数据的类型，默认int类型。</span></span><br><span class="line"><span class="comment">B:求两个数据的和</span></span><br><span class="line"><span class="comment">说明有两个参数参加，并且默认都是int类型</span></span><br><span class="line"><span class="comment">C:两个int类型相加的结果是什么类型呢?</span></span><br><span class="line"><span class="comment">是int类型，所以返回值类型这里是int类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">方法的执行特点：</span></span><br><span class="line"><span class="comment">不调用不执行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">有明确返回值的方法的调用：</span></span><br><span class="line"><span class="comment">A:单独调用，没有意义。</span></span><br><span class="line"><span class="comment">B:输出调用，不是很好，因为我们可能需要针对结果还要进行其他的操作。</span></span><br><span class="line"><span class="comment">C:赋值调用，推荐方式。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">方法的注意事项：</span></span><br><span class="line"><span class="comment">A:方法不调用不执行</span></span><br><span class="line"><span class="comment">B:方法与方法是平级关系，不能嵌套定义</span></span><br><span class="line"><span class="comment">C:方法定义的时候参数之间用逗号隔开</span></span><br><span class="line"><span class="comment">D:方法调用的时候不用在传递数据类型</span></span><br><span class="line"><span class="comment">可以传递变量，也可以常量。就是不能加数据类型</span></span><br><span class="line"><span class="comment">E:如果方法有明确的返回值，一定要有return带回一个值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义两个变量</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单独调用</span></span><br><span class="line"><span class="comment">//sum(x,y);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出调用</span></span><br><span class="line">System.out.println(sum(x,y));</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值调用</span></span><br><span class="line"><span class="keyword">int</span> result = sum(x,y);</span><br><span class="line"><span class="comment">//result进行操作</span></span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果我自己要想写一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = a + b;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DAY005"><a href="#DAY005" class="headerlink" title="DAY005"></a>DAY005</h3><h4 id="方法重载-理解"><a href="#方法重载-理解" class="headerlink" title="方法重载(理解)"></a>方法重载(理解)</h4><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法重载：</span></span><br><span class="line"><span class="comment">在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。</span></span><br><span class="line"><span class="comment">和返回值类型无关。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//需求：请写一个功能，实现两个数据的求和</span></span><br><span class="line">System.out.println(sum(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：请写一个功能，实现三个数据的求和</span></span><br><span class="line"><span class="comment">//System.out.println(sum2(10,20,30));</span></span><br><span class="line">System.out.println(sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(sum(<span class="number">1.5</span>,<span class="number">2.5</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public static int sum2(int a,int b,int c) &#123;</span></span><br><span class="line"><span class="comment">return a + b + c;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//方法的嵌套调用</span></span><br><span class="line"><span class="comment">//return sum(sum(a,b),c);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//由于方法名要表达的其实是该方法的作用</span></span><br><span class="line"><span class="comment">//所以，sum2这个名字不好，还是要用sum 比较好</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一维数组-掌握"><a href="#一维数组-掌握" class="headerlink" title="一维数组(掌握)"></a>一维数组(掌握)</h4><ol><li><p>数组:存储同一种数据类型的多个元素的集合</p><pre><code>    每个元素都有编号，从0开始。最大编号是数组的长度-1</code></pre></li><li><p>数组的格式：</p><pre><code>    A:数据类型[] 数组名;B:数据类型 数组名[];</code></pre></li><li><p>数组的初始化：</p><pre><code>    A:动态初始化 只给长度，不给元素    `int[] arr = new int[3];`B:静态初始化 不给长度，给元素    `int[] arr = new int[]{1,2,3};`    `简化版：int[] arr = {1,2,3};`</code></pre></li><li><p>java中的内存分配</p><pre><code>    A:栈 存储局部变量B:堆 new出来的C:方法区D:本地方法区E:寄存器</code></pre></li><li><p>两个常见小问题</p><pre><code>    A:数组越界B:空指针异常</code></pre><p> . 数组常见操作    获取数组长度：数组名.length</p><pre><code>    A:数组遍历B:获取最值C:数组反转D:查表法E:查找指定元素第一次出现的索引</code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组：存储同一种数据类型的多个元素的集合。(也可以称为容器)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数组的定义格式：</span></span><br><span class="line"><span class="comment">格式1：数据类型[] 数组名;</span></span><br><span class="line"><span class="comment">int[] arr;</span></span><br><span class="line"><span class="comment">格式2：数据类型 数组名[];</span></span><br><span class="line"><span class="comment">int arr[];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">推荐方式1。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">现在的数组没有元素，使用是没有意义的。</span></span><br><span class="line"><span class="comment">接下来，我们要对数组进行初始化。</span></span><br><span class="line"><span class="comment">那么，我们如何对数组进行初始化呢?</span></span><br><span class="line"><span class="comment">动态初始化：初始化时只指定数组长度，由系统为数组分配初始值。</span></span><br><span class="line"><span class="comment">静态初始化：初始化时指定每个数组元素的初始值，由系统决定数组长度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">动态初始化：</span></span><br><span class="line"><span class="comment">数据类型[] 数组名 = new 数据类型[数组长度];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//按照动态初始化数组的格式，我们来定义一个存储3个int类型元素的数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">左边：</span></span><br><span class="line"><span class="comment">int:说明数组中的元素的数据类型。</span></span><br><span class="line"><span class="comment">[]:说明这是一个数组</span></span><br><span class="line"><span class="comment">arr:数组的名称</span></span><br><span class="line"><span class="comment">右边：</span></span><br><span class="line"><span class="comment">new:为实体(对象)开辟内存空间</span></span><br><span class="line"><span class="comment">Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">int:说明数组中的元素的数据类型。</span></span><br><span class="line"><span class="comment">[]:说明这是一个数组</span></span><br><span class="line"><span class="comment">3:说明的是数组中的元素个数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我们如何获取里面的值呢?</span></span><br><span class="line"><span class="comment">//数组名称</span></span><br><span class="line">System.out.println(arr); <span class="comment">//[I@778b3fee 地址值</span></span><br><span class="line"><span class="comment">//如何获取元素值呢?</span></span><br><span class="line"><span class="comment">//数组为每个元素分配了一个编号，这个编号的专业叫法：索引。</span></span><br><span class="line"><span class="comment">//而且是从0开始编号的。也就是说数组的最大编号是长度-1。</span></span><br><span class="line"><span class="comment">//有了编号以后，我们就可以通过数组名和编号的配合取得数组元素</span></span><br><span class="line"><span class="comment">//格式：数组名[编号];</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//0</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//0</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); <span class="comment">//0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">静态初始化格式：</span></span><br><span class="line"><span class="comment">数据类型[] 数组名 = new 数据类型[]&#123;元素1,元素2,…&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">简化版：</span></span><br><span class="line"><span class="comment">数据类型[] 数组名 =&#123;元素1,元素2,…&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo5</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个数组</span></span><br><span class="line"><span class="comment">//int[] arr = new int[]&#123;1,2,3&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//简化后</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(arr);</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组操作常见的两个小问题:</span></span><br><span class="line"><span class="comment">A:数组索引越界</span></span><br><span class="line"><span class="comment">ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="comment">因为我们访问了不存在的索引。</span></span><br><span class="line"><span class="comment">B:空指针异常</span></span><br><span class="line"><span class="comment">NullPointerException</span></span><br><span class="line"><span class="comment">因为数组已经不再指向堆内存，所以就不能再去访问堆内存的元素了。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo6</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(arr[3]);</span></span><br><span class="line"></span><br><span class="line">arr = <span class="keyword">null</span>; <span class="comment">//把arr指向堆内存给去掉了，arr没有指向了。</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二维数组-理解"><a href="#二维数组-理解" class="headerlink" title="二维数组(理解)"></a>二维数组(理解)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">二维数组：元素为一维数组的数组。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">定义格式1：</span></span><br><span class="line"><span class="comment">数据类型[][] 变量名 = new 数据类型[m][n];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">m:m表示这个二维数组有多少个一维数组</span></span><br><span class="line"><span class="comment">n:n表示每一个一维数组的元素个数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">变形：</span></span><br><span class="line"><span class="comment">数据类型 变量名[][] = new 数据类型[m][n];</span></span><br><span class="line"><span class="comment">数据类型[] 变量名[] = new 数据类型[m][n];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int[] x,y[];</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array2Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个二维数组</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//表示arr这个二维数组有三个元素</span></span><br><span class="line"><span class="comment">//每个元素是一个一维数组</span></span><br><span class="line"><span class="comment">//每一个一维数组有2个元素</span></span><br><span class="line"></span><br><span class="line">System.out.println(arr); <span class="comment">//[[I@778b3fee</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//[I@57125f92</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如何输出元素呢?</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义格式2：</span></span><br><span class="line"><span class="comment">数据类型[][] 变量名 = new 数据类型[m][];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">m:m表示这个二维数组有多少个一维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array2Demo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个数组</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line"><span class="comment">//这里我们仅仅知道这个二维数组有3个一维数组</span></span><br><span class="line"><span class="comment">//但是，每个一维数组有几个元素，我们是不知道的</span></span><br><span class="line"></span><br><span class="line">System.out.println(arr); <span class="comment">//[[I@7d3598c3</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//null</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//null</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义格式2：</span></span><br><span class="line"><span class="comment">数据类型[][] 变量名 = new 数据类型[][]&#123;&#123;元素…&#125;,&#123;元素…&#125;,&#123;元素…&#125;&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">变形格式：</span></span><br><span class="line"><span class="comment">数据类型[][] 变量名 = &#123;&#123;元素…&#125;,&#123;元素…&#125;,&#123;元素…&#125;&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array2Demo3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="comment">//int[][] arr = &#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125;&#125;;</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">8</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(arr);</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="两个思考题"><a href="#两个思考题" class="headerlink" title="两个思考题"></a>两个思考题</h4><ol><li>java参数传递问题</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">看程序写结果，并总结基本类型和引用类型参数的传递问题(题目在备注部分)</span></span><br><span class="line"><span class="comment">基本类型：形式参数的改变对实际参数没有影响。</span></span><br><span class="line"><span class="comment">引用类型：形式参数的改变直接影响实际参数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">java中有没有引用传递?</span></span><br><span class="line"><span class="comment">java中只有值传递。</span></span><br><span class="line"><span class="comment">地址值也是一个值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">"a:"</span>+a+<span class="string">",b:"</span>+b); <span class="comment">//a:10,b:20</span></span><br><span class="line">change(a,b);</span><br><span class="line">System.out.println(<span class="string">"a:"</span>+a+<span class="string">",b:"</span>+b); <span class="comment">//a:?,b:?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">change(arr);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>  <span class="comment">//a=10,b=20</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"a:"</span>+a+<span class="string">",b:"</span>+b); <span class="comment">//a:10,b:20</span></span><br><span class="line">a = b; <span class="comment">//a=20;</span></span><br><span class="line">b = a + b; <span class="comment">//b=40;</span></span><br><span class="line">System.out.println(<span class="string">"a:"</span>+a+<span class="string">",b:"</span>+b); <span class="comment">//a:20,b:40</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] arr)</span> <span class="comment">//arr = &#123;1,2,3,4,5&#125;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果是偶数，数据变为以前的2倍。</span></span><br><span class="line"><span class="keyword">if</span>(arr[x]%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">arr[x]*=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;1,4,3,8,5&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        java中只有值传递。因为地址值也是一个值。</p><ol><li><p>数据加密问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">某个公司采用公用电话传递数据信息，数据是小于8位的整数，为了确保安全，</span></span><br><span class="line"><span class="comment">在传递过程中需要加密，加密规则如下：</span></span><br><span class="line"><span class="comment">首先将数据倒序，然后将每位数字都加上5，再用和除以10的余数代替该数字，</span></span><br><span class="line"><span class="comment">最后将第一位和最后一位数字交换。 请任意给定一个小于8位的整数，</span></span><br><span class="line"><span class="comment">然后，把加密后的结果在控制台打印出来。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">A:数据是小于8位的整数</span></span><br><span class="line"><span class="comment">数据是变化的。(不以0开头)</span></span><br><span class="line"><span class="comment">B:加密规则</span></span><br><span class="line"><span class="comment">假设数据为：123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">首先将数据倒序</span></span><br><span class="line"><span class="comment">654321</span></span><br><span class="line"><span class="comment">然后将每位数字都加上5，再用和除以10的余数代替该数字</span></span><br><span class="line"><span class="comment">109876</span></span><br><span class="line"><span class="comment">最后将第一位和最后一位数字交换</span></span><br><span class="line"><span class="comment">609871</span></span><br><span class="line"><span class="comment">C:输出结果</span></span><br><span class="line"><span class="comment">609871</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JiaMiDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//123456</span></span><br><span class="line"><span class="comment">//int[] arr = &#123;1,2,3,4,5,6&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数据</span></span><br><span class="line"><span class="keyword">int</span> number = <span class="number">123456</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得一个数据的任意位上的值</span></span><br><span class="line"><span class="comment">//6,5,4,3,2,1</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">arr[0] = number%10;</span></span><br><span class="line"><span class="comment">arr[1] = number/10%10;</span></span><br><span class="line"><span class="comment">arr[2] = number/10/10%10;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一步</span></span><br><span class="line"><span class="comment">//定义一个索引变量</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(number&gt;<span class="number">0</span>) &#123;</span><br><span class="line">arr[index]  = number%<span class="number">10</span>; <span class="comment">//arr[0]=6,arr[1]=5,arr[2]=4,arr[3]=3,arr[4]=2,arr[5]=1</span></span><br><span class="line">number/=<span class="number">10</span>; <span class="comment">//number=12345,number=1234,number=123,number=12,number=1,number=0</span></span><br><span class="line">index++; <span class="comment">//index=1,index=2,index=3,index=4,index=5,index=6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;index; x++) &#123;</span><br><span class="line">System.out.print(arr[x]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;index; x++) &#123;</span><br><span class="line">arr[x] += <span class="number">5</span>;</span><br><span class="line">arr[x] %= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;index; x++) &#123;</span><br><span class="line">System.out.print(arr[x]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步</span></span><br><span class="line"><span class="keyword">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">arr[<span class="number">0</span>] = arr[index-<span class="number">1</span>];</span><br><span class="line">arr[index-<span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;index; x++) &#123;</span><br><span class="line">System.out.print(arr[x]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A:把实现的代码改进为功能实现</span></span><br><span class="line"><span class="comment">B:键盘录入版</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JiaMiDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//键盘录入数据</span></span><br><span class="line">System.out.println(<span class="string">"请输入数据(小于8位的整数)："</span>);</span><br><span class="line"><span class="keyword">int</span> number = sc.nextInt();</span><br><span class="line"></span><br><span class="line">jiaMi(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">jiaMi</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一步</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(number&gt;<span class="number">0</span>) &#123;</span><br><span class="line">arr[index++] = number%<span class="number">10</span>;</span><br><span class="line">number /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;index; x++) &#123;</span><br><span class="line">arr[x] += <span class="number">5</span>;</span><br><span class="line">arr[x] %= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步</span></span><br><span class="line"><span class="keyword">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">arr[<span class="number">0</span>] = arr[index-<span class="number">1</span>];</span><br><span class="line">arr[index-<span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;index; x++) &#123;</span><br><span class="line">System.out.print(arr[x]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h3 id="DAY006"><a href="#DAY006" class="headerlink" title="DAY006"></a>DAY006</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/xuexi/006DAY.jpg" alt=""></p><h4 id="面向对象："><a href="#面向对象：" class="headerlink" title="面向对象："></a>面向对象：</h4><p>​    面向对象是基于面向过程的编程思想</p><ul><li>面向过程：自己一步步的完成操作，强调的是过程。</li><li>面向对象：调用别人的操作，强调的是结果。</li></ul><ol><li><p>面向对象的思想特点：</p><pre><code>A:是一种更符合我们思想习惯的思想</code></pre><p> B:可以将复杂的事情简单化<br> C:将我们从执行者变成了指挥者</p><pre><code>角色发生了转换</code></pre></li><li><p>举例：</p></li></ol><p>A:洗衣服</p><ul><li><p>面向过程：把盆子接水,放洗衣粉–&gt;把衣服扔进去浸泡–&gt;用手揉搓衣服–&gt;漂洗衣服–&gt;拧干–&gt;拿衣架晾起来</p></li><li><p>面向对象：把衣服扔到洗衣机，放洗衣粉,按下启动即可–&gt;拿衣架晾起来</p><p>B:吃饭</p></li><li><p>面向过程：去超市买菜,买米–&gt;洗菜,洗米–&gt;切菜,做饭–&gt;炒菜–&gt;端菜,盛饭–&gt;开吃</p></li><li><p>面向对象：去饭店–&gt;调用服务员的记菜功能–&gt;调用厨师的炒菜功能–&gt;调用服务员的端菜功能–&gt;开吃–&gt;付账</p><p>可以找一个对象帮我们做这些事情。</p><p>C:买电脑<br>面向过程：查阅资料–&gt;坐公交–&gt;到赛格电脑城–&gt;各家比较–&gt;选中自己喜爱的并讨价还价–&gt;回家<br>面向对象：查阅资料–&gt;京东–&gt;货到付账</p><p>写代码举例：</p><pre><code>需求：把大象装进冰箱步骤：    A:打开冰箱门    B:塞进大象    C:关闭冰箱门</code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">A:面向过程</span><br><span class="line">a:打开冰箱门</span><br><span class="line">b:塞进大象</span><br><span class="line">c:关闭冰箱门</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//System.out.println("打开冰箱门");</span></span><br><span class="line"><span class="comment">//System.out.println("塞进大象");</span></span><br><span class="line"><span class="comment">//System.out.println("关闭冰箱门");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可能打开冰箱门的操作需要做多次</span></span><br><span class="line"><span class="comment">//并且，打开冰箱门这个功能的代码比较多</span></span><br><span class="line"><span class="comment">//这个时候，其实我们应该用方法改进</span></span><br><span class="line"><span class="comment">//调用功能</span></span><br><span class="line">open();</span><br><span class="line">in();</span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//open();</span></span><br><span class="line"><span class="comment">//open();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"打开冰箱门"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"塞进大象"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"关闭冰箱门"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B:面向对象</span><br><span class="line">要想做到面向对象，请参照我的三句话：</span><br><span class="line">a:分析有哪些类存在</span><br><span class="line">UML(统一建模语言) 名词提取法</span><br><span class="line">b:分析每个类有哪些功能</span><br><span class="line">c:分析类与类的关系</span><br><span class="line"></span><br><span class="line">分析我们的问题：</span><br><span class="line">把大象装进冰箱</span><br><span class="line"></span><br><span class="line">a:分析有哪些类存在</span><br><span class="line">大象</span><br><span class="line">冰箱</span><br><span class="line">测试类(带main方法的那个类)</span><br><span class="line">b:分析每个类有哪些功能</span><br><span class="line">大象:进去</span><br><span class="line">冰箱:打开,关闭</span><br><span class="line">测试类:main</span><br><span class="line">c:分析类与类的关系</span><br><span class="line">在测试类中调用冰箱类和大象类的功能</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"><span class="class"><span class="keyword">class</span> 大象 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"塞进大象"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 冰箱 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"打开冰箱门"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"关闭冰箱门"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 测试类 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">冰箱的open();</span><br><span class="line">大象的in();</span><br><span class="line">冰箱的close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>学完面向对象：</strong><br>    以后我们在完成一个需求的时候，请先找是否有对象完成了这个功能，有，我们就直接使用即可。<br>    如果没有，我们就自己定义一个类，完成功能，将来还可以给别人用。</p><h4 id="类与对象-掌握"><a href="#类与对象-掌握" class="headerlink" title="类与对象(掌握)"></a>类与对象(掌握)</h4><p>我们学习编程语言，是为了把现实世界的事物给表达出来，实现信息化处理。</p><p>我们要想通过编程语言来描述事物，首先要知道，事物是如何表达的：</p><pre><code>1. 事物：    属性    该事物的描述信息(外在特征)    行为    该事物能够做什么(内在行为)</code></pre><p>我们学习的是java语言，而java语言最基本的单位是类。<br>所以，我们要把事物通过类来体现。</p><pre><code>2. 事物：    属性    该事物的描述信息(外在特征)    行为    该事物能够做什么(内在行为)</code></pre><p>​    3. 类：<br>        成员变量        该事物的描述信息(外在特征)<br>        成员方法        该事物能够做什么(内在行为)</p><p>类：是一组相关的属性和行为的集合<br>对象：是该类事物的具体体现</p><p>举例：<br>    学生是类<br>    张三是对象</p><h4 id="类的组成-掌握"><a href="#类的组成-掌握" class="headerlink" title="类的组成(掌握)"></a>类的组成(掌握)</h4><p>​    (1)成员变量<br>        其实就是变量，只不过定义在类中，方法外，并且可以不用初始化。<br>    (2)成员方法<br>        其实就是方法，只不过不需要static了<br>    (3)案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一步：分析事物</span></span><br><span class="line"><span class="comment">手机事物：</span></span><br><span class="line"><span class="comment">属性：品牌，价格，颜色</span></span><br><span class="line"><span class="comment">行为：打电话，发短信</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二步：把事物转换为类</span></span><br><span class="line"><span class="comment">手机类：</span></span><br><span class="line"><span class="comment">成员变量：品牌，价格，颜色</span></span><br><span class="line"><span class="comment">成员方法：打电话，发短信</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第三步：把类用英文体现</span></span><br><span class="line"><span class="comment">Phone:</span></span><br><span class="line"><span class="comment">成员变量：brand，price，color</span></span><br><span class="line"><span class="comment">成员方法：call(String name)，sendMessage()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第四步：写代码体现</span></span><br><span class="line"><span class="comment">成员变量：其实就是一个变量，只不过定义在类中方法外，并且也可以不给初始化值。</span></span><br><span class="line"><span class="comment">成员方法：其实就是一个方法，只不过不需要static了。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//这是我的手机类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"><span class="comment">//品牌</span></span><br><span class="line">String brand;</span><br><span class="line"><span class="comment">//价格</span></span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line"><span class="comment">//颜色</span></span><br><span class="line">String color;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打电话的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"给"</span>+name+<span class="string">"打电话"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发短信的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"群发短信"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类的使用-掌握"><a href="#类的使用-掌握" class="headerlink" title="类的使用(掌握)"></a>类的使用(掌握)</h4><p>​    (1)创建对象<br>        格式：类名 对象名 = new 类名();<br>    (2)使用成员<br>        成员变量：对象名.变量名;<br>        成员方法：对象名.方法名(…);</p><h4 id="成员变量和局部变量的区别-理解"><a href="#成员变量和局部变量的区别-理解" class="headerlink" title="成员变量和局部变量的区别(理解)"></a>成员变量和局部变量的区别(理解)</h4><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">成员变量和局部变量的区别：</span></span><br><span class="line"><span class="comment">A:在类中的位置不同</span></span><br><span class="line"><span class="comment">成员变量 类中方法外</span></span><br><span class="line"><span class="comment">局部变量 方法内或者方法声明上</span></span><br><span class="line"><span class="comment">B:在内存中的位置不同</span></span><br><span class="line"><span class="comment">成员变量 堆内存</span></span><br><span class="line"><span class="comment">局部变量 栈内存</span></span><br><span class="line"><span class="comment">C:生命周期不同</span></span><br><span class="line"><span class="comment">成员变量 随着对象的存在而存在，随着对象的消失而消失</span></span><br><span class="line"><span class="comment">局部变量 随着方法的调用而存在，随着方法的调用完毕而消失</span></span><br><span class="line"><span class="comment">D:初始化值不同</span></span><br><span class="line"><span class="comment">成员变量 有默认的初始化值</span></span><br><span class="line"><span class="comment">局部变量 没有默认的初始化值，必须先定义，赋值，才能使用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">如果有同名的变量，一般会采用就近原则。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableDemo</span> </span>&#123;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//局部变量</span></span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="comment">//System.out.println(y);</span></span><br><span class="line"></span><br><span class="line">VariableDemo vd = <span class="keyword">new</span> VariableDemo();</span><br><span class="line">System.out.println(vd.x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="形式参数问题-理解"><a href="#形式参数问题-理解" class="headerlink" title="形式参数问题(理解)"></a>形式参数问题(理解)</h4><p>​    (1)基本类型<br>        基本类型作为形式参数，需要的是该基本类型的值。<br>    (2)引用类型<br>        引用类型作为形式参数，需要的是该引用类型的地址值。(对象)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">匿名对象：没有名字的对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用场景：</span></span><br><span class="line"><span class="comment">A:调用方法,该方法仅仅被使用一次的时候适用。</span></span><br><span class="line"><span class="comment">B:作为实际参数传递</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义学生类，写一个love方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>  </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">love</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"学生喜欢放假"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Student s)</span> </span>&#123;</span><br><span class="line">s.love();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoNameObject</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="comment">Student s = new Student();</span></span><br><span class="line"><span class="comment">s.love();</span></span><br><span class="line"><span class="comment">s.love();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//匿名对象</span></span><br><span class="line"><span class="comment">new Student().love();</span></span><br><span class="line"><span class="comment">new Student().love();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有名字的情况</span></span><br><span class="line"><span class="comment">//StudentDemo sd = new StudentDemo();</span></span><br><span class="line"><span class="comment">//Student s = new Student();</span></span><br><span class="line"><span class="comment">//sd.test(s);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//没有名字的情况</span></span><br><span class="line"><span class="comment">//StudentDemo sd = new StudentDemo();</span></span><br><span class="line"><span class="comment">//sd.test(new Student());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不妨在来一步</span></span><br><span class="line"><span class="keyword">new</span> StudentDemo().test(<span class="keyword">new</span> Student());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匿名对象-理解"><a href="#匿名对象-理解" class="headerlink" title="匿名对象(理解)"></a>匿名对象(理解)</h4><p>​    (1)匿名对象：没有名字的对象。是对象的简化书写方式。<br>    (2)使用场景<br>        A:调用方法，仅仅只调用一次<br>        B:作为实际参数传递</p><h4 id="封装-掌握"><a href="#封装-掌握" class="headerlink" title="封装(掌握)"></a>封装(掌握)</h4><p>​    (1)隐藏实现细节，提供公共的访问方式<br>    (2)好处：<br>        A:隐藏实现细节，提供公共的访问方式<br>        B:提高了代码的复用性<br>        C:提高了代码的安全性<br>    (3)使用原则<br>        A:把成员变量隐藏<br>        B:给出该成员变量对应的公共访问方式</p><h4 id="private关键字-掌握"><a href="#private关键字-掌握" class="headerlink" title="private关键字(掌握)"></a>private关键字(掌握)</h4><p>​    (1)是一个权限修饰符<br>    (2)可以修饰类的成员(成员变量和成员方法)<br>    (3)仅仅在本类中可以访问<br>    (4)标准代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">name = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="this关键字-掌握"><a href="#this关键字-掌握" class="headerlink" title="this关键字(掌握)"></a>this关键字(掌握)</h4><p>​    (1)this：代表本类的对象<br>    (2)应用场景：<br>        解决了局部变量隐藏成员变量的问题。<br>        其他用法和super一起讲。<br>    (3)标准代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我们曾经说过，起名字，要做到见名知意，而现在的n和a都不是一个好的变量名称。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">由于变量在查找的时候，采用的是就近原则，所以，这个时候，就产生了问题。</span></span><br><span class="line"><span class="comment">本来想给成员变量赋值的，确赋值给了局部变量。</span></span><br><span class="line"><span class="comment">那么，我们该如何解决这个问题呢?</span></span><br><span class="line"><span class="comment">java针对这种情况，就提供了一个关键字：this</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">this：代表本类的对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">应用场景：</span></span><br><span class="line"><span class="comment">局部变量隐藏成员变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public void setName(String n) &#123;</span></span><br><span class="line"><span class="comment">name = n;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;  <span class="comment">//"林青霞"</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name; <span class="comment">//其实这里隐含了this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//输出成员变量的值</span></span><br><span class="line">System.out.println(s.getName()+<span class="string">"---"</span>+s.getAge());</span><br><span class="line"></span><br><span class="line"><span class="comment">//给成员变量赋值</span></span><br><span class="line">s.setName(<span class="string">"林青霞"</span>);</span><br><span class="line">s.setAge(<span class="number">28</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//再次输出成员变量的值</span></span><br><span class="line">System.out.println(s.getName()+<span class="string">"---"</span>+s.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DAY007"><a href="#DAY007" class="headerlink" title="DAY007"></a>DAY007</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/xuexi/007DAY.jpg" alt=""></p><h4 id="构造方法-掌握"><a href="#构造方法-掌握" class="headerlink" title="构造方法(掌握)"></a>构造方法(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造方法作用：给对象的数据进行初始化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">A:方法名与类名相同</span></span><br><span class="line"><span class="comment">B:没有返回值类型，连void都没有</span></span><br><span class="line"><span class="comment">C:没有具体的返回值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">构造方法的格式：</span></span><br><span class="line"><span class="comment">修饰符 类名(...) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">构造方法的注意事项：</span></span><br><span class="line"><span class="comment">A:如果你不提供构造方法，系统会给出默认无参构造方法</span></span><br><span class="line"><span class="comment">B:如果你提供了构造方法，系统将不再提供默认无参构造方法</span></span><br><span class="line"><span class="comment">这个时候，如果你还想继续使用无参构造方法，只能自己给出。</span></span><br><span class="line"><span class="comment">推荐：永远自己给出无参构造方法。</span></span><br><span class="line"><span class="comment">C:构造方法也是可以重载的</span></span><br><span class="line"><span class="comment">D:构造方法中可以有return语句吗?</span></span><br><span class="line"><span class="comment">可以。只不过是return;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是无参构造方法"</span>);</span><br><span class="line"><span class="comment">//return;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getXxx()/setXxx()方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示所有成员变量的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"姓名是："</span>+name+<span class="string">",年龄是："</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">s.show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">"林青霞"</span>);</span><br><span class="line">s2.show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Student s3 = <span class="keyword">new</span> Student(<span class="number">28</span>);</span><br><span class="line">s3.show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Student s4 = <span class="keyword">new</span> Student(<span class="string">"林青霞"</span>,<span class="number">28</span>);</span><br><span class="line">s4.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象的初始化过程-理解"><a href="#对象的初始化过程-理解" class="headerlink" title="对象的初始化过程(理解)"></a>对象的初始化过程(理解)</h4><ol><li><code>Student s = new Student();</code>做了哪些事情</li></ol><ul><li>A:加载Student.class文件进内存</li><li>B:在栈中为s开辟空间</li><li>C:在堆中为学生对象开辟空间</li><li>D:为学生对象的成员变量赋默认值</li><li>E:为学生对象的成员变量赋显示值</li><li>F:通过构造方法给成员变量赋值</li><li>G:对象构造完毕，把地址赋值给s变量</li></ul><h4 id="面向对象的练习-掌握"><a href="#面向对象的练习-掌握" class="headerlink" title="面向对象的练习(掌握)"></a>面向对象的练习(掌握)</h4><ul><li>(1)写一个类Demo,里面有一个求和功能。并测试。</li><li>(2)写一个长方形的类，里面有求周长和面积的功能。并测试。</li><li>(3)自己分析员工类，实现，并测试。</li><li>(4)自己写一个包含了加减乘除运算的类，并测试。</li></ul><h4 id="static关键字-掌握"><a href="#static关键字-掌握" class="headerlink" title="static关键字(掌握)"></a>static关键字(掌握)</h4><ul><li>(1)是一个状态修饰符。静态的意思</li><li>(2)它可以修饰成员变量和成员方法</li><li><p>(3)特点：</p><pre><code>    A:随着类的加载而加载B:优先于对象存在C:被所有对象共享    这也是判断我们是不是该使用静态的条件    举例：饮水机和水杯例子。D:可以通过类名调用    静态修饰的内容，可以通过类名调用，也可以通过对象名调用</code></pre></li><li><p>(4)方法访问特点</p><p>​        A:普通成员方法</p><p>​            可以访问静态成员变量，非静态成员变量，静态成员方法，非静态成员方法</p><p>​        B:静态成员方法</p><p>​            只能访问静态成员变量，静态成员方法</p><p>简记：静态只能访问静态</p><p>注意：</p><pre><code>静态中是不能有this的。先进内存的不能访问后进内存的。反之可以。</code></pre><p>​</p></li></ul><h4 id="静态成员变量和普通成员变量的区别-理解"><a href="#静态成员变量和普通成员变量的区别-理解" class="headerlink" title="静态成员变量和普通成员变量的区别(理解)"></a>静态成员变量和普通成员变量的区别(理解)</h4><p>​    (1)所属不同<br>        静态属于类的，称为类变量<br>        非静态属于对象的，称为对象变量，实例变量<br>    (2)内存空间不同<br>        静态在方法区的静态区<br>        非静态在堆内存<br>    (3)生命周期不同<br>        静态随着类的加载而加载，随着类的消失而消失<br>        非静态随着对象的创建而存在，随着对象的消失而消失<br>    (4)调用不同<br>        静态可以通过类名调用，也可以通过对象名调用。建议通过类名调用<br>        非静态只能通过对象名调用</p><h4 id="main方法是静态的-理解"><a href="#main方法是静态的-理解" class="headerlink" title="main方法是静态的(理解)"></a>main方法是静态的(理解)</h4><p>​    <code>public static void main(String[] args)</code></p><h4 id="制作帮助文档-了解"><a href="#制作帮助文档-了解" class="headerlink" title="制作帮助文档(了解)"></a>制作帮助文档(了解)</h4><p>​    (1)写代码<br>    (2)加文档注释<br>    (3)通过javadoc工具生成说明书</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为这个数组的工具类并没有使用非静态的成员。</span></span><br><span class="line"><span class="comment">//为了方便调用，我们就把这个方法改进为静态修饰的</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">制作一个说明书的过程：</span></span><br><span class="line"><span class="comment">A:写代码</span></span><br><span class="line"><span class="comment">B:加入文档注释</span></span><br><span class="line"><span class="comment">C:通过javadoc工具生成说明书</span></span><br><span class="line"><span class="comment">格式：javadoc -d 目录 -author -version ArrayTool.java</span></span><br><span class="line"><span class="comment">  javadoc -d doc -author -version ArrayTool.java</span></span><br><span class="line"><span class="comment">注意：javadoc: 错误 - 找不到可以文档化的公共或受保护的类。</span></span><br><span class="line"><span class="comment">说明类的权限不够大，用public修饰即可</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">56</span>,<span class="number">38</span>,<span class="number">91</span>,<span class="number">72</span>,<span class="number">40</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：遍历数组</span></span><br><span class="line"><span class="comment">//ArrayTool at = new ArrayTool();</span></span><br><span class="line"><span class="comment">//at.printArray(arr);</span></span><br><span class="line"></span><br><span class="line">ArrayTool.printArray(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：我要获取数组中的最大值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用帮助文档-掌握"><a href="#使用帮助文档-掌握" class="headerlink" title="使用帮助文档(掌握)"></a>使用帮助文档(掌握)</h4><ol><li>找到帮助文档，并打开帮助文档</li></ol><ol><li>找到显示，点击索引，看到输入框</li><li>在输入框里面输入你要查找的类，并回车即可Scanner</li></ol><ol><li><p>看类在哪个包下</p><pre><code>如果类在java.lang包下，是不需要导包的。</code></pre><p> 如果类不在java.lang包下，是需要导包的。</p><p> 格式：import java.util.Scanner;</p></li><li>看类的解释说明</li><li><p>看类的结构和说明书的匹配情况</p><p> 字段摘要    –    成员变量<br> 构造方法摘要    –    构造方法<br> 方法摘要    –    成员方法</p></li><li><p>看类的构造方法</p><pre><code>因为看懂了构造方法，我们就可以创建对象了。</code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Scanner</span><span class="params">(InputStream source)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">System:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> InputStream in; <span class="comment">//成员变量</span></span><br><span class="line"></span><br><span class="line">InputStream is = System.in;</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">不是所有的类都能看到构造方法。</span><br><span class="line">一般来说，没有构造方法的类的成员基本上都是静态的。</span><br></pre></td></tr></table></figure><ol><li><p>看类的方法</p><pre><code>`public int nextInt()`</code></pre></li></ol><p>左边：<br>    是否静态：说明该方法可以通过类名调用<br>    返回值类型：人家返回什么类型，你就用什么类型接收<br>右边：<br>    方法名称：方法名不能写错了，写错了就用不了了。<br>    参数列表：看参数的个数，以及参数的数据类型。<br>          人家要几个，你就给几个，人家要什么类型，你就给什么类型。</p><h4 id="学习Math类-掌握"><a href="#学习Math类-掌握" class="headerlink" title="学习Math类(掌握)"></a>学习Math类(掌握)</h4><p>​    (1)Math:针对数学进行运算的类<br>    (2)特点：没有构造方法，因为它的成员都是静态的<br>    (3)产生随机数：<br>        <code>public static double random(): 产生随机数，范围[0.0,1.0)</code><br>    (4)产生1-100之间的随机数<br>        <code>int number = (int)(Math.random()*100)+1;</code><br>    (5)猜数字小游戏案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：猜数字小游戏</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">A:系统产生一个1-100之间的随机数。</span></span><br><span class="line"><span class="comment">int number = (int)(Math.random()*100)+1;</span></span><br><span class="line"><span class="comment">B:键盘录入数据,用Scanner实现</span></span><br><span class="line"><span class="comment">C:用这两个数据进行比较</span></span><br><span class="line"><span class="comment">大提示大了</span></span><br><span class="line"><span class="comment">小提示小了</span></span><br><span class="line"><span class="comment">等恭喜你，猜中了</span></span><br><span class="line"><span class="comment">D:为了保证我们能够猜中，我们就加入循环，实现多次猜。直到猜中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuessNumberDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//系统产生一个1-100之间的随机数。</span></span><br><span class="line"><span class="keyword">int</span> number = (<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>)+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//键盘录入数据,用Scanner实现</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入一个数据：(1-100)"</span>);</span><br><span class="line"><span class="keyword">int</span> guessNumber = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//用这两个数据进行比较</span></span><br><span class="line"><span class="keyword">if</span>(guessNumber &gt; number) &#123;</span><br><span class="line">System.out.println(<span class="string">"你猜的数据"</span>+guessNumber+<span class="string">"大了"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(guessNumber &lt; number) &#123;</span><br><span class="line">System.out.println(<span class="string">"你猜的数据"</span>+guessNumber+<span class="string">"小了"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"恭喜你，猜中了"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码块-理解"><a href="#代码块-理解" class="headerlink" title="代码块(理解)"></a>代码块(理解)</h4><p>​    (1)在java中用{}起来的代码<br>    (2)分类：<br>        局部代码块：在方法中。限定变量生命周期，及早释放，提高内存使用率<br>        构造代码块：在类中方法外。<br>                把多个构造中的相同代码用一个构造代码块体现，每次创建对象都会自动调用。<br>        静态代码块：在类中方法外，用static修饰。<br>                对类中的数据进行初始化。仅仅执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">代码块：在Java中，使用&#123;&#125;括起来的代码被称为代码块。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">根据其位置和声明的不同，可以分为</span></span><br><span class="line"><span class="comment">局部代码块：在方法中出现；限定变量生命周期，及早释放，提高内存利用率</span></span><br><span class="line"><span class="comment">构造代码块：在类中方法外出现；</span></span><br><span class="line"><span class="comment">多个构造方法方法中相同的代码存放到一起，每次调用构造都执行，并且在构造方法前执行</span></span><br><span class="line"><span class="comment">静态代码块：在类中方法外出现，加了static修饰。</span></span><br><span class="line"><span class="comment">用于给类进行初始化，在加载的时候就执行，并且只执行一次。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//局部代码块</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Code &#123;</span></span><br><span class="line"><span class="comment">public void show() &#123;</span></span><br><span class="line"><span class="comment">//局部代码块</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int x = 10;</span></span><br><span class="line"><span class="comment">System.out.println(x);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//System.out.println(x);</span></span><br><span class="line"><span class="comment">//... 1000行,x在这1000行代码中没有被使用</span></span><br><span class="line"><span class="comment">int y = 100;</span></span><br><span class="line"><span class="comment">System.out.println(y);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造代码块</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Code &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//构造代码块</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">System.out.println("AAAAA"); </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public Code() &#123;</span></span><br><span class="line"><span class="comment">//System.out.println("AAAAA"); //假如这个代码的内容比较多，并且在每个构造中都会出现</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public Code(String s) &#123;</span></span><br><span class="line"><span class="comment">//System.out.println("AAAAA");</span></span><br><span class="line"><span class="comment">System.out.println(s);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态代码块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Code</span> </span>&#123;</span><br><span class="line"><span class="comment">//静态代码块</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"AAAAA"</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public Code() &#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public Code(String s) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(s);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodeDemo</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"BBBBB"</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Code c = <span class="keyword">new</span> Code();</span><br><span class="line"><span class="comment">//c.show();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Code c2 = new Code("hello");</span></span><br><span class="line">System.out.println(<span class="string">"CCCCC"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DAY008"><a href="#DAY008" class="headerlink" title="DAY008"></a>DAY008</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/xuexi/008DAY.jpg" alt=""></p><h4 id="继承-掌握"><a href="#继承-掌握" class="headerlink" title="继承(掌握)"></a>继承(掌握)</h4><p>​    (1)把多个类中相同的属性和行为提取出来，定义到一个类中，<br>       然后让这多个类和这一个类产生一个关系，这多个类就具备这一个类的属性和行为了。<br>       这种关系叫：继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java中的继承特点：</span></span><br><span class="line"><span class="comment">A:Java只支持单继承，不支持多继承。</span></span><br><span class="line"><span class="comment">B:Java支持多层继承(继承体系)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class C extends A,B &#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java中的继承注意事项：</span></span><br><span class="line"><span class="comment">A:子类只能继承父类所有非私有的成员(成员方法和成员变量)</span></span><br><span class="line"><span class="comment">B:子类不能继承父类的构造方法，但是可以通过super(后面讲)关键字去访问父类构造方法。</span></span><br><span class="line"><span class="comment">C:不要为了部分功能而去继承</span></span><br><span class="line"><span class="comment">class A &#123;</span></span><br><span class="line"><span class="comment">public void show()&#123;&#125;</span></span><br><span class="line"><span class="comment">public void show2()&#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class B extends A &#123;</span></span><br><span class="line"><span class="comment">//public void show()&#123;&#125;</span></span><br><span class="line"><span class="comment">public void show3()&#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">那么，我们什么时候考虑使用继承呢?</span></span><br><span class="line"><span class="comment">继承中类之间体现的是：”is a”的关系。</span></span><br><span class="line"><span class="comment">如果两个类满足这个关系：xxx is a yyy，那么他们就可以使用继承。</span></span><br><span class="line"><span class="comment">举例：类A和类B，如果类A is a 类B或者类B is a 类A 能念通过，就可以考虑使用继承。</span></span><br><span class="line"><span class="comment">      否则不可以。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Student,Person</span></span><br><span class="line"><span class="comment">Dog,Animal</span></span><br><span class="line"><span class="comment">Dog,Pig</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num2 = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建子类对象</span></span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line"><span class="comment">//System.out.println(z.num);</span></span><br><span class="line">System.out.println(z.num2);</span><br><span class="line"><span class="comment">//z.show();</span></span><br><span class="line">z.show2();</span><br><span class="line"></span><br><span class="line"><span class="comment">//看Fu行不行</span></span><br><span class="line"><span class="comment">//Fu f = new Fu();</span></span><br><span class="line"><span class="comment">//System.out.println(f.num);</span></span><br><span class="line"><span class="comment">//System.out.println(f.num2);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">继承间的成员变量关系：</span></span><br><span class="line"><span class="comment">名字不同：非常的简单，一看就知道使用的是谁。</span></span><br><span class="line"><span class="comment">名字相同：就近原则。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用变量的时候，会先找局部范围。</span></span><br><span class="line"><span class="comment">如果想直接使用成员变量，加关键字：this即可。</span></span><br><span class="line"><span class="comment">如果想直接使用父类的成员变量，加关键字：super即可。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">60</span>;</span><br><span class="line">System.out.println(age); <span class="comment">//局部范围</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.age); <span class="comment">//本类成员范围</span></span><br><span class="line">System.out.println(<span class="keyword">super</span>.age); <span class="comment">//父类成员范围</span></span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Son s = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="comment">//System.out.println(s.age);</span></span><br><span class="line"><span class="comment">//System.out.println(s.num);</span></span><br><span class="line"></span><br><span class="line">s.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">继承中的构造方法关系：</span></span><br><span class="line"><span class="comment">子类中所有的构造方法默认都会访问父类中空参数的构造方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">为什么呢?</span></span><br><span class="line"><span class="comment">因为子类会继承父类中的数据，可能还会使用父类的数据。</span></span><br><span class="line"><span class="comment">所以，子类初始化之前，一定要先完成父类数据的初始化。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">那么，我可不可以访问父亲的带参构造方法呢?</span></span><br><span class="line"><span class="comment">可以。通过super(...)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">A:每一个构造方法的第一条语句默认都是：super()</span></span><br><span class="line"><span class="comment">B:super(...)这样的形式在构造方法中只能出现一次。</span></span><br><span class="line"><span class="comment">C:如果父类没有无参构造方法，那么，我们只能</span></span><br><span class="line"><span class="comment">a:通过super去访问父类的带参构造方法。</span></span><br><span class="line"><span class="comment">b:通过this去访问本类的其他构造方法。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public Fu() &#123;</span></span><br><span class="line"><span class="comment">System.out.println("Fu()");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Fu</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//super();</span></span><br><span class="line"><span class="comment">//super("aaa");</span></span><br><span class="line"><span class="comment">//this("aaa");</span></span><br><span class="line">System.out.println(<span class="string">"zi()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="comment">//super();</span></span><br><span class="line"><span class="comment">//super(name);</span></span><br><span class="line"><span class="comment">//this();</span></span><br><span class="line">System.out.println(<span class="string">"world"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建子类对象</span></span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line">Zi z2 = <span class="keyword">new</span> Zi(<span class="string">"java"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">需求<span class="number">1</span>：写一个学生类，包含姓名和年龄</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getXxx()/setXxx()</span></span><br><span class="line">&#125;</span><br><span class="line">需求<span class="number">2</span>：写一个教师类，包含姓名和年龄</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getXxx()/setXxx()</span></span><br><span class="line">&#125;</span><br><span class="line">需求<span class="number">3</span>：写一个工人类，包含姓名和年龄</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getXxx()/setXxx()</span></span><br><span class="line">&#125;</span><br><span class="line">需求<span class="number">4</span>：...</span><br><span class="line"></span><br><span class="line">通过上面的代码，我们发现各个类中相同的东西比较多。</span><br><span class="line">并且，如果我们对每个类要添加或者删除相同的东西，也比较麻烦，</span><br><span class="line">因为我们要操作很多类。</span><br><span class="line">那么，我们就在想，有没有比较好的方式解决这个问题呢?</span><br><span class="line">如何解决呢?</span><br><span class="line">思想：我可以把这多个类中相同的内容给提前出来定义到类A中。</span><br><span class="line">      然后让这些类和A类产生一个关系，有了这个关系后，这些</span><br><span class="line">      类就具备了A类的成员。</span><br><span class="line">当然是可以的了，java提供了继承技术来解决这个问题。</span><br><span class="line"></span><br><span class="line">按照这种思想我们来改进代码：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getXxx()/setXxx()</span></span><br><span class="line">&#125;</span><br><span class="line">这个关系如何表达呢?</span><br><span class="line">格式：<span class="class"><span class="keyword">class</span> 子类名 <span class="keyword">extends</span> 父类名 </span>&#123;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">???</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">???</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">称呼：</span><br><span class="line">Person：父类，基类，超类</span><br><span class="line">Student,Teacher：子类，派生类</span><br></pre></td></tr></table></figure><ol><li><p>java中的继承的好处和弊端</p><pre><code>    A:好处        a:提高了代码的复用性    b:提高了代码的可维护性    c:让类与类之间产生了一个关系，是多态的前提B:弊端    让类与类的耦合增强了。这样一个类的改动会直接影响另一个类。</code></pre></li></ol><p>设计原则：高内聚，低耦合。</p><ol><li><p>java中的继承的注意事项：</p><pre><code>A:私有成员不能被继承</code></pre><p> B:构造方法不能被继承，想访问，通过super关键字<br> C:不能为了部分功能而去使用继承</p></li><li><p>继承中的成员关系：</p><pre><code>A:成员变量不同名：特别简单，一看就知道用的是谁。同名：就近原则    访问自己的用this    访问父亲的用super</code></pre><p> B:构造方法</p><pre><code>a:子类的所有构造方法默认都是访问父类的无参构造方法b:如果父类没有无参构造方法，怎么办呢?    通过super(...)访问父类带参构造方法    通过this(...)访问本类其他构造方法。(一定要有一个访问了父类的构造方法)    注意：super或者this只能出现一个，并且只能在语句的第一条语句。为什么呢?    因为子类可能会访问父类的数据，所以，在子类初始化之前，要先把父类数据初始化完毕。</code></pre><p> C:成员方法</p><pre><code>不同名：特别简单，一看就知道用的是谁。同名：就近原则    访问自己的用this    访问父亲的用super</code></pre></li><li><p>this和super的区别及应用场景</p><pre><code>A:区别this：本类对象的引用super：父类存储空间的标识。可以理解为父类对象的引用。</code></pre></li></ol><p>B:应用场景<br>    a:成员变量<br>        this.变量 本类的成员变量<br>        super.变量 父类的成员变量<br>    b:构造方法<br>        this(…) 本类的构造方法<br>        super(…) 父类的构造方法<br>    c:成员方法<br>        this.方法名(…) 本类的成员方法<br>        super.方法名(…) 父类的成员方法</p><h4 id="方法重写-掌握"><a href="#方法重写-掌握" class="headerlink" title="方法重写(掌握)"></a>方法重写(掌握)</h4><ol><li><p>描述：在子类中，出现了和父类中一模一样的方法声明的现象。</p></li><li><p>作用：可以使用父类功能，还可以增强该功能。</p></li></ol><ol><li>面试题：Overload和Override的区别。Overload的方法是否可以改变返回值的类型?</li></ol><p>Overload：重载       同一个类中，方法名相同，参数列表不同。与返回值类型无关。</p><p>Override：重写       存在于子父类，或者子父接口中，方法声明相同。</p><p>Overload的方法可以改变返回值的类型，因为它与返回值类型无关。</p><ol><li><p>方法重写的注意事项：</p><pre><code>A:父类私有方法不能被重写</code></pre><p> B:子类重写方法的访问权限不能比父类的方法低<br> C:静态只能重写静态。(其实这算不上重写)</p></li></ol><h4 id="final关键字-掌握"><a href="#final关键字-掌握" class="headerlink" title="final关键字(掌握)"></a>final关键字(掌握)</h4><p>​    (1)final:最终的意思<br>    (2)作用：可以修饰类，修饰成员变量，修饰成员方法<br>    (3)特点：<br>        A:修饰类 类不能被继承<br>        B:修饰成员变量 变量变成了常量<br>        C:修饰成员方法 方法不能被重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">很多时候，我们可能不想让子类修改我的内容。这个时候该怎么半呢?</span></span><br><span class="line"><span class="comment">针对这种情况，java又提供了一个状态修饰符：final。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">final:最终的意思。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">作用：</span></span><br><span class="line"><span class="comment">可以修饰类，成员变量，成员方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">类：类被final修饰，说明该类是最终类，不能被继承。</span></span><br><span class="line"><span class="comment">成员变量：变量被final修饰后，就变成了常量。值不能被修改。</span></span><br><span class="line"><span class="comment">成员方法：方法不能被子类重写。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">getResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"这里是绝密的资源,可以看,不可以改"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">num = <span class="number">100</span>;</span><br><span class="line">System.out.println(num);</span><br><span class="line"><span class="comment">//num2 = 200;</span></span><br><span class="line">System.out.println(num2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public void getResource() &#123;</span></span><br><span class="line"><span class="comment">System.out.println("这里我想干什么就干什么");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">z.getResource();</span><br><span class="line">z.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    (4)面试题：<br>        A:final修饰局部变量<br>            a:基本类型 值不能发生改变<br>            b:引用类型 地址值不能发送改变，对象的内容是可以改变的<br>        B:final的初始化时机<br>            a:在定义时就赋值<br>            b:在构造方法完毕前赋值</p><h4 id="多态-掌握"><a href="#多态-掌握" class="headerlink" title="多态(掌握)"></a>多态(掌握)</h4><p>​    (1)多态：同一个对象，在不同时刻表现出来的多种状态<br>        举例：水，猫和动物</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多态：同一个对象在不同时刻表现出现的不同状态。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">举例：</span></span><br><span class="line"><span class="comment">A:水(水，冰，水蒸气)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">B:猫和动物。</span></span><br><span class="line"><span class="comment">把右边的值赋值给左边，如果能读通过，就说明可以。</span></span><br><span class="line"><span class="comment">动物 d = new 动物();</span></span><br><span class="line"><span class="comment">动物 dd = new 猫();</span></span><br><span class="line"><span class="comment">猫 m = new 猫();</span></span><br><span class="line"><span class="comment">猫 mm = new 动物();  错误</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">动物 dd = new 猫();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">代码如何体现呢?</span></span><br><span class="line"><span class="comment">A:有继承关系</span></span><br><span class="line"><span class="comment">B:有方法重写</span></span><br><span class="line"><span class="comment">C:有父类引用指向子类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"动物吃饭"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"狗吃肉"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuoTaiDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Animal a = new Animal();</span></span><br><span class="line"><span class="comment">//Dog d = new Dog();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多态</span></span><br><span class="line">Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    (2)多态的前提：<br>        A:有继承关系<br>        B:有方法重写<br>        C:有父类引用指向子类对象<br>    (3)多态中的成员访问特点：<br>        A:成员变量<br>            编译看左边，运行看左边<br>        B:成员方法<br>            编译看左边，运行看右边<br>        C:静态方法<br>            编译看左边，运行看左边</p><p>为什么：<br>        因为方法有重写，而变量没有。静态方法没有重写一说。</p><h3 id="DAY009"><a href="#DAY009" class="headerlink" title="DAY009"></a>DAY009</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/xuexi/009DAY.jpg" alt=""></p><h4 id="多态-掌握-1"><a href="#多态-掌握-1" class="headerlink" title="多态(掌握)"></a>多态(掌握)</h4><p>​    (1)同一个事物在不同时刻表现出现的多种状态。<br>        举例：水，猫和动物<br>    (2)前提<br>        A:有继承或者实现关系<br>        B:有方法重写<br>            因为抽象类中的抽象方法以及接口中的方法都必须被子类重写，调用才有意义。<br>        C:有父类或者父接口引用指向子类对象<br>    (3)多态中的成员访问特点<br>        Fu f = new Zi();<br>        A:成员变量<br>            编译看左边，运行看左边<br>        B:成员方法<br>            编译看左边，运行看右边<br>        C:静态方法<br>            编译看左边，运行看左边<br>    (4)好处和弊端<br>        A:好处<br>            提高了代码的维护性<br>            提高了代码的扩展性<br>        B:弊端<br>            不能访问子类特有功能<br>    (5)如何访问子类特有功能<br>        A:创建子类对象<br>        B:向下转型<br>    (6)多态中的转型<br>        A:向上转型<br>            子到父<br>        B:向下转型<br>            父到子(加强制转换)<br>    (7)孔子装爹案例</p><h4 id="抽象类-掌握"><a href="#抽象类-掌握" class="headerlink" title="抽象类(掌握)"></a>抽象类(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">抽象类概述：动物不是一个具体的事物，只有猫，狗才是具体的个体。</span></span><br><span class="line"><span class="comment">并且，在动物中我们针对吃的功能，也不应该给出具体的体现，</span></span><br><span class="line"><span class="comment">因为不同的动物吃的内容是不一样的，我们应该让具体的动物自己去实现自己吃的功能。</span></span><br><span class="line"><span class="comment">而一个功能如果没有具体的体现，就是一个抽象的内容。如何表示呢?</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">修饰符 返回值类型 方法名(参数列表...);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">为了表示这是一个抽象的东西，java提供了一个标识的关键字：abstract</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">修饰符 abstract 返回值类型 方法名(参数列表...);</span></span><br><span class="line"><span class="comment">而一个类中的方法如果是抽象的类，那么，该类就必须定义为抽象类。</span></span><br><span class="line"><span class="comment">抽象类的特点：</span></span><br><span class="line"><span class="comment">A:抽象类和抽象方法必须用abstract关键字修饰</span></span><br><span class="line"><span class="comment">B:抽象类的子类</span></span><br><span class="line"><span class="comment">a:要么是抽象类</span></span><br><span class="line"><span class="comment">b:要么重写抽象类中的所有抽象方法</span></span><br><span class="line"><span class="comment">C:抽象类不一定有抽象方法，有抽象方法的类一定是抽象类</span></span><br><span class="line"><span class="comment">D:抽象类不能实例化</span></span><br><span class="line"><span class="comment">那么如何使用抽象类的功能呢?</span></span><br><span class="line"><span class="comment">按照多态的方式使用。抽象类多态。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">回顾：</span></span><br><span class="line"><span class="comment">多态前提为什么要有方法重写呢?</span></span><br><span class="line"><span class="comment">因为父类的方法可能是抽象的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="comment">//这个方法是有方法体的，只不过内容为空</span></span><br><span class="line"><span class="comment">//public void eat() &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"猫吃鱼"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Animal a = new Animal(); //无法实例化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Dog d = new Dog();  //无法实例化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Cat c = new Cat();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多态</span></span><br><span class="line">Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">a.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    有些时候，我们对事物不能用具体的东西来描述，这个时候就应该把事物定义为抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">抽象类的成员特点：</span></span><br><span class="line"><span class="comment">A:成员变量</span></span><br><span class="line"><span class="comment">可以是变量，也可以是常量</span></span><br><span class="line"><span class="comment">B:构造方法</span></span><br><span class="line"><span class="comment">有构造方法。但是不能实例化。</span></span><br><span class="line"><span class="comment">问题：构造方法有什么用呢?</span></span><br><span class="line"><span class="comment">用于子类访问父类数据的初始化</span></span><br><span class="line"><span class="comment">C:成员方法</span></span><br><span class="line"><span class="comment">可是有抽象方法，也可以有非抽象方法。</span></span><br><span class="line"><span class="comment">抽象方法：强制要求子类做某些事情。</span></span><br><span class="line"><span class="comment">非抽象方法：用于给子类直接使用，提高了代码的复用性。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"method"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span>  </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">num = <span class="number">100</span>;</span><br><span class="line">System.out.println(num);</span><br><span class="line"><span class="comment">//num2 = 200;</span></span><br><span class="line">System.out.println(num2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">d.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个小问题<br>        A:如果你看到一个抽象类中居然没有抽象方法,这个抽象类的意义何在?<br>          不让别人创建<br>        B:abstract不能和哪些关键字共存?<br>            a:private 冲突<br>            b:final 冲突<br>            c:static 无意义</p><h4 id="接口-掌握"><a href="#接口-掌握" class="headerlink" title="接口(掌握)"></a>接口(掌握)</h4><p>​    (1)有些时候，不是事物本身具备的功能，我们就考虑使用接口来扩展。<br>    (2)接口的特点：<br>        A:定义接口用关键字interface<br>            格式是：interface 接口名 {}<br>        B:类实现接口用关键字implements<br>            格式是：class 类名 implements 接口名 {}<br>        C:接口不能实例化<br>        D:接口的子类<br>            a:要么是抽象类<br>            b:要么重写接口中的所有方法<br>    (3)接口的成员特点<br>        A:成员变量<br>            只能是常量。<br>            默认修饰符：public static final<br>        B:成员方法<br>            只能是抽象方法。<br>            默认修饰符：public abstract<br>        推荐：<br>            建议自己写接口的时候，把默认修饰符加上。<br>    (4)类与接口的关系<br>        A:类与类<br>            继承关系，只能单继承，可以多层继承。<br>        B:类与接口<br>            实现关系，可以单实现，也可以多实现。<br>            还可以在继承一个类的同时实现多个接口。<br>        C:接口与接口<br>            继承关系，可以单继承，也可以多继承。<br>    (5)抽象类和接口的区别?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">1：成员区别</span><br><span class="line"></span><br><span class="line">抽象类：</span><br><span class="line"></span><br><span class="line">成员变量：可以是变量，也可以是常量</span><br><span class="line"></span><br><span class="line">构造方法：有</span><br><span class="line"></span><br><span class="line">成员方法：可以是抽象的，也可以是非抽象的</span><br><span class="line"></span><br><span class="line">接口：</span><br><span class="line"></span><br><span class="line">成员变量：只能是常量。</span><br><span class="line"></span><br><span class="line">默认修饰符：public static final</span><br><span class="line"></span><br><span class="line">成员方法：只能是抽象的</span><br><span class="line"></span><br><span class="line">默认修饰符：public abstract</span><br><span class="line"></span><br><span class="line">2：关系区别</span><br><span class="line"></span><br><span class="line">类与类：</span><br><span class="line"></span><br><span class="line">继承关系，只能单继承。可以多层继承。</span><br><span class="line"></span><br><span class="line">类与接口：</span><br><span class="line"></span><br><span class="line">实现关系，可以单实现，也可以多实现。</span><br><span class="line"></span><br><span class="line">还可以在继承一个类的同时实现多个接口。</span><br><span class="line"></span><br><span class="line">接口与接口：</span><br><span class="line"></span><br><span class="line">继承关系，可以单继承，也可以多继承。</span><br><span class="line"></span><br><span class="line">3：设计理念区别</span><br><span class="line"></span><br><span class="line">抽象类：被继承体现的是：”is a”的关系。在抽象类中定义的一般是共性功能</span><br><span class="line"></span><br><span class="line">接口：被实现体现的是：”like a”的关系。在接口中定义的一般是扩展功能</span><br><span class="line"></span><br><span class="line">A:成员区别</span><br><span class="line"></span><br><span class="line">B:关系区别</span><br><span class="line"></span><br><span class="line">C:设计理念区别</span><br><span class="line"></span><br><span class="line">抽象类：父抽象类，里面定义的是共性内容。</span><br><span class="line"></span><br><span class="line">接口：父接口，里面定义的是扩展内容。</span><br></pre></td></tr></table></figure><h3 id="DAY010"><a href="#DAY010" class="headerlink" title="DAY010"></a>DAY010</h3><p>1：形式参数和返回值问题(掌握)<br>    (1)形式参数：<br>        基本类型：需要的是对应的值<br>        引用类型：<br>            类：该类的对象<br>            抽象类：该类的子类对象<br>            接口：该接口的实现类对象<br>    (2)返回值问题：<br>        基本类型：返回的是对应的值<br>        引用类型：<br>            类：该类的对象<br>            抽象类：该类的子类对象<br>            接口：该接口的实现类对象<br>    (3)链式编程<br>        new A().b().c().d();</p><p>2：包(理解)<br>    (1)其实就是文件夹<br>    (2)对类进行分类管理<br>    (3)格式：<br>        package 包名;<br>    (4)注意事项<br>        A:package是程序中的第一条可执行语句<br>        B:在类中package是唯一的<br>        C:没有package，默认是无包名<br>    (5)带包的类的编译和运行</p><p>3：导包(理解)<br>    (1)为了方便使用不同包下的类，需要导包<br>    (2)格式：<br>        import 包名.报名…类名;</p><pre><code>    注意：可以导入到*,但是不建议(3)package，import，class在类中有没有顺序关系呢?    有。    package --&gt; import --&gt; class</code></pre><p>4：修饰符(理解)<br>    (1)4种权限修饰符<br>                本类    同一个包下    不同包下的子类    不同包下的其他类<br>        private        Y<br>        默认        Y    Y<br>        protected    Y    Y        Y<br>        public        Y    Y        Y        Y<br>    (2)常见的修饰<br>        A:类    public<br>        B:成员变量    private<br>        C:构造方法    public<br>        D:成员方法    public</p><p>5：内部类(理解)<br>    (1)把类A定义在类B内部，类A就被称为内部类<br>    (2)访问特点：<br>        A:内部类可以直接访问外部类的成员，包括私有<br>        B:外部类要想访问内部类的成员，必须创建对象<br>    (3)内部类的分类：<br>        A:成员内部类<br>        B:局部内部类<br>    (4)成员内部类<br>        A:private<br>        B:static</p><pre><code>    面试题：        num        this.num        Outer.this.num(5)局部内部类    A:面试题        局部内部类访问局部变量，必须加final修饰(6)匿名内部类(掌握)    A:没有名字的内部类    B:前提        存在一个类或者接口    C:格式        new 类名或者接口名() {            重写方法();        };        本质：是一个匿名子类对象(7)开发中如何使用    不用在定义一个新的类了。直接通过匿名内部类的格式就可以搞定    interface Person {        public abstract void show();    }    class PersonDemo {        public void method(Person p) {            p.show();        }    }    PersonDemo pd = new PersonDemo();    pd.method(new Person(){        public void show(){...}    });(8)面试题    补齐代码，在控制台输出HelloWorld    interface Inter {        public abstract void show();    }    class Outer {        //补齐代码        public static Inter method() {            return new Inter(){                public void show() {                    System.out.println(&quot;helloworld&quot;);                }            };        }    }    class OuterDemo {        public static void main(String[] args) {            Outer.method().show();        }    }</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0158.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;27天学完Java&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.iskei.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.iskei.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>前端CDNJS国内加速服务</title>
    <link href="http://www.iskei.cn/posts/40397.html"/>
    <id>http://www.iskei.cn/posts/40397.html</id>
    <published>2018-03-17T12:30:36.000Z</published>
    <updated>2018-04-18T09:00:50.186Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0155.jpg" alt="image"></p><p>前端 CDNJS 库及 Google Fonts、Ajax 和 Gravatar 国内加速服务<br><a id="more"></a></p><p>由于某些众所周知的原因，好多开源的 JS 库采用的国外 CDN 托管方式在国内访问速度不如人意。所以我们特意制作了这个公益项目，托管了 CDNJS 的所有开源 JS 库以及反代了 Google Fonts、Ajax 和 Gravatar，并且全部支持 http 和 https</p><h2 id="1、CDNJS-开源-JS-库"><a href="#1、CDNJS-开源-JS-库" class="headerlink" title="1、CDNJS 开源 JS 库"></a>1、CDNJS 开源 JS 库</h2><p>我们采用的方法是每天定时同步 CDNJS 的 <a href="https://github.com/cdnjs/cdnjs" target="_blank" rel="noopener">Github</a></p><p>所有的 JS/CSS 库可以在这儿找到您需要的链接</p><p><a href="https://cdnjs.loli.net/ajax/libs/" target="_blank" rel="noopener">https://cdnjs.loli.net/ajax/libs/</a></p><p>如果您使用 <a href="https://cdnjs.com/" target="_blank" rel="noopener">cdnjs.com</a> 只需要替换 <code>cdnjs.cloudflare.com</code> 为 <code>cdnjs.loli.net</code> 即可，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdnjs.loli.net/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>CDNJS 的 API 开发文档请摸<a href="https://cdnjs.com/api" target="_blank" rel="noopener">这里</a></p><h2 id="2、Google-Fonts"><a href="#2、Google-Fonts" class="headerlink" title="2、Google Fonts"></a>2、Google Fonts</h2><p>我们采用的方法是万能的 Nginx 反代 + 关键词替换</p><p>使用的时候，您只需要替换 <code>fonts.googleapis.com</code> 为 <code>fonts.loli.net</code> 即可，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&apos;https://fonts.googleapis.com/css?family=Open+Sans&apos; rel=&apos;stylesheet&apos;&gt;</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&apos;https://fonts.loli.net/css?family=Open+Sans&apos; rel=&apos;stylesheet&apos;&gt;</span><br></pre></td></tr></table></figure><p>如果需要 <a href="https://material.io/icons/" target="_blank" rel="noopener">Material icons</a> ，把</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&apos;https://fonts.googleapis.com/icon?family=Material+Icons&apos; rel=&apos;stylesheet&apos;&gt;</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&apos;https://fonts.loli.net/icon?family=Material+Icons&apos; rel=&apos;stylesheet&apos;&gt;</span><br></pre></td></tr></table></figure><p>如果需要 <a href="https://fonts.google.com/earlyaccess" target="_blank" rel="noopener">Early Access</a>，把</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import url(https://fonts.googleapis.com/earlyaccess/notosanskannada.css);</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import url(https://fonts.loli.net/earlyaccess/notosanskannada.css);</span><br></pre></td></tr></table></figure><p>如果需要下载单个字体，您只需要把 <code>fonts.gstatic.com</code> 替换成 <code>gstatic.loli.net</code> 或 <code>themes.googleusercontent.com</code> 替换成 <code>themes.loli.net</code> 即可</p><p>比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://fonts.gstatic.com/s/opensans/v14/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gstatic.loli.net/s/opensans/v14/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://themes.googleusercontent.com/static/fonts/anonymouspro/v3/Zhfjj_gat3waL4JSju74E-V_5zh5b-_HiooIRUBwn1A.ttf</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://themes.loli.net/static/fonts/anonymouspro/v3/Zhfjj_gat3waL4JSju74E-V_5zh5b-_HiooIRUBwn1A.ttf</span><br></pre></td></tr></table></figure><p>Google Fonts 的 API 文档请摸<a href="https://developers.google.com/fonts/docs/getting_started" target="_blank" rel="noopener">这里</a></p><h2 id="3、Google-前端公共库"><a href="#3、Google-前端公共库" class="headerlink" title="3、Google 前端公共库"></a>3、Google 前端公共库</h2><p>方法同上，直接替换 <code>ajax.googleapis.com</code> 为 <code>ajax.loli.net</code> 即可，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&apos;text/javascript&apos; src=&apos;https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js&apos;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&apos;text/javascript&apos; src=&apos;https://ajax.loli.net/ajax/libs/jquery/3.2.1/jquery.min.js&apos;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Google 前端库 API 开发文档摸<a href="https://developers.google.com/speed/libraries/" target="_blank" rel="noopener">这儿</a></p><h2 id="4、Gravatar-头像"><a href="#4、Gravatar-头像" class="headerlink" title="4、Gravatar 头像"></a>4、Gravatar 头像</h2><p>方法还是同上，直接替换 <code>*.gravatar.com</code> 为 <code>gravatar.loli.net</code> 即可，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://secure.gravatar.com/avatar/8406d089bc81b664a2610b8d214c1428</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gravatar.loli.net/avatar/8406d089bc81b664a2610b8d214c1428</span><br></pre></td></tr></table></figure><h2 id="5、赞助商"><a href="#5、赞助商" class="headerlink" title="5、赞助商"></a>5、赞助商</h2><p>国内外 CDN， GeoDNS、域名等基础服务均由 <a href="https://xtom.com/" target="_blank" rel="noopener">xTom</a>赞助 SSL 证书由 <a href="https://ssl.do/" target="_blank" rel="noopener">SSL.DO</a>赞助</p><h2 id="6、旧域名替换"><a href="#6、旧域名替换" class="headerlink" title="6、旧域名替换"></a>6、旧域名替换</h2><p>由于更换了赞助商，并且因为最新的国内域名备案政策，旧的域名均采用 301 跳转形式</p><p><code>cdn.css.net</code> 跳转到本文</p><p><code>cdn.css.net/libs/</code> 和 <code>cdnjs.cat.net/ajax/libs/</code> 跳转到 <code>cdnjs.loli.net/ajax/libs/</code></p><p><code>cdn.css.net/fonts/</code> 和 <code>fonts.cat.net</code> 和 <code>fonts.css.network</code> 跳转到 <code>fonts.loli.net</code></p><p><code>cdn.css.net/ajax/</code> 和 <code>ajax.cat.net</code> 和 <code>ajax.css.network</code> 跳转到 <code>ajax.loli.net</code></p><p><code>cdn.css.net/avatar/</code> 和 <code>gravatar.cat.net</code> 和 <code>gravatar.css.network</code> 跳转到 <code>gravatar.loli.net</code></p><p>另外由于 <a href="https://github.com/jsdelivr/jsdelivr" target="_blank" rel="noopener">jsdelivr</a> 已不再提供 Github 同步，并且这货自己也有网宿的国内 CDN ，所以</p><p><code>cdn.css.net/files/</code> 跳转到 <code>cdn.jsdelivr.net</code> 并且不再提供 jsdelivr 的国内加速服务</p><p>所有国内加速服务的域名列表如下，您只需要修改程序里的原域名即可</p><table><thead><tr><th>原域名</th><th>加速域名</th><th>制作方法</th></tr></thead><tbody><tr><td>cdnjs.cloudflare.com</td><td>cdnjs.loli.net</td><td>每日同步 Github</td></tr><tr><td>ajax.googleapis.com</td><td>ajax.loli.net</td><td>Nginx 反代</td></tr><tr><td>fonts.googleapis.com</td><td>fonts.loli.net</td><td>Nginx 反代</td></tr><tr><td>fonts.gstatic.com</td><td>gstatic.loli.net</td><td>Nginx 反代</td></tr><tr><td>themes.googleusercontent.com</td><td>themes.loli.net</td><td>Nginx 反代</td></tr><tr><td>secure.gravatar.com</td><td>gravatar.loli.net</td><td>Nginx 反代</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0155.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;前端 CDNJS 库及 Google Fonts、Ajax 和 Gravatar 国内加速服务&lt;br&gt;
    
    </summary>
    
      <category term="jQuery" scheme="http://www.iskei.cn/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://www.iskei.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Github搜索技巧</title>
    <link href="http://www.iskei.cn/posts/6321.html"/>
    <id>http://www.iskei.cn/posts/6321.html</id>
    <published>2018-03-16T08:44:36.000Z</published>
    <updated>2018-04-18T09:00:50.150Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0154.jpg" alt="image"></p><p> github搜索技巧<br><a id="more"></a></p><h3 id="1-Search"><a href="#1-Search" class="headerlink" title="1. Search"></a>1. Search</h3><ul><li>如何查看一门语言的 Repository 排行榜（按 stars 数量排）？<br>如图所示，以 Objective-C 为例，直接在输入框中输入  language:Objective-C stars:&gt;0， 然后再在右侧排名选项中选择 Most stars。</li></ul><p>按 stars 数量排名(以 Objective-C 为例).png</p><ul><li>为什么有些数据模糊搜索不到？<br>比如，输入搜索关键字 “collectionView”，然后在左侧边栏 Languages 中选择 Objective-C ，发现搜索结果中没有 “PSTCollectionView” 这个Repository，实际上，如果搜索的是 “PSTCollectionView” 的话，确实是能搜索到的。<br>从搜索结果中来看，“collectionView” 是被作为一个单词整体来进行搜索的，所以搜到的结果都是 Repository name 或者 description 中出现以 “collectionView” 开头或者包含 “-collectionView” 的单词的 Repository。<br>所以为了能搜索到更多想要的结果，我们最好以单词为单位，用 OR 将各个关键字拼接起来进行搜索，例如，搜 “CollectionView OR UICollectionView OR collection” 而不是 “collectionView”。<br>下面是两种搜索词的结果对比。</li></ul><ul><li>Github 有高级搜索吗？<br>在上图中，我们可以看到左侧边栏的下方有两个可点击的选项 <a href="https://link.jianshu.com?t=https://github.com/search/advanced" target="_blank" rel="noopener">Advanced search</a> 和 <a href="https://link.jianshu.com?t=https://github.com/search?utf8=%E2%9C%93&amp;q=&amp;type=Repositories&amp;ref=advsearch&amp;l=&amp;l=" target="_blank" rel="noopener">Cheat sheet</a>，点击 <a href="https://link.jianshu.com?t=https://github.com/search/advanced" target="_blank" rel="noopener">Advanced search</a>  即可进行自定义条件的高级搜索了，点击 <a href="https://link.jianshu.com?t=https://github.com/search?utf8=%E2%9C%93&amp;q=&amp;type=Repositories&amp;ref=advsearch&amp;l=&amp;l=" target="_blank" rel="noopener">Cheat sheet</a> 则可以查看一些有关搜索的帮助信息。哪里不会点哪里，妈妈再也不用担心我的学习了！</li></ul><h3 id="2-Trending"><a href="#2-Trending" class="headerlink" title="2.Trending"></a>2.Trending</h3><p>作为一枚程序猿，除了有目的的搜索之外，我们有时也需要去“瞎逛逛”，开阔一下眼界。如果你有空，不妨去 Github 的 <a href="https://link.jianshu.com?t=https://github.com/trending" target="_blank" rel="noopener">Trending</a> 看看最近发生了什么。<em>See what the GitHub community is most excited about today! </em> 在这里你可以看到各种不同开发语言的每天/周/月的最热门的 Repositories 和 Developers。比如前一段时间走红的 <a href="https://link.jianshu.com?t=https://github.com/ibireme/YYKit" target="_blank" rel="noopener">YYKit</a>，苹果最近开源的 <a href="https://link.jianshu.com?t=https://github.com/carekit-apple/CareKit" target="_blank" rel="noopener">CareKit</a>，等等。</p><h3 id="3-制定搜索方式："><a href="#3-制定搜索方式：" class="headerlink" title="3.制定搜索方式："></a>3.制定搜索方式：</h3><p>我默认检索的关键词都是android</p><p>按照文件搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android in:file</span><br></pre></td></tr></table></figure><p>按照路径检索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">andrioid in:path</span><br></pre></td></tr></table></figure><p>按照语言检索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android language:java</span><br></pre></td></tr></table></figure><p>按照文件大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android size:&gt;100</span><br></pre></td></tr></table></figure><p>按照后缀名检索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android extention:css</span><br></pre></td></tr></table></figure><p>按照是否被fork过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android fork:true</span><br></pre></td></tr></table></figure><p>按照地域检索（这个猎头和hr应该用得着）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android location:beijing</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0154.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt; github搜索技巧&lt;br&gt;
    
    </summary>
    
      <category term="Github" scheme="http://www.iskei.cn/categories/Github/"/>
    
    
      <category term="Github" scheme="http://www.iskei.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Java对象复制Clone技术</title>
    <link href="http://www.iskei.cn/posts/38422.html"/>
    <id>http://www.iskei.cn/posts/38422.html</id>
    <published>2018-03-15T08:44:36.000Z</published>
    <updated>2018-04-18T09:00:50.158Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0153.jpg" alt="image"></p><p>在编码过程经常会碰到将一个对象传递给另一个对象，java中对于基本型变量采用的是值传递，而对于对象比如bean传递时采用的是引用传递也就是地址传递，而很多时候对于对象传递我们也希望能够象值传递一样，使得传递之前和之后有不同的内存地址，在这种情况下就可以clone一个新的对象来用.<br><a id="more"></a></p><h3 id="什么时候使用克隆对象技术"><a href="#什么时候使用克隆对象技术" class="headerlink" title="什么时候使用克隆对象技术"></a>什么时候使用克隆对象技术</h3><p>如：有一个对象A，在某一时刻A中已经包含了一些有效值，A是用来保存从数据库得到很多数据的一个对象。此时可能会需要一个和A完全相同新对象B，B用来修改A里面的某一个属性的值，仅仅是用来负责显示一下，不需要使得A.也受到影响。并且此函数的返回类型是A类型的。并且此后对B任何改动都不会影响到A中的值，也就是说，A与B是两个独立的对象，但B的初始值是由A对象确定的。在Java语言中，用简单的赋值语句是不能满足这种需求的。实现clone（）方法是不错的选择。</p><p>Java的所有类都默认继承java.lang.Object类，在java.lang.Object类中有一个方法clone()。该方法将返回Object对象的一个拷贝。要说明的有两点：</p><ul><li>一是拷贝对象返回的是一个新对象，而不是一个引用。</li><li>二是拷贝对象与用  new 操作符返回的新对象的区别就是这个拷贝已经包含了一些原来对象的信息，而不是对象的初始信息。</li></ul><p>怎样应用clone()方法？</p><h4 id="实现clone方法的步骤（）"><a href="#实现clone方法的步骤（）" class="headerlink" title="实现clone方法的步骤（）"></a>实现clone方法的步骤（）</h4><ol><li><p>实现Cloneable接口</p></li><li><p>重载Object类中的clone()方法，重载时需定义为public</p></li><li><p>在重载方法中，调用<code>super.clone()</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloneClass</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> aInt;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CloneClass o = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            o = (CloneClass)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><h3 id="浅克隆与深克隆（影子克隆）"><a href="#浅克隆与深克隆（影子克隆）" class="headerlink" title="浅克隆与深克隆（影子克隆）"></a>浅克隆与深克隆（影子克隆）</h3><p>​       克隆(默认就是浅克隆)就是复制一个对象的复本.若只需要复制对象的字段值（对于基本数据类型,如:int,long,float等，则复制值；对于复合数据类型仅复制该字段值，如数组变量则复制地址，对于对象变量则复制对象的reference。</p><p>下面的例子包含三个类UnCloneA，CloneB，CloneMain。</p><p>CloneB类包含了一个UnCloneA的实例和一个int类型变量，并且重载clone()方法。</p><p>CloneMain类初始化CloneB 类的一个实例b1，然后调用clone()方法生成了一个b1的拷贝b2。最后考察一下b1和b2的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> clone;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnCloneA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnCloneA</span><span class="params">(<span class="keyword">int</span> ii)</span> </span>&#123; </span><br><span class="line">        i = ii; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doubleValue</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        i *= <span class="number">2</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.toString(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloneB</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> aInt;</span><br><span class="line">    <span class="keyword">public</span> UnCloneA unCA = <span class="keyword">new</span> UnCloneA(<span class="number">111</span>);</span><br><span class="line">    <span class="function">publicCloneB <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CloneB o = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            o = (CloneB)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span></span>&#123;</span><br><span class="line">        CloneB b1 = <span class="keyword">new</span> CloneB();</span><br><span class="line">        b1.aInt = <span class="number">11</span>;</span><br><span class="line">        System.out.println(<span class="string">"before clone,b1.aInt = "</span>+ b1.aInt);</span><br><span class="line">        System.out.println(<span class="string">"before clone,b1.unCA = "</span>+ b1.unCA);</span><br><span class="line">        CloneB b2 = (CloneB)b1.clone();</span><br><span class="line">        b2.aInt = <span class="number">22</span>;</span><br><span class="line">        b2.unCA.doubleValue();</span><br><span class="line">        System.out.println(<span class="string">"================================="</span>);</span><br><span class="line">        System.out.println(<span class="string">"after clone,b1.aInt = "</span>+ b1.aInt);</span><br><span class="line">        System.out.println(<span class="string">"after clone,b1.unCA = "</span>+ b1.unCA);</span><br><span class="line">        System.out.println(<span class="string">"================================="</span>);</span><br><span class="line">        System.out.println(<span class="string">"after clone,b2.aInt = "</span>+ b2.aInt);</span><br><span class="line">        System.out.println(<span class="string">"after clone,b2.unCA = "</span>+ b2.unCA);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ RUN RESULT:</span><br><span class="line">before clone,b1.aInt = <span class="number">11</span></span><br><span class="line">before clone,b1.unCA = <span class="number">111</span></span><br><span class="line">after clone,b1.aInt = <span class="number">11</span></span><br><span class="line">after clone,b1.unCA = <span class="number">222</span></span><br><span class="line">after clone,b2.aInt = <span class="number">22</span></span><br><span class="line">after clone,b2.unCA = <span class="number">222</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>输出的结果说明int类型的变量aInt和UnCloneA的实例对象unCA的clone结果不一致，</p><p>int类型是真正的被clone了，因为改变了b2中的aInt变量，对b1的aInt没有产生影响，</p><p>也就是说，b2.aInt与b1.aInt已经占据了不同的内存空间，b2.aInt是b1.aInt的一个真正拷贝。</p><p>相反，对b2.unCA的改变同时改变了b1.unCA，很明显，b2.unCA和b1.unCA是仅仅指向同一个对象的不同引用！（也就是对对象中的对象克隆失败）</p><p>从中可以看出，调用Object类中clone()方法产生的效果是：先在内存中开辟一块和原始对象一样的空间，然后原样拷贝原始对象中的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Channel <span class="title">copy</span><span class="params">(Integer cid,String solution, String mobileSolution, Integer siteId,</span></span></span><br><span class="line"><span class="function"><span class="params">Map&lt;String, String&gt; pathMap)</span></span>&#123;</span><br><span class="line">Channel c=findById(cid);<span class="comment">//旧</span></span><br><span class="line">Channel channel=<span class="keyword">new</span> Channel();<span class="comment">//新</span></span><br><span class="line"><span class="keyword">if</span>(c!=<span class="keyword">null</span>)&#123;</span><br><span class="line">ChannelExt ext=<span class="keyword">new</span> ChannelExt();</span><br><span class="line">ChannelTxt channelTxt=<span class="keyword">new</span> ChannelTxt();</span><br><span class="line">channel=(Channel) c.clone();</span><br><span class="line">ext=(ChannelExt) c.getChannelExt().clone();</span><br><span class="line"><span class="keyword">if</span>(c.getChannelTxt()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">channelTxt=(ChannelTxt) c.getChannelTxt().clone();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对基本数据类型，这样的操作是没有问题的，但对非基本类型变量，我们知道它们保存的仅仅是对象的引用，这也导致clone后的非基本类型变量和原始对象中相应的变量指向的是同一个对象。也就没有达到克隆的效果。</p><p>大多时候，这种clone的结果往往不是我们所希望的结果，这种clone也被称为”影子clone”。要想让b2.unCA指向与b2.unCA不同的对象，而且b2.unCA中还要包含b1.unCA中的信息作为初始信息，就要实现深度clone。</p><h3 id="怎么进行深度clone？"><a href="#怎么进行深度clone？" class="headerlink" title="怎么进行深度clone？"></a>怎么进行深度clone？</h3><p>深克隆与浅克隆的区别在于对复合数据类型的复制。若对象中的某个字段为复合类型，在克隆对象的时候，需要为该字段重新创建一个对象。</p><p>把上面的例子改成深度clone很简单，需要两个改变：一是让UnCloneA类也实现和CloneB类一样的clone功能（实现Cloneable接口，重载clone()方法）。二是在CloneB的clone()方法中加入一句<code>o.unCA = (UnCloneA)unCA.clone()</code></p><p>程序如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnCloneA</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnCloneA</span><span class="params">(<span class="keyword">int</span> ii)</span> </span>&#123; i = ii; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doubleValue</span><span class="params">()</span> </span>&#123; i *= <span class="number">2</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.toString(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UnCloneA o = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            o = (UnCloneA)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloneB</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> aInt;</span><br><span class="line">    <span class="keyword">public</span> UnCloneA unCA = <span class="keyword">new</span> UnCloneA(<span class="number">111</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CloneB o = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            o = (CloneB)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        o.unCA = (UnCloneA)unCA.clone();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span></span>&#123;</span><br><span class="line">        CloneB b1 = <span class="keyword">new</span> CloneB();</span><br><span class="line">        b1.aInt = <span class="number">11</span>;</span><br><span class="line">        System.out.println(<span class="string">"before clone,b1.aInt = "</span>+ b1.aInt);</span><br><span class="line">        System.out.println(<span class="string">"before clone,b1.unCA = "</span>+ b1.unCA);</span><br><span class="line">        CloneB b2 = (CloneB)b1.clone();</span><br><span class="line">        b2.aInt = <span class="number">22</span>;</span><br><span class="line">        b2.unCA.doubleValue();</span><br><span class="line">        System.out.println(<span class="string">"========="</span>);</span><br><span class="line">        System.out.println(<span class="string">"after clone,b1.aInt = "</span>+ b1.aInt);</span><br><span class="line">        System.out.println(<span class="string">"after clone,b1.unCA = "</span>+ b1.unCA);</span><br><span class="line">        System.out.println(<span class="string">"========="</span>);</span><br><span class="line">        System.out.println(<span class="string">"after clone,b2.aInt = "</span>+ b2.aInt);</span><br><span class="line">        System.out.println(<span class="string">"after clone,b2.unCA = "</span>+ b2.unCA);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ RUN RESULT:</span><br><span class="line">before clone,b1.aInt = <span class="number">11</span></span><br><span class="line">before clone,b1.unCA = <span class="number">111</span></span><br><span class="line">after clone,b1.aInt = <span class="number">11</span></span><br><span class="line">after clone,b1.unCA = <span class="number">111</span></span><br><span class="line">after clone,b2.aInt = <span class="number">22</span></span><br><span class="line">after clone,b2.unCA = <span class="number">222</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>可以看出，现在b2.unCA的改变对b1.unCA没有产生影响。此时b1.unCA与b2.unCA指向了两个不同的UnCloneA实例，而且在CloneB b2 = (CloneB)b1.clone();调用的那一刻b1和b2拥有相同的值，在这里，b1.i = b2.i = 11。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>不是所有的类都能实现深度clone的。例如，如果把上面的CloneB类中的UnCloneA类型变量改成StringBuffer类型，看一下JDK API中关于StringBuffer的说明，StringBuffer没有重载clone()方法，更为严重的是StringBuffer还是一个final类，这也是说我们也不能用继承的办法间接实现StringBuffer的clone。如果一个类中包含有StringBuffer类型对象或和StringBuffer相似类的对象，我们有两种选择：要么只能实现影子clone，要么就在类的clone()方法中加一句（假设是SringBuffer对象，而且变量名仍是unCA）：</p><p> <code>o.unCA = new StringBuffer(unCA.toString()); //原来的是：o.unCA = (UnCloneA)unCA.clone();</code></p><p>还要知道的是除了基本数据类型能自动实现深度clone以外，String对象是一个例外，它clone后的表现好象也实现了深度clone，虽然这只是一个假象，但却大大方便了我们的编程。<br>通过以上我们可以看出在某些情况下，我们可以利用clone方法来实现对象只见的复制，但对于比较复杂的对象（比如对象中包含其他对象，其他对象又包含别的对象…..）这样我们必须进行层层深度clone，每个对象需要实现cloneable接口。</p><h3 id="Java集合的深克隆"><a href="#Java集合的深克隆" class="headerlink" title="Java集合的深克隆"></a>Java集合的深克隆</h3><p>下面例子有一个<code>Employee</code>集合，Employee是可变对象，成员变量<code>name</code>和<code>designation</code>。它们存储在<code>HashSet</code>中。使用<code>java.util.Collection</code>接口的<code>addAll()</code>方法创建集合拷贝。然后修改存储在原始集合每个<code>Employee</code>对象的<code>designation</code>值。理想情况下这个改变不会影响克隆集合，因为克隆集合和原始集合应该相互独立，但是克隆集合也被改变了。修正这个问题的方法是对存储在<code>Collection</code>类中的元素深克隆。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection; </span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger; </span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Java program to demonstrate copy constructor of Collection provides shallow </span></span><br><span class="line"><span class="comment">* copy and techniques to deep clone Collection by iterating over them. </span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> http://javarevisited.blogspot.com </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionCloningTest</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(CollectionCloningclass); </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123; </span><br><span class="line">        <span class="comment">// deep cloning Collection in Java </span></span><br><span class="line">        Collection&lt;Employee&gt; org = <span class="keyword">new</span> HashSet&lt;&gt;(); </span><br><span class="line">        org.add(<span class="keyword">new</span> Employee(<span class="string">"Joe"</span>, <span class="string">"Manager"</span>)); </span><br><span class="line">        org.add(<span class="keyword">new</span> Employee(<span class="string">"Tim"</span>, <span class="string">"Developer"</span>)); </span><br><span class="line">        org.add(<span class="keyword">new</span> Employee(<span class="string">"Frank"</span>, <span class="string">"Developer"</span>)); </span><br><span class="line"> </span><br><span class="line">        <span class="comment">// creating copy of Collection using copy constructor </span></span><br><span class="line">        Collection&lt;Employee&gt; copy = <span class="keyword">new</span> HashSet&lt;&gt;(org);</span><br><span class="line"> </span><br><span class="line">        logger.debug(<span class="string">"Original Collection &#123;&#125;"</span>, org); </span><br><span class="line">        logger.debug(<span class="string">"Copy of Collection &#123;&#125;"</span>, copy );</span><br><span class="line">         </span><br><span class="line">        Iterator&lt;Employee&gt; itr = org.iterator(); </span><br><span class="line">        <span class="keyword">while</span>(itr.hasNext())&#123; </span><br><span class="line">            itr.next().setDesignation(<span class="string">"staff"</span>); </span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line">        logger.debug(<span class="string">"Original Collection after modification &#123;&#125;"</span>, org); </span><br><span class="line">        logger.debug(<span class="string">"Copy of Collection without modification &#123;&#125;"</span>, copy ); </span><br><span class="line"> </span><br><span class="line">        <span class="comment">// deep Cloning List in Java </span></span><br><span class="line"> </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="keyword">private</span> String designation; </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, String designation)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.name = name; </span><br><span class="line">        <span class="keyword">this</span>.designation = designation; </span><br><span class="line">    &#125; </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesignation</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> designation; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesignation</span><span class="params">(String designation)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.designation = designation; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> name; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.name = name; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s: %s"</span>, name, designation ); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- Original Collection [Joe: Manager, Frank: Developer, Tim: Developer] </span><br><span class="line">- Copy of Collection [Joe: Manager, Frank: Developer, Tim: Developer] </span><br><span class="line">- Original Collection after modification [Joe: staff, Frank: staff, Tim: staff] </span><br><span class="line">- Copy of Collection without modification [Joe: staff, Frank: staff, Tim: staff]</span><br></pre></td></tr></table></figure><p>可以看到改变原始<code>Collection</code>中<code>Employee</code>对象(改变designation为”<code>staff</code>“)在克隆集合中也有所反映，因为克隆是浅拷贝，指向堆中相同的<code>Employee</code>对象。为了修正这个问题，需要遍历集合，深克隆<code>Employee</code>对象，在这之前，要重写<code>Employee</code>对象的clone方法。</p><ol><li><p><code>Employee</code>实现<code>Cloneable</code>接口</p></li><li><p>为<code>Employee</code>类增加下面的<code>clone()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Employee <span class="title">clone</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        Employee clone = <span class="keyword">null</span>; </span><br><span class="line">        <span class="keyword">try</span>&#123; </span><br><span class="line">            clone = (Employee) <span class="keyword">super</span>.clone(); </span><br><span class="line"> </span><br><span class="line">        &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123; </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e); <span class="comment">// won't happen </span></span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">return</span> clone; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>不使用拷贝构造函数，使用下面的代码来深拷贝集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;Employee&gt; copy = <span class="keyword">new</span> HashSet&lt;Employee&gt;(org.size()); </span><br><span class="line"> </span><br><span class="line">Iterator&lt;Employee&gt; iterator = org.iterator(); </span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123; </span><br><span class="line">    copy.add(iterator.next().clone()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行相同的代码更改原始集合，克隆集合不会也被更改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>可以看到克隆集合和原始集合相互独立，它们指向不同的对象。<br><a href="http://www.importnew.com/?attachment_id=10852" target="_blank" rel="noopener"><img src="http://incdn1.b0.upaiyun.com/2014/04/8de7420211451f17a303eda3a5cb6710.png" alt="Shallow vs Deep Clone Java"></a></p><p>这就是<strong>Java中如何克隆集合</strong>的内容。现在我们知道拷贝构造函数或者<code>List</code>或<code>Set</code>等各种集合类的<code>addAll()</code>方法仅仅创建了<em>集合的浅拷贝</em>，而且原始集合和克隆集合指向相同的对象。为避免这个问题，应该深克隆集合，遍历集合克隆每个元素。尽管这要求集合中的对象必须支持深克隆操作。</p><p>后面这些话是比较重要的：(易于理解)</p><p>各个集合类提供的拷贝构造函数作为克隆<code>List</code>，<code>Set</code>，<code>ArrayList</code>，<code>HashSet</code>或者其他集合实现的方法。需要记住的是，Java集合的拷贝构造函数只提供浅拷贝而不是深拷贝，这意味着存储在原始List和克隆List中的对象是相同的，指向Java堆内存中相同的位置。</p><h3 id="简单注意"><a href="#简单注意" class="headerlink" title="简单注意"></a>简单注意</h3><ol><li>在克隆java对象的时候不会调用构造器</li><li>java提供一种叫浅拷贝（shallow copy）的默认方式实现clone，创建好对象的副本后然后通过赋值拷贝内容，意味着如果你的类包含引用类型，那么原始对象和克隆都将指向相同的引用内容，这是很危险的，因为发生在可变的字段上任何改变将反应到他们所引用的共同内容上。为了避免这种情况，需要对引用的内容进行深度克隆。</li><li>克隆方法用于创建对象的拷贝，为了使用clone方法，类必须实现<code>java.lang.Cloneable</code>接口<code>重写protected方法clone</code>，如果没有实现Clonebale接口会抛出<code>CloneNotSupportedException.</code></li></ol><h3 id="Hibernate异常Found-shared-references的解决办法"><a href="#Hibernate异常Found-shared-references的解决办法" class="headerlink" title="Hibernate异常Found shared references的解决办法"></a>Hibernate异常Found shared references的解决办法</h3><ul><li><p>在项目中的续签模块中，由于在谈判成功后要新建一份合同，并要将原合同中的站点信息设置到新合同中去，在合同的Entity中有一个list&lt;站点&gt;来关联的，一份合同可以有多少站点！ </p></li><li><p>在新增合同的代码如下： </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RenewalItem item = renewalItemDao.findById(id);  </span><br><span class="line">PropertyContract pc = item.getPropertyContract();<span class="comment">//旧合同  </span></span><br><span class="line">PropertyContract newPc = <span class="keyword">new</span> PropertyContract();<span class="comment">//新合同  </span></span><br><span class="line">List&lt;BSProperty&gt; bsList = pc.getBsProperty();           </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span>!=bsList &amp;&amp; !bsList.isEmpty())&#123;  </span><br><span class="line">newPc.setBsProperty(bsList);<span class="comment">//将旧合同中的关联站点设置到新合同中去。  </span></span><br><span class="line">&#125;  </span><br><span class="line">....  </span><br><span class="line">renewalItemDao.merge(item);</span><br></pre></td></tr></table></figure><p>此时会报：<code>org.hibernate.HibernateException: Found shared references to a collection</code>，这样的异常信息，意思是指发现共享引用集合，经过上网GOOGLE,有一帖子说： </p><p>解决方法：  </p><ol><li><strong>在拷贝后，新建一个集合，将原来的集合元素添加进去，并赋值给新拷贝的实体</strong> </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">RenewalItem item = renewalItemDao.findById(id);  </span><br><span class="line">PropertyContract pc = item.getPropertyContract();<span class="comment">//旧合同  </span></span><br><span class="line">PropertyContract newPc = <span class="keyword">new</span> PropertyContract();<span class="comment">//新合同  </span></span><br><span class="line">List&lt;BSProperty&gt; bsList = pc.getBsProperty();           </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span>!=bsList &amp;&amp; !bsList.isEmpty())&#123;  </span><br><span class="line">List&lt;BSProperty&gt; newBsList = <span class="keyword">new</span> ArrayList&lt;BSProperty&gt;(bsList.size());  </span><br><span class="line"><span class="keyword">for</span>(BSProperty bs : bsList)&#123;  </span><br><span class="line">  newBsList.add(bs);  </span><br><span class="line">&#125;  </span><br><span class="line">newPc.setBsProperty(newBsList);<span class="comment">//将旧合同中的关联站点设置到新合同中去。  </span></span><br><span class="line">&#125;  </span><br><span class="line">....  </span><br><span class="line">renewalItemDao.merge(item);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0153.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;在编码过程经常会碰到将一个对象传递给另一个对象，java中对于基本型变量采用的是值传递，而对于对象比如bean传递时采用的是引用传递也就是地址传递，而很多时候对于对象传递我们也希望能够象值传递一样，使得传递之前和之后有不同的内存地址，在这种情况下就可以clone一个新的对象来用.&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.iskei.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.iskei.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>代码生成Tools</title>
    <link href="http://www.iskei.cn/posts/50510.html"/>
    <id>http://www.iskei.cn/posts/50510.html</id>
    <published>2018-03-14T08:44:36.000Z</published>
    <updated>2018-04-18T09:00:50.174Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0152.jpg" alt="image"></p><p>技术点：采用SpringMVC3+Spring3+Hibernate3+Freemarker主流技术架构<br><a id="more"></a></p><h3 id="生成入口方法"><a href="#生成入口方法" class="headerlink" title="生成入口方法"></a>生成入口方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeecms.cms.template;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmsModuleGenerator</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String packName = <span class="string">"com.jeecms.cms.template"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String fileName = <span class="string">"jeecms.properties"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> ModuleGenerator(packName, fileName).generate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成方法"><a href="#生成方法" class="headerlink" title="生成方法"></a>生成方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeecms.cms.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模块生成器</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 用于生成JEE模块。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 包括JAVA类：action,dao,dao.impl,manager,manager.impl；</span></span><br><span class="line"><span class="comment"> * 配置文件：action配置,spring配置；ftl页面：list.html,add.html,edit.html。</span></span><br><span class="line"><span class="comment"> * 数据验证文件：Act-Com_save</span></span><br><span class="line"><span class="comment"> * -validation.xml,Act-Com_edit-validation.xml,Act-Com_update-validation.xml</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 可设置的参数有：模块实体类名、java类包地址、配置文件地址、ftl页面地址。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleGenerator</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory</span><br><span class="line">.getLogger(ModuleGenerator.class);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPT = File.separator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENCODING = <span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String packName;</span><br><span class="line"><span class="keyword">private</span> String fileName;</span><br><span class="line"><span class="keyword">private</span> File daoImplFile;</span><br><span class="line"><span class="keyword">private</span> File daoFile;</span><br><span class="line"><span class="keyword">private</span> File managerFile;</span><br><span class="line"><span class="keyword">private</span> File managerImplFile;</span><br><span class="line"><span class="keyword">private</span> File actionFile;</span><br><span class="line"><span class="keyword">private</span> File pageListFile;</span><br><span class="line"><span class="keyword">private</span> File pageEditFile;</span><br><span class="line"><span class="keyword">private</span> File pageAddFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> File daoImplTpl;</span><br><span class="line"><span class="keyword">private</span> File daoTpl;</span><br><span class="line"><span class="keyword">private</span> File managerTpl;</span><br><span class="line"><span class="keyword">private</span> File managerImplTpl;</span><br><span class="line"><span class="keyword">private</span> File actionTpl;</span><br><span class="line"><span class="keyword">private</span> File pageListTpl;</span><br><span class="line"><span class="keyword">private</span> File pageEditTpl;</span><br><span class="line"><span class="keyword">private</span> File pageAddTpl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ModuleGenerator</span><span class="params">(String packName, String fileName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.packName = packName;</span><br><span class="line"><span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">log.debug(<span class="string">"packName="</span> + packName);</span><br><span class="line">log.debug(<span class="string">"fileName="</span> + fileName);</span><br><span class="line">FileInputStream fileInput = <span class="keyword">new</span> FileInputStream(getFilePath(</span><br><span class="line">packName, fileName));</span><br><span class="line">prop.load(fileInput);</span><br><span class="line">String entityUp = prop.getProperty(<span class="string">"Entity"</span>);</span><br><span class="line">log.debug(<span class="string">"entityUp:"</span> + entityUp);</span><br><span class="line"><span class="keyword">if</span> (entityUp == <span class="keyword">null</span> || entityUp.trim().equals(<span class="string">""</span>)) &#123;</span><br><span class="line">log.warn(<span class="string">"Entity not specified, exit!"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">String entityLow = entityUp.substring(<span class="number">0</span>, <span class="number">1</span>).toLowerCase()</span><br><span class="line">+ entityUp.substring(<span class="number">1</span>);</span><br><span class="line">log.debug(<span class="string">"entityLow:"</span> + entityLow);</span><br><span class="line">prop.put(<span class="string">"entity"</span>, entityLow);</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">Set ps = prop.keySet();</span><br><span class="line"><span class="keyword">for</span> (Object o : ps) &#123;</span><br><span class="line">log.debug(o + <span class="string">"="</span> + prop.get(o));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String daoImplFilePath = getFilePath(prop.getProperty(<span class="string">"dao_impl_p"</span>),</span><br><span class="line">prop.getProperty(<span class="string">"Entity"</span>) + <span class="string">"DaoImpl.java"</span>);</span><br><span class="line">daoImplFile = <span class="keyword">new</span> File(daoImplFilePath);</span><br><span class="line">log.debug(<span class="string">"daoImplFile:"</span> + daoImplFile.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">String daoFilePath = getFilePath(prop.getProperty(<span class="string">"dao_p"</span>), prop</span><br><span class="line">.getProperty(<span class="string">"Entity"</span>)</span><br><span class="line">+ <span class="string">"Dao.java"</span>);</span><br><span class="line">daoFile = <span class="keyword">new</span> File(daoFilePath);</span><br><span class="line">log.debug(<span class="string">"daoFile:"</span> + daoFile.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">String managerFilePath = getFilePath(prop.getProperty(<span class="string">"manager_p"</span>),</span><br><span class="line">prop.getProperty(<span class="string">"Entity"</span>) + <span class="string">"Mng.java"</span>);</span><br><span class="line">managerFile = <span class="keyword">new</span> File(managerFilePath);</span><br><span class="line">log.debug(<span class="string">"managerFile:"</span> + managerFile.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">String managerImplFilePath = getFilePath(prop</span><br><span class="line">.getProperty(<span class="string">"manager_impl_p"</span>), prop.getProperty(<span class="string">"Entity"</span>)</span><br><span class="line">+ <span class="string">"MngImpl.java"</span>);</span><br><span class="line">managerImplFile = <span class="keyword">new</span> File(managerImplFilePath);</span><br><span class="line">log.debug(<span class="string">"managerImplFile:"</span> + managerImplFile.getAbsolutePath());</span><br><span class="line">String actionFilePath = getFilePath(prop.getProperty(<span class="string">"action_p"</span>), prop</span><br><span class="line">.getProperty(<span class="string">"Entity"</span>)</span><br><span class="line">+ <span class="string">"Act.java"</span>);</span><br><span class="line">actionFile = <span class="keyword">new</span> File(actionFilePath);</span><br><span class="line">log.debug(<span class="string">"actionFile:"</span> + actionFile.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">String pagePath = <span class="string">"WebContent/WEB-INF/"</span></span><br><span class="line">+ prop.getProperty(<span class="string">"config_sys"</span>) + <span class="string">"/"</span></span><br><span class="line">+ prop.getProperty(<span class="string">"config_entity"</span>) + <span class="string">"/"</span>;</span><br><span class="line">pageListFile = <span class="keyword">new</span> File(pagePath + <span class="string">"list.html"</span>);</span><br><span class="line">log.debug(<span class="string">"pageListFile:"</span> + pageListFile.getAbsolutePath());</span><br><span class="line">pageEditFile = <span class="keyword">new</span> File(pagePath + <span class="string">"edit.html"</span>);</span><br><span class="line">log.debug(<span class="string">"pageEditFile:"</span> + pageEditFile.getAbsolutePath());</span><br><span class="line">pageAddFile = <span class="keyword">new</span> File(pagePath + <span class="string">"add.html"</span>);</span><br><span class="line">log.debug(<span class="string">"pageAddFile:"</span> + pageAddFile.getAbsolutePath());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String tplPack = prop.getProperty(<span class="string">"template_dir"</span>);</span><br><span class="line">log.debug(<span class="string">"tplPack:"</span> + tplPack);</span><br><span class="line">daoImplTpl = <span class="keyword">new</span> File(getFilePath(tplPack, <span class="string">"dao_impl.txt"</span>));</span><br><span class="line">daoTpl = <span class="keyword">new</span> File(getFilePath(tplPack, <span class="string">"dao.txt"</span>));</span><br><span class="line">managerImplTpl = <span class="keyword">new</span> File(getFilePath(tplPack, <span class="string">"manager_impl.txt"</span>));</span><br><span class="line">managerTpl = <span class="keyword">new</span> File(getFilePath(tplPack, <span class="string">"manager.txt"</span>));</span><br><span class="line">actionTpl = <span class="keyword">new</span> File(getFilePath(tplPack, <span class="string">"action.txt"</span>));</span><br><span class="line">pageListTpl = <span class="keyword">new</span> File(getFilePath(tplPack, <span class="string">"page_list.txt"</span>));</span><br><span class="line">pageAddTpl = <span class="keyword">new</span> File(getFilePath(tplPack, <span class="string">"page_add.txt"</span>));</span><br><span class="line">pageEditTpl = <span class="keyword">new</span> File(getFilePath(tplPack, <span class="string">"page_edit.txt"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stringToFile</span><span class="params">(File file, String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">FileUtils.writeStringToFile(file, s, ENCODING);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"true"</span>.equals(prop.getProperty(<span class="string">"is_dao"</span>))) &#123;</span><br><span class="line">stringToFile(daoImplFile, readTpl(daoImplTpl));</span><br><span class="line">stringToFile(daoFile, readTpl(daoTpl));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"true"</span>.equals(prop.getProperty(<span class="string">"is_manager"</span>))) &#123;</span><br><span class="line">stringToFile(managerImplFile, readTpl(managerImplTpl));</span><br><span class="line">stringToFile(managerFile, readTpl(managerTpl));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"true"</span>.equals(prop.getProperty(<span class="string">"is_action"</span>))) &#123;</span><br><span class="line">stringToFile(actionFile, readTpl(actionTpl));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"true"</span>.equals(prop.getProperty(<span class="string">"is_page"</span>))) &#123;</span><br><span class="line">stringToFile(pageListFile, readTpl(pageListTpl));</span><br><span class="line">stringToFile(pageAddFile, readTpl(pageAddTpl));</span><br><span class="line">stringToFile(pageEditFile, readTpl(pageEditTpl));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">log.warn(<span class="string">"write file faild! "</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">readTpl</span><span class="params">(File tpl)</span> </span>&#123;</span><br><span class="line">String content = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">content = FileUtils.readFileToString(tpl, ENCODING);</span><br><span class="line">Set&lt;Object&gt; ps = prop.keySet();</span><br><span class="line"><span class="keyword">for</span> (Object o : ps) &#123;</span><br><span class="line">String key = (String) o;</span><br><span class="line">String value = prop.getProperty(key);</span><br><span class="line">content = content.replaceAll(<span class="string">"\\#\\&#123;"</span> + key + <span class="string">"\\&#125;"</span>, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">log.warn(<span class="string">"read file faild. "</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> content;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getFilePath</span><span class="params">(String packageName, String name)</span> </span>&#123;</span><br><span class="line">log.debug(<span class="string">"replace:"</span> + packageName);</span><br><span class="line">String path = packageName.replaceAll(<span class="string">"\\."</span>, <span class="string">"/"</span>);</span><br><span class="line">log.debug(<span class="string">"after relpace:"</span> + path);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"src/"</span> + path + <span class="string">"/"</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">loadProperties();</span><br><span class="line">prepareFile();</span><br><span class="line">prepareTemplate();</span><br><span class="line">writeFile();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String packName = <span class="string">"com.jeecms.common.developer.template"</span>;</span><br><span class="line">String fileName = <span class="string">"template.properties"</span>;</span><br><span class="line"><span class="keyword">new</span> ModuleGenerator(packName, fileName).generate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Entity模板"><a href="#Entity模板" class="headerlink" title="Entity模板"></a>Entity模板</h3><pre><code>使用hibernateMapping插件生成</code></pre><h3 id="Dao模板"><a href="#Dao模板" class="headerlink" title="Dao模板"></a>Dao模板</h3><p>​    dao.txt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package #&#123;dao_p&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.hibernate4.Updater;</span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.page.Pagination;</span><br><span class="line">import #&#123;entity_p&#125;.#&#123;Entity&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> #</span>&#123;Entity&#125;Dao &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Pagination <span class="title">getPage</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize)</span></span>;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; findById(Integer id);</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; save(#&#123;Entity&#125; bean);</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; updateByUpdater(Updater&lt;#&#123;Entity&#125;&gt; updater);</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; deleteById(Integer id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DaoImpl模板"><a href="#DaoImpl模板" class="headerlink" title="DaoImpl模板"></a>DaoImpl模板</h3><p>​    dao_impl.txt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package #&#123;dao_impl_p&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Criteria;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.hibernate4.HibernateBaseDao;</span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.page.Pagination;</span><br><span class="line">import #&#123;dao_p&#125;.#&#123;Entity&#125;Dao;</span><br><span class="line">import #&#123;entity_p&#125;.#&#123;Entity&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line">public class #&#123;Entity&#125;DaoImpl extends HibernateBaseDao&lt;#&#123;Entity&#125;, Integer&gt; implements #&#123;Entity&#125;Dao &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Pagination <span class="title">getPage</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">Criteria crit = createCriteria();</span><br><span class="line">Pagination page = findByCriteria(crit, pageNo, pageSize);</span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; findById(Integer id) &#123;</span><br><span class="line">#&#123;Entity&#125; entity = get(id);</span><br><span class="line"><span class="keyword">return</span> entity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; save(#&#123;Entity&#125; bean) &#123;</span><br><span class="line">getSession().save(bean);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; deleteById(Integer id) &#123;</span><br><span class="line">#&#123;Entity&#125; entity = super.get(id);</span><br><span class="line"><span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</span><br><span class="line">getSession().delete(entity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> entity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">protected Class&lt;#&#123;Entity&#125;&gt; getEntityClass() &#123;</span><br><span class="line">return #&#123;Entity&#125;.class;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Manager模板"><a href="#Manager模板" class="headerlink" title="Manager模板"></a>Manager模板</h3><p>​    manager.txt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package #&#123;manager_p&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.page.Pagination;</span><br><span class="line">import #&#123;entity_p&#125;.#&#123;Entity&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> #</span>&#123;Entity&#125;Mng &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Pagination <span class="title">getPage</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize)</span></span>;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; findById(Integer id);</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; save(#&#123;Entity&#125; bean);</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; update(#&#123;Entity&#125; bean);</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; deleteById(Integer id);</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125;[] deleteByIds(Integer[] ids);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ManagerImpl模板"><a href="#ManagerImpl模板" class="headerlink" title="ManagerImpl模板"></a>ManagerImpl模板</h3><p>​    manager_impl.txt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package #&#123;manager_impl_p&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.hibernate4.Updater;</span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.page.Pagination;</span><br><span class="line">import #&#123;dao_p&#125;.#&#123;Entity&#125;Dao;</span><br><span class="line">import #&#123;entity_p&#125;.#&#123;Entity&#125;;</span><br><span class="line">import #&#123;manager_p&#125;.#&#123;Entity&#125;Mng;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">public class #&#123;Entity&#125;MngImpl implements #&#123;Entity&#125;Mng &#123;</span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Pagination <span class="title">getPage</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">Pagination page = dao.getPage(pageNo, pageSize);</span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br><span class="line">public #&#123;Entity&#125; findById(Integer id) &#123;</span><br><span class="line">#&#123;Entity&#125; entity = dao.findById(id);</span><br><span class="line"><span class="keyword">return</span> entity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; save(#&#123;Entity&#125; bean) &#123;</span><br><span class="line">dao.save(bean);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; update(#&#123;Entity&#125; bean) &#123;</span><br><span class="line">Updater&lt;#&#123;Entity&#125;&gt; updater = new Updater&lt;#&#123;Entity&#125;&gt;(bean);</span><br><span class="line">bean = dao.updateByUpdater(updater);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; deleteById(Integer id) &#123;</span><br><span class="line">#&#123;Entity&#125; bean = dao.deleteById(id);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125;[] deleteByIds(Integer[] ids) &#123;</span><br><span class="line">#&#123;Entity&#125;[] beans = new #&#123;Entity&#125;[ids.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>,len = ids.length; i &lt; len; i++) &#123;</span><br><span class="line">beans[i] = deleteById(ids[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> beans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private #&#123;Entity&#125;Dao dao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(#&#123;Entity&#125;Dao dao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dao = dao;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Action模板"><a href="#Action模板" class="headerlink" title="Action模板"></a>Action模板</h3><p>​    action.txt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">package #&#123;action_p&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.jeecms.common.page.SimplePage.cpn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.annotation.RequiresPermissions;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">import #&#123;entity_p&#125;.#&#123;Entity&#125;;</span><br><span class="line"><span class="keyword">import</span> com.jeecms.core.entity.CmsSite;</span><br><span class="line">import #&#123;manager_p&#125;.#&#123;Entity&#125;Mng;</span><br><span class="line"><span class="keyword">import</span> com.jeecms.core.web.util.CmsUtils;</span><br><span class="line"><span class="keyword">import</span> com.jeecms.core.web.WebErrors;</span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.page.Pagination;</span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.web.CookieUtils;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> #</span>&#123;Entity&#125;Act &#123;</span><br><span class="line">private static final Logger log = LoggerFactory.getLogger(#&#123;Entity&#125;Act.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"#&#123;config_entity&#125;:v_list"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/#&#123;config_entity&#125;/v_list.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Integer pageNo, HttpServletRequest request, ModelMap model)</span> </span>&#123;</span><br><span class="line">Pagination pagination = manager.getPage(cpn(pageNo), CookieUtils</span><br><span class="line">.getPageSize(request));</span><br><span class="line">model.addAttribute(<span class="string">"pagination"</span>,pagination);</span><br><span class="line">model.addAttribute(<span class="string">"pageNo"</span>,pagination.getPageNo());</span><br><span class="line"><span class="keyword">return</span> <span class="string">"#&#123;config_entity&#125;/list"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"#&#123;config_entity&#125;:v_add"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/#&#123;config_entity&#125;/v_add.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"#&#123;config_entity&#125;/add"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"#&#123;config_entity&#125;:v_edit"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/#&#123;config_entity&#125;/v_edit.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">(Integer id, Integer pageNo, HttpServletRequest request, ModelMap model)</span> </span>&#123;</span><br><span class="line">WebErrors errors = validateEdit(id, request);</span><br><span class="line"><span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line"><span class="keyword">return</span> errors.showErrorPage(model);</span><br><span class="line">&#125;</span><br><span class="line">model.addAttribute(<span class="string">"#&#123;entity&#125;"</span>, manager.findById(id));</span><br><span class="line">model.addAttribute(<span class="string">"pageNo"</span>,pageNo);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"#&#123;config_entity&#125;/edit"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"#&#123;config_entity&#125;:o_save"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/#&#123;config_entity&#125;/o_save.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(#&#123;Entity&#125; bean, HttpServletRequest request, ModelMap model)</span> </span>&#123;</span><br><span class="line">WebErrors errors = validateSave(bean, request);</span><br><span class="line"><span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line"><span class="keyword">return</span> errors.showErrorPage(model);</span><br><span class="line">&#125;</span><br><span class="line">bean = manager.save(bean);</span><br><span class="line">log.info(<span class="string">"save #&#123;Entity&#125; id=&#123;&#125;"</span>, bean.getId());</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:v_list.do"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"#&#123;config_entity&#125;:o_update"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/#&#123;config_entity&#125;/o_update.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(#&#123;Entity&#125; bean, Integer pageNo, HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">ModelMap model)</span> </span>&#123;</span><br><span class="line">WebErrors errors = validateUpdate(bean.getId(), request);</span><br><span class="line"><span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line"><span class="keyword">return</span> errors.showErrorPage(model);</span><br><span class="line">&#125;</span><br><span class="line">bean = manager.update(bean);</span><br><span class="line">log.info(<span class="string">"update #&#123;Entity&#125; id=&#123;&#125;."</span>, bean.getId());</span><br><span class="line"><span class="keyword">return</span> list(pageNo, request, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"#&#123;config_entity&#125;:o_delete"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/#&#123;config_entity&#125;/o_delete.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Integer[] ids, Integer pageNo, HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">ModelMap model)</span> </span>&#123;</span><br><span class="line">WebErrors errors = validateDelete(ids, request);</span><br><span class="line"><span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line"><span class="keyword">return</span> errors.showErrorPage(model);</span><br><span class="line">&#125;</span><br><span class="line">#&#123;Entity&#125;[] beans = manager.deleteByIds(ids);</span><br><span class="line">for (#&#123;Entity&#125; bean : beans) &#123;</span><br><span class="line">log.info(<span class="string">"delete #&#123;Entity&#125; id=&#123;&#125;"</span>, bean.getId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list(pageNo, request, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> WebErrors <span class="title">validateSave</span><span class="params">(#&#123;Entity&#125; bean, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">WebErrors errors = WebErrors.create(request);</span><br><span class="line">CmsSite site = CmsUtils.getSite(request);</span><br><span class="line">bean.setSite(site);</span><br><span class="line"><span class="keyword">return</span> errors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> WebErrors <span class="title">validateEdit</span><span class="params">(Integer id, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">WebErrors errors = WebErrors.create(request);</span><br><span class="line">CmsSite site = CmsUtils.getSite(request);</span><br><span class="line"><span class="keyword">if</span> (vldExist(id, site.getId(), errors)) &#123;</span><br><span class="line"><span class="keyword">return</span> errors;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> errors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> WebErrors <span class="title">validateUpdate</span><span class="params">(Integer id, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">WebErrors errors = WebErrors.create(request);</span><br><span class="line">CmsSite site = CmsUtils.getSite(request);</span><br><span class="line"><span class="keyword">if</span> (vldExist(id, site.getId(), errors)) &#123;</span><br><span class="line"><span class="keyword">return</span> errors;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> errors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> WebErrors <span class="title">validateDelete</span><span class="params">(Integer[] ids, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">WebErrors errors = WebErrors.create(request);</span><br><span class="line">CmsSite site = CmsUtils.getSite(request);</span><br><span class="line"><span class="keyword">if</span> (errors.ifEmpty(ids, <span class="string">"ids"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> errors;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Integer id : ids) &#123;</span><br><span class="line">vldExist(id, site.getId(), errors);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> errors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">vldExist</span><span class="params">(Integer id, Integer siteId, WebErrors errors)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (errors.ifNull(id, <span class="string">"id"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">#&#123;Entity&#125; entity = manager.findById(id);</span><br><span class="line">if(errors.ifNotExist(entity, #&#123;Entity&#125;.class, id)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!entity.getSite().getId().equals(siteId)) &#123;</span><br><span class="line">errors.notInSite(#&#123;Entity&#125;.class, id);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">private #&#123;Entity&#125;Mng manager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面增加模板"><a href="#页面增加模板" class="headerlink" title="页面增加模板"></a>页面增加模板</h3><p>​    page_add.txt</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#include</span> "/#&#123;<span class="attr">config_sys</span>&#125;/<span class="attr">head.html</span>"/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">"#jvForm"</span>).validate();</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-positon"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rpos"</span>&gt;</span><span class="tag">&lt;<span class="name">@s.m</span> "<span class="attr">global.position</span>"/&gt;</span>: <span class="tag">&lt;<span class="name">@s.m</span> "#&#123;<span class="attr">entity</span>&#125;<span class="attr">.function</span>"/&gt;</span> - <span class="tag">&lt;<span class="name">@s.m</span> "<span class="attr">global.add</span>"/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"ropt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"return-button"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"&lt;@s.m "</span><span class="attr">global.backToList</span>"/&gt;</span>" onclick="this.form.action='v_list.do';"/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body-box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.form</span> <span class="attr">id</span>=<span class="string">"jvForm"</span> <span class="attr">action</span>=<span class="string">"o_save.do"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.text</span> <span class="attr">label</span>=<span class="string">"#&#123;entity&#125;.name"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"required"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.td</span>&gt;</span><span class="tag">&lt;<span class="name">@p.submit</span> <span class="attr">code</span>=<span class="string">"global.submit"</span>/&gt;</span> &amp;nbsp; <span class="tag">&lt;<span class="name">@p.reset</span> <span class="attr">code</span>=<span class="string">"global.reset"</span>/&gt;</span><span class="tag">&lt;/<span class="name">@p.td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">@p.form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页面修改模板"><a href="#页面修改模板" class="headerlink" title="页面修改模板"></a>页面修改模板</h3><p>​    page_edit.txt</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#include</span> "/#&#123;<span class="attr">config_sys</span>&#125;/<span class="attr">head.html</span>"/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">"#jvForm"</span>).validate();</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-positon"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rpos"</span>&gt;</span><span class="tag">&lt;<span class="name">@s.m</span> "<span class="attr">global.position</span>"/&gt;</span>:  <span class="tag">&lt;<span class="name">@s.m</span> "#&#123;<span class="attr">entity</span>&#125;<span class="attr">.function</span>"/&gt;</span> - <span class="tag">&lt;<span class="name">@s.m</span> "<span class="attr">global.edit</span>"/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"ropt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"return-button"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"&lt;@s.m "</span><span class="attr">global.backToList</span>"/&gt;</span>" onclick="this.form.action='v_list.do';"/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body-box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.form</span> <span class="attr">id</span>=<span class="string">"jvForm"</span> <span class="attr">action</span>=<span class="string">"o_update.do"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.text</span> <span class="attr">label</span>=<span class="string">"#&#123;entity&#125;.name"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">#&#123;entity&#125;.name</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"required"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.td</span>&gt;</span><span class="tag">&lt;<span class="name">@p.hidden</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">#&#123;entity&#125;.id/</span>&gt;</span><span class="tag">&lt;<span class="name">@p.submit</span> <span class="attr">code</span>=<span class="string">"global.submit"</span>/&gt;</span> &amp;nbsp; <span class="tag">&lt;<span class="name">@p.reset</span> <span class="attr">code</span>=<span class="string">"global.reset"</span>/&gt;</span><span class="tag">&lt;/<span class="name">@p.td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">@p.form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页面列表模板"><a href="#页面列表模板" class="headerlink" title="页面列表模板"></a>页面列表模板</h3><p>​    page_list.txt</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#include</span> "/#&#123;<span class="attr">config_sys</span>&#125;/<span class="attr">head.html</span>"/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">getTableForm</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="built_in">document</span>.getElementById(<span class="string">'tableForm'</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">optDelete</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(Pn.checkedCount(<span class="string">'ids'</span>)&lt;=<span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">$.alert(<span class="string">"&lt;@s.m 'global.prompt'/&gt;"</span>,<span class="string">"&lt;@s.m 'error.checkRecord'/&gt;"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">$.confirm(doDelete,<span class="string">"&lt;@s.m 'global.confirm'/&gt;"</span>,<span class="string">"&lt;@s.m 'global.confirm.delete'/&gt;"</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">doDelete</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> f = getTableForm();</span></span><br><span class="line"><span class="javascript">f.action=<span class="string">"o_delete.do"</span>;</span></span><br><span class="line"><span class="undefined">f.submit();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-positon"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rpos"</span>&gt;</span><span class="tag">&lt;<span class="name">@s.m</span> "<span class="attr">global.position</span>"/&gt;</span>: <span class="tag">&lt;<span class="name">@s.m</span> "#&#123;<span class="attr">entity</span>&#125;<span class="attr">.function</span>"/&gt;</span> - <span class="tag">&lt;<span class="name">@s.m</span> "<span class="attr">global.list</span>"/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"ropt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"add"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"&lt;@s.m "</span><span class="attr">global.add</span>"/&gt;</span>" onclick="this.form.action='v_add.do';"/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body-box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"tableForm"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"pageNo"</span> <span class="attr">value</span>=<span class="string">"$&#123;pageNo!&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.table</span> <span class="attr">value</span>=<span class="string">pagination;#&#123;entity&#125;,i,has_next</span>&gt;</span><span class="tag">&lt;<span class="name">#rt</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.column</span> <span class="attr">title</span>=<span class="string">"&lt;input type='checkbox' onclick='Pn.checkbox(\"</span><span class="attr">ids</span>\",<span class="attr">this.checked</span>)'/&gt;</span>" width="20"&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'checkbox'</span> <span class="attr">name</span>=<span class="string">'ids'</span> <span class="attr">value</span>=<span class="string">'$&#123;#&#123;entity&#125;.id&#125;'</span>/&gt;</span><span class="tag">&lt;<span class="name">#t</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">@p.column</span>&gt;</span><span class="tag">&lt;<span class="name">#t</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.column</span> <span class="attr">title</span>=<span class="string">"ID"</span>&gt;</span>$&#123;#&#123;entity&#125;.id&#125;<span class="tag">&lt;/<span class="name">@p.column</span>&gt;</span><span class="tag">&lt;<span class="name">#t</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.column</span> <span class="attr">code</span>=<span class="string">"#&#123;entity&#125;.name"</span>&gt;</span>$&#123;#&#123;entity&#125;.name&#125;<span class="tag">&lt;/<span class="name">@p.column</span>&gt;</span><span class="tag">&lt;<span class="name">#t</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.column</span> <span class="attr">code</span>=<span class="string">"global.operate"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"v_edit.do?id=$&#123;#&#123;entity&#125;.id&#125;&amp;pageNo=$&#123;pageNo!&#125;"</span> <span class="attr">class</span>=<span class="string">"pn-opt"</span>&gt;</span><span class="tag">&lt;<span class="name">@s.m</span> "<span class="attr">global.edit</span>"/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> | <span class="tag">&lt;<span class="name">#rt</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"o_delete.do?ids=$&#123;#&#123;entity&#125;.id&#125;&amp;pageNo=$&#123;pageNo!&#125;"</span> <span class="attr">onclick</span>=<span class="string">"if(!$.confirmToUrl(this.href)) &#123;return false;&#125;"</span> <span class="attr">class</span>=<span class="string">"pn-opt"</span>&gt;</span><span class="tag">&lt;<span class="name">@s.m</span> "<span class="attr">global.delete</span>"/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">#t</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">@p.column</span>&gt;</span><span class="tag">&lt;<span class="name">#t</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">@p.table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"del-button"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"&lt;@s.m "</span><span class="attr">global.delete</span>"/&gt;</span>" onclick="optDelete();"/&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#include</span> "/<span class="attr">common</span>/<span class="attr">alert_message.html</span>"/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>com.jeecms.cms.template.CmsModuleGenerator.java</code>打开后<code>Run As—java application</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0152.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;技术点：采用SpringMVC3+Spring3+Hibernate3+Freemarker主流技术架构&lt;br&gt;
    
    </summary>
    
      <category term="CMS" scheme="http://www.iskei.cn/categories/CMS/"/>
    
    
      <category term="CMS" scheme="http://www.iskei.cn/tags/CMS/"/>
    
  </entry>
  
  <entry>
    <title>Logback日志组件的使用</title>
    <link href="http://www.iskei.cn/posts/17154.html"/>
    <id>http://www.iskei.cn/posts/17154.html</id>
    <published>2018-03-11T08:44:36.000Z</published>
    <updated>2018-04-18T09:00:50.186Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0151.jpg" alt="image"></p><p>Logback是由log4j创始人设计的又一个开源日志组件。<br><a id="more"></a></p><h2 id="一-logback的介绍"><a href="#一-logback的介绍" class="headerlink" title="一. logback的介绍"></a>一. logback的介绍</h2><p>​     logback当前分成三个模块：logback-core,logback- classic和logback-access。logback-core是其它两个模块的基础模块。logback-classic是log4j的一个 改良版本。此外logback-classic完整实现<a href="http://www.oschina.net/p/slf4j" target="_blank" rel="noopener">SLF4J API</a>使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging。logback-access访问模块与Servlet容器集成提供通过Http来访问日志的功能。 Logback是要与SLF4J结合起来用两个组件的官方网站如下：</p><ol><li><p>​    logback的官方网站： <a href="http://logback.qos.ch/download.html" target="_blank" rel="noopener">http://logback.qos.ch</a></p></li><li><p>​    SLF4J的官方网站：<a href="http://www.slf4j.org/download.html" target="_blank" rel="noopener">http://www.slf4j.org</a></p></li></ol><p>​    本文章用到的组件如下：请自行到官方网站下载！</p><p>​    <code>logback-access-1.0.0.jar</code></p><p><code>​    logback-classic-1.0.0.jar</code></p><p>​<code>logback-core-1.0.0.jar</code></p><p>​<code>slf4j-api-1.6.0.jar</code></p><h2 id="二-logback取代-log4j的理由："><a href="#二-logback取代-log4j的理由：" class="headerlink" title="二. logback取代 log4j的理由："></a>二. logback取代 log4j的理由：</h2><p>​    Logback和log4j是非常相似的，如果你对log4j很熟悉，那对logback很快就会得心应手。下面列了logback相对于log4j的一些优点：</p><p>​    1. 更快的实现  Logback的内核重写了，在一些关键执行路径上性能提升10倍以上。而且logback不仅性能提升了，初始化内存加载也更小了。</p><p>​    2. 非常充分的测试  Logback经过了几年，数不清小时的测试。Logback的测试完全不同级别的。在作者的观点，这是简单重要的原因选择logback而不是log4j。</p><p>​    3. Logback-classic非常自然实现了SLF4j    Logback-classic实现了 SLF4j。在使用SLF4j中，你都感觉不到logback-classic。而且因为logback-classic非常自然地实现了SLF4J，  所 以切换到log4j或者其他，非常容易，只需要提供成另一个jar包就OK，根本不需要去动那些通过SLF4JAPI实现的代码。</p><p>​    4. 非常充分的文档  官方网站有两百多页的文档。</p><p>​    5. 自动重新加载配置文件  当配置文件修改了，Logback-classic能自动重新加载配置文件。扫描过程快且安全，它并不需要另外创建一个扫描线程。这个技术充分保证了应用程序能跑得很欢在JEE环境里面。</p><p>​    6. Lilith   Lilith是log事件的观察者，和log4j的chainsaw类似。而lilith还能处理大数量的log数据 。</p><p>​    7. 谨慎的模式和非常友好的恢复  在谨慎模式下，多个FileAppender实例跑在多个JVM下，能 够安全地写道同一个日志文件。RollingFileAppender会有些限制。Logback的FileAppender和它的子类包括 RollingFileAppender能够非常友好地从I/O异常中恢复。</p><p>​    8. 配置文件可以处理不同的情况   开发人员经常需要判断不同的Logback配置文件在不同的环境下（开发，测试，生产）。而这些配置文件仅仅只有一些很小的不同，可以通过,和来实现，这样一个配置文件就可以适应多个环境。</p><p>​    9. Filters（过滤器）  有些时候，需要诊断一个问题，需要打出日志。在log4j，只有降低日志级别，不过这样会打出大量的日志，会影响应用性能。在Logback，你可以继续 保持那个日志级别而除掉某种特殊情况，如alice这个用户登录，她的日志将打在DEBUG级别而其他用户可以继续打在WARN级别。要实现这个功能只需 加4行XML配置。可以参考MDCFIlter 。</p><ol><li><p>SiftingAppender（一个非常多功能的Appender）  它可以用来分割日志文件根据任何一个给定的运行参数。如，SiftingAppender能够区别日志事件跟进用户的Session，然后每个用户会有一个日志文件。</p></li><li><p>自动压缩已经打出来的log  RollingFileAppender在产生新文件的时候，会自动压缩已经打出来的日志文件。压缩是个异步过程，所以甚至对于大的日志文件，在压缩过程中应用不会受任何影响。</p></li><li><p>堆栈树带有包版本  Logback在打出堆栈树日志时，会带上包的数据。</p></li><li><p>自动去除旧的日志文件  通过设置TimeBasedRollingPolicy或者SizeAndTimeBasedFNATP的maxHistory属性，你可以控制已经产生日志文件的最大数量。如果设置maxHistory 12，那那些log文件超过12个月的都会被自动移除。</p></li></ol><p>​    总之，logback比log4j太优秀了，让我们的应用全部建立logback上吧 ！</p><h2 id="三-Logback的配置介绍"><a href="#三-Logback的配置介绍" class="headerlink" title="三. Logback的配置介绍"></a>三. Logback的配置介绍</h2><p>​    1.  Logger. appender及layout</p><p>​       Logger作为日志的记录器，把它关联到应用的对应的context上后，主要用于存放日志对象，也可以定义日志类型. 级别。</p><p>​    Appender主要用于指定日志输出的目的地，目的地可以是控制台. 文件. 远程套接字服务器.  MySQL. PostreSQL.  Oracle和其他数据库.  JMS和远程UNIX Syslog守护进程等。 </p><p>​    Layout 负责把事件转换成字符串，格式化的日志信息的输出。</p><p>​     2. logger context</p><p>​       各个logger 都被关联到一个 LoggerContext，LoggerContext负责制造logger，也负责以树结构排列各logger。其他所有logger也通过org.slf4j.LoggerFactory 类的静态方法getLogger取得。 getLogger方法以 logger 名称为参数。用同一名字调用LoggerFactory.getLogger 方法所得到的永远都是同一个logger对象的引用。</p><ol><li>有效级别及级别的继承</li></ol><p>​      Logger 可以被分配级别。级别包括：TRACE. DEBUG. INFO. WARN 和 ERROR，定义于ch.qos.logback.classic.Level类。如果 logger没有被分配级别，那么它将从有被分配级别的最近的祖先那里继承级别。root logger 默认级别是 DEBUG。</p><ol><li>打印方法与基本的选择规则</li></ol><p>​    打印方法决定记录请求的级别。例如，如果 L 是一个 logger 实例，那么，语句 L.info(“..”)是一条级别为 INFO 的记录语句。记录请求的级别在高于或等于其 logger 的有效级别时被称为被启用，否则，称为被禁用。记录请求级别为 p，其 logger的有效级别为 q，只有则当 p&gt;=q时，该请求才会被执行。</p><p>​    该规则是 logback 的核心。级别排序为： TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR。 </p><h2 id="四-Logback的默认配置"><a href="#四-Logback的默认配置" class="headerlink" title="四. Logback的默认配置"></a>四. Logback的默认配置</h2><p>​      如果配置文件 logback-test.xml 和 logback.xml 都不存在，那么 logback 默认地会调用BasicConfigurator ，创建一个最小化配置。最小化配置由一个关联到根 logger 的ConsoleAppender 组成。输出用模式为<code>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n 的PatternLayoutEncoder</code> 进行格式化。root logger 默认级别是 DEBUG。</p><p>​     1. Logback的配置文件</p><p>​      Logback 配置文件的语法非常灵活。正因为灵活，所以无法用 DTD 或 XML schema 进行定义。尽管如此，可以这样描述配置文件的基本结构：<code>以&lt;configuration&gt;开头，后面有零个或多个&lt;appender&gt;元素，有零个或多个&lt;logger&gt;元素，有最多一个&lt;root&gt;元素。</code></p><p>​     2. Logback默认配置的步骤</p><p>​     (1). 尝试在 classpath 下查找文件 logback-test.xml；</p><p>​     (2). 如果文件不存在，则查找文件 logback.xml；</p><p>​     (3). 如果两个文件都不存在，logback 用 Bas icConfigurator 自动对自己进行配置，这会导致记录输出到控制台。</p><p>​    3. Logback.xml 文件     </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"c:/log"</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 日志输出编码 --&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">Encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">Encoding</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span>   </span><br><span class="line">             <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n   </span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>   </span><br><span class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 --&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span>  <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">Encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">Encoding</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/myApp.log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span>   </span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n   </span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </span><br><span class="line">       <span class="tag">&lt;/<span class="name">layout</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span> </span><br><span class="line">   <span class="comment">&lt;!-- show parameters for hibernate sql 专为 Hibernate 定制 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.type.descriptor.sql.BasicBinder"</span>  <span class="attr">level</span>=<span class="string">"TRACE"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.type.descriptor.sql.BasicExtractor"</span>  <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.SQL"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.engine.QueryParameters"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.engine.query.HQLQueryPlan"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span> </span><br><span class="line">     </span><br><span class="line">     <span class="comment">&lt;!--日志异步到数据库 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"DB"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.db.DBAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志异步到数据库 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">connectionSource</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.db.DriverManagerConnectionSource"</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--连接池 --&gt;</span> </span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">driverClass</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driverClass</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">url</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/databaseName<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">user</span>&gt;</span>root<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">password</span>&gt;</span>root<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">connectionSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span> --&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五-在程序用引用Logback"><a href="#五-在程序用引用Logback" class="headerlink" title="五. 在程序用引用Logback"></a>五. 在程序用引用Logback</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stu.system.action; </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogAction</span></span>&#123;</span><br><span class="line">     <span class="comment">//定义一个全局的记录器，通过LoggerFactory获取</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(BlogAction.class); </span><br><span class="line">     /</span><br><span class="line">     * <span class="meta">@param</span> args</span><br><span class="line">     */</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"logback 成功了"</span>);</span><br><span class="line">        logger.error(<span class="string">"logback 成功了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="http://dl.iteye.com/topics/download/60fe3971-ae5f-3528-9b48-cc4ff89aab30" target="_blank" rel="noopener">Logback手册.pdf</a> (3.6 MB)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0151.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Logback是由log4j创始人设计的又一个开源日志组件。&lt;br&gt;
    
    </summary>
    
      <category term="Log" scheme="http://www.iskei.cn/categories/Log/"/>
    
    
      <category term="Log" scheme="http://www.iskei.cn/tags/Log/"/>
    
  </entry>
  
  <entry>
    <title>库内新增对象的流程及其他技巧</title>
    <link href="http://www.iskei.cn/posts/38066.html"/>
    <id>http://www.iskei.cn/posts/38066.html</id>
    <published>2018-03-10T08:44:36.000Z</published>
    <updated>2018-04-18T09:00:50.174Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0150.jpg" alt="image"></p><p>cms开发 ———— 库内新增对象Products的流程说明及其他技巧<br><a id="more"></a></p><h3 id="第一步：Entity"><a href="#第一步：Entity" class="headerlink" title="第一步：Entity"></a>第一步：Entity</h3><ol><li><code>com.jeecms.cms.entity.assist.base</code>下建立模型基础类<code>BaseCmsProducts.java</code></li><li><code>com.jeecms.cms.entity.assist</code>  下建立对象类继承继承模型CmsProducts.java</li><li><code>com.jeecms.cms.entity.assist.hbm</code> 配置hibernate对象映射CmsProducts.hbm.xml</li><li><code>src .ehcache-hibernate.xml</code> 缓存对象配置：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"com.jeecms.cms.entity.assist.CmsProducts"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">maxElementsInMemory</span>=<span class="string">"100"</span> <span class="attr">eternal</span>=<span class="string">"false"</span> <span class="attr">timeToIdleSeconds</span>=<span class="string">"600"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"7200"</span> <span class="attr">overflowToDisk</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第二步：Dao"><a href="#第二步：Dao" class="headerlink" title="第二步：Dao"></a>第二步：Dao</h3><ol><li><code>com.jeecms.cms.dao.assist</code>数据库交互持久层DAO接口和实现<code>ProductsDao.java</code> <code>ProductsDaoImpl.java</code> </li><li>配置<code>WebRoot/WEB-INF/config/jeecms-context.xml</code>文件:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cmsproductsDao"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"com.jeecms.cms.dao.assist.impl.CmsProductsDaoImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第三步：Service"><a href="#第三步：Service" class="headerlink" title="第三步：Service"></a>第三步：Service</h3><ol><li><code>com.jeecms.cms.manager.assist</code>业务层接口和实现，<code>ProductsMng.java , ProductsMngImpl.java</code></li><li>配置<code>WebRoot/WEB-INF/config/jeecms-context.xml</code>文件:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cmsProductsMng"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"com.jeecms.cms.manager.assist.impl.CmsProductsMngImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第四步：Action"><a href="#第四步：Action" class="headerlink" title="第四步：Action"></a>第四步：Action</h3><ol><li><code>com.jeecms.cms.action.front</code> 写Action与前台对接，<code>ProductsAct.java</code></li><li>XML配置：<code>jeecms-servlet-front-action.xml</code> </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"productsAct"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"com.jeecms.cms.action.front.ProductsAct"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol><li><code>com.jeecms.cms.action.admin.assist</code> （加、删、改）写Action与后台对接<code>CmsProductsAct.java</code> </li><li>XML配置：<code>jeecms-servlet-admin-action.xml</code> </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cmsProductsAct"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"com.jeecms.cms.action.admin.assist.CmsProductsAct"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第五步：Directive"><a href="#第五步：Directive" class="headerlink" title="第五步：Directive"></a>第五步：Directive</h3><ol><li><code>com.jeecms.cms.action.directive</code> (设置并返回标签对象<code>[@cms_products_page]</code>)</li><li>配置<code>WebRoot/WEB-INF/config/jeecms-context.xml</code>文件:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cms_products_page"</span> </span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"com.jeecms.cms.action.directive.CmsProductsDirective"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"staticPageSvc"</span> <span class="attr">class</span>=<span class="string">"com.jeecms.cms.staticpage.StaticPageSvcImpl"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tplMessageSource"</span> <span class="attr">ref</span>=<span class="string">"tplMessageSource"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"freeMarkerConfigurer"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"freemarkerVariables"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>此处添加标签的配置信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"cms_products_page"</span> <span class="attr">value-ref</span>=<span class="string">"cms_products_page"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置<code>WebRoot/WEB-INF/config/ Jeecms-servlet-front.xml</code>文件:</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"freemarkerConfig"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"freemarkerVariables"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>此处添加标签的配置信息： </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"cms_products_page"</span> <span class="attr">value-ref</span>=<span class="string">"cms_products_page"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="特别注意点："><a href="#特别注意点：" class="headerlink" title="特别注意点："></a>特别注意点：</h3><ol><li>对象模板位置控制：<code>com.jeecms.cms.action.front.ProductsAct.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方案路径site.getSolutionPath()=”/WEB-INF/t/cms/www/default”</span></span><br><span class="line"><span class="comment">// TPLDIR_SPECIAL="special" 模板位置</span></span><br><span class="line"><span class="comment">// PRODUCTS_INDEX= "tpl.productsIndex"; 模板名称</span></span><br><span class="line"><span class="keyword">return</span> FrontUtils.getTplPath(request, site.getSolutionPath(),TPLDIR_SPECIAL, PRODUCTS_INDEX);</span><br></pre></td></tr></table></figure><ol><li><code>PRODUCTS_INDEX</code>对象需要在国际化处进行设置：<code>WebRoot/WEB-INF/languages/jeecms_tpl/messages_zh_CN.properties</code> ：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tpl.productsIndex=products_index</span><br></pre></td></tr></table></figure><h3 id="国际化文件说明："><a href="#国际化文件说明：" class="headerlink" title="国际化文件说明："></a>国际化文件说明：</h3><ol><li><code>WEB-INF/languages/fck</code>  友情提示</li><li><p><code>WEB-INF/languages/jeecms_admin</code>  (后台)功能页面，如：首页》内容统计 <code>statistic.function.content=内容统计</code></p></li><li><p><code>WEB-INF/languages/jeecms_front</code>  (前台)友情提示，如：验证码错误。</p></li><li><p><code>WEB-INF/languages/jeecms_tpl</code>    (前台)功能页面，如：投票内容页， <code>tpl.tagDetail=voteIndex</code></p></li><li><p><code>WEB-INF/languages/jeecore_admin</code> 功能按钮、提示信息，如：<code>global.submit=提交，global.confirm.logout=您确定退出吗？</code></p></li></ol><h3 id="修改后台访问地址"><a href="#修改后台访问地址" class="headerlink" title="修改后台访问地址"></a>修改后台访问地址</h3><p>将<code>jeeadmin/jeecms/index.do</code> 改为<code>admin/index.do</code>为例</p><ol><li>修改<code>WebContent\WEB-INF\web.xml</code> </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>JeeCmsAdmin<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/jeeadmin/jeecms/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改为 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>JeeCmsAdmin<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>修改<code>WebContent\WEB-INF\config\jeecms-servlet-admin.xml</code> </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"appBase"</span> <span class="attr">value</span>=<span class="string">"/jeeadmin/jeecms"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>改为 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"appBase"</span> <span class="attr">value</span>=<span class="string">"/admin"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol><li>修改<code>WebContent\WEB-INF\config\shiro-context.xml</code> </li></ol><p>把 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*.jspx = anon </span><br><span class="line">*.jhtml = anon </span><br><span class="line">/member/forgot_password.jspx = anon </span><br><span class="line">/member/password_reset.jspx = anon </span><br><span class="line">/login.jspx = authc </span><br><span class="line">/logout.jspx = logout </span><br><span class="line">/member/** = user </span><br><span class="line">/jeeadmin/jeecms/login.do = authc </span><br><span class="line">/jeeadmin/jeecms/logout.do = logout </span><br><span class="line">/jeeadmin/jeecms/** =user</span><br></pre></td></tr></table></figure><p>改为              </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*.jspx = anon </span><br><span class="line">  *.jhtml = anon </span><br><span class="line">  /member/forgot_password.jspx = anon </span><br><span class="line">  /member/password_reset.jspx = anon </span><br><span class="line">  /login.jspx = authc </span><br><span class="line">  /logout.jspx = logout </span><br><span class="line">  /member/** = user </span><br><span class="line">  /admin/login.do = authc </span><br><span class="line">  /admin/logout.do = logout </span><br><span class="line">  /admin/** =user</span><br></pre></td></tr></table></figure><p>把 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminLogin"</span> <span class="attr">value</span>=<span class="string">"/jeeadmin/jeecms/login.do"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminPrefix"</span> <span class="attr">value</span>=<span class="string">"/jeeadmin/jeecms/"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>改为 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminLogin"</span> <span class="attr">value</span>=<span class="string">"/admin/login.do"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminPrefix"</span> <span class="attr">value</span>=<span class="string">"/admin/"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>把 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminIndex"</span> <span class="attr">value</span>=<span class="string">"/jeeadmin/jeecms/index.do"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>改为 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminIndex"</span> <span class="attr">value</span>=<span class="string">"/admin/index.do"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol><li>修改<code>\src\com\jeecms\cms\web\AdminContextInterceptor.java</code> </li></ol><p>把</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getURI</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IllegalStateException </span>&#123; </span><br><span class="line">        UrlPathHelper helper = <span class="keyword">new</span> UrlPathHelper(); </span><br><span class="line">        String uri = helper.getOriginatingRequestUri(request); </span><br><span class="line">        String ctxPath = helper.getOriginatingContextPath(request); </span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, i = <span class="number">0</span>, count = <span class="number">2</span> </span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(ctxPath)) &#123; </span><br><span class="line">            count++; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">while</span> (i &lt; count &amp;&amp; start != -<span class="number">1</span>) &#123; </span><br><span class="line">            start = uri.indexOf(<span class="string">'/'</span>, start + <span class="number">1</span>); </span><br><span class="line">            i++; </span><br><span class="line">        &#125; </span><br><span class="line">    <span class="keyword">if</span> (start &lt;= <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"admin access path not like '/jeeadmin/jeecms/...' pattern: "</span> + uri); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> uri.substring(start); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改为 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getURI</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IllegalStateException </span>&#123; </span><br><span class="line">        UrlPathHelper helper = <span class="keyword">new</span> UrlPathHelper(); </span><br><span class="line">        String uri = helper.getOriginatingRequestUri(request); </span><br><span class="line">        String ctxPath = helper.getOriginatingContextPath(request); </span><br><span class="line">        <span class="comment">// int start = 0, i = 0, count = 2;修改 </span></span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, i = <span class="number">0</span>, count = <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(ctxPath)) &#123; </span><br><span class="line">            count++; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">while</span> (i &lt; count &amp;&amp; start != -<span class="number">1</span>) &#123; </span><br><span class="line">            start = uri.indexOf(<span class="string">'/'</span>, start + <span class="number">1</span>); </span><br><span class="line">            i++; </span><br><span class="line">        &#125;   </span><br><span class="line">    <span class="keyword">if</span> (start &lt;= <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"admin access path not like '/admin/...' pattern: "</span> + uri); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> uri.substring(start); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过数据库修改密码"><a href="#通过数据库修改密码" class="headerlink" title="通过数据库修改密码"></a>通过数据库修改密码</h3><ol><li>通过数据库修改admin密码</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> core_user;</span><br><span class="line">|       1 | admin      | jobar     | 0230504dd5de96d2f6784d45d1bc7633 |</span><br></pre></td></tr></table></figure><p>密码已经是被加密过的了。</p><ol><li><p>密码加密类：<code>com.ponyjava.common.util.Md5PwdEncoder</code></p><p>例如我想将密码设为“zhaozh”,就先用这个类加密，然后更新数据库就ok了。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Md5PwdEncoder encoder = <span class="keyword">new</span> Md5PwdEncoder();</span><br><span class="line">System.out.println(encoder.encodePassword(<span class="string">"zhaozh"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：<code>f06238ff925a61f9c62de7d64c64bad3</code></p><p>mysql&gt;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> core_user <span class="keyword">set</span> <span class="keyword">password</span>=<span class="string">'f06238ff925a61f9c62de7d64c64bad3'</span> <span class="keyword">where</span> user_id=<span class="string">'1'</span>;</span><br></pre></td></tr></table></figure><ol><li>再次登录就ok了。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0150.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;cms开发 ———— 库内新增对象Products的流程说明及其他技巧&lt;br&gt;
    
    </summary>
    
      <category term="cms" scheme="http://www.iskei.cn/categories/cms/"/>
    
    
      <category term="cms" scheme="http://www.iskei.cn/tags/cms/"/>
    
  </entry>
  
  <entry>
    <title>API开发规范</title>
    <link href="http://www.iskei.cn/posts/51267.html"/>
    <id>http://www.iskei.cn/posts/51267.html</id>
    <published>2018-02-28T08:44:36.000Z</published>
    <updated>2018-04-18T09:00:50.146Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0148.jpg" alt="image"></p><p>API开发规范<br><a id="more"></a></p><h6 id="整体规范建议采用RESTful-方式来实施。"><a href="#整体规范建议采用RESTful-方式来实施。" class="headerlink" title="整体规范建议采用RESTful 方式来实施。"></a>整体规范建议采用RESTful 方式来实施。</h6><h1 id="1-协议"><a href="#1-协议" class="headerlink" title="1. 协议"></a>1. 协议</h1><p>API与用户的通信协议，总是使用HTTPs协议，确保交互数据的传输安全。</p><h1 id="2-域名"><a href="#2-域名" class="headerlink" title="2. 域名"></a>2. 域名</h1><p>应该尽量将API部署在专用域名之下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.example.com</span><br></pre></td></tr></table></figure><p>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://example.org/api/</span><br></pre></td></tr></table></figure><h1 id="3-api版本控制"><a href="#3-api版本控制" class="headerlink" title="3. api版本控制"></a>3. api版本控制</h1><p>应该将API的版本号放入URL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.example.com/v&#123;n&#125;/</span><br></pre></td></tr></table></figure><p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。</p><p>采用多版本并存，增量发布的方式</p><p>v{n} n代表版本号,分为整形和浮点型</p><p>整形的版本号: 大功能版本发布形式；具有当前版本状态下的所有API接口 ,例如：v1,v2</p><p>浮点型：为小版本号，只具备补充api的功能，其他api都默认调用对应大版本号的api 例如：v1.1 v2.2</p><h1 id="4-API-路径规则"><a href="#4-API-路径规则" class="headerlink" title="4. API 路径规则"></a>4. API 路径规则</h1><p>路径又称”终点”（endpoint），表示API的具体网址。</p><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://api.example.com/v1/products</span><br><span class="line"></span><br><span class="line">https://api.example.com/v1/users</span><br><span class="line"></span><br><span class="line">https://api.example.com/v1/employees</span><br></pre></td></tr></table></figure><h1 id="5-HTTP请求方式"><a href="#5-HTTP请求方式" class="headerlink" title="5. HTTP请求方式"></a>5. HTTP请求方式</h1><p>对于资源的具体操作类型，由HTTP动词表示。</p><p>常用的HTTP动词有下面四个（括号里是对应的SQL命令）。</p><p>GET（SELECT）：从服务器取出资源（一项或多项）。</p><p>POST（CREATE）：在服务器新建一个资源。</p><p>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</p><p>DELETE（DELETE）：从服务器删除资源。</p><p>下面是一些例子。</p><p>GET /product：列出所有商品</p><p>POST /product：新建一个商品</p><p>GET /product/ID：获取某个指定商品的信息</p><p>PUT /product/ID：更新某个指定商品的信息</p><p>DELETE /product/ID：删除某个商品</p><p>GET /product/ID/purchase ：列出某个指定商品的所有投资者</p><p>get /product/ID/purchase/ID：获取某个指定商品的指定投资者信息</p><h1 id="6-过滤信息"><a href="#6-过滤信息" class="headerlink" title="6. 过滤信息"></a>6. 过滤信息</h1><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p><p>下面是一些常见的参数。</p><p>?limit=10：指定返回记录的数量</p><p>?offset=10：指定返回记录的开始位置。</p><p>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</p><p>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</p><p>?producy_type=1：指定筛选条件</p><h1 id="7-API-传入参数"><a href="#7-API-传入参数" class="headerlink" title="7. API 传入参数"></a>7. API 传入参数</h1><p>传入参数分为4种类型：</p><p>地址栏参数</p><p>* restful 地址栏参数 /api/v1/product/122 122为产品编号，获取产品为122的信息</p><p>* get方式的查询字串 见过滤信息小节</p><p>请求body数据</p><p>cookie</p><p>request header</p><p>cookie和header 一般都是用于OAuth认证的2种途径</p><h1 id="8-返回数据"><a href="#8-返回数据" class="headerlink" title="8. 返回数据"></a>8. 返回数据</h1><p>只要api接口成功接到请求，就不能返回200以外的HTTP状态。</p><p>为了保障前后端的数据交互的顺畅，建议规范数据的返回，并采用固定的数据格式封装。</p><p>接口返回模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    status:0,</span><br><span class="line"></span><br><span class="line">    data:&#123;&#125;||[],</span><br><span class="line"></span><br><span class="line">    msg:’’</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>status: 接口的执行的状态</p><p>=0表示成功</p>&lt;0 表示有异常=””<br><br>Data 接口的主数据<br><br>可以根据实际返回数组或JSON对象<br><br>Msg 信息<br><br>当status!=0 都应该有错误信息<br><br># 9. 非Restful Api的需求<br><br>由于实际业务开展过程中，可能会出现各种的api不是简单的restful 规范能实现的，因此，需要有一些api突破restful规范原则。特别是移动互联网的api设计，更需要有一些特定的api来优化数据请求的交互。<br><br>## 9.1 页面级的api<br><br>把当前页面中需要用到的所有数据通过一个接口一次性返回全部数据<br><br>举例<br><br>api/v1/get-home-data 返回首页用到的所有数据<br><br>这类API有一个非常不好的地址，只要业务需求变动，这个api就需要跟着变更。<br><br>## 9.2 自定义组合api<br><br>把当前用户需要在第一时间内容加载的多个接口合并成一个请求发送到服务端，服务端根据请求内容，一次性把所有数据合并返回,相比于页面级api，具备更高的灵活性，同时又能很容易的实现页面级的api功能。<br><br>规范<br><br>地址：api/v1/batApi<br><br>传入参数：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data:[</span><br><span class="line">    &#123;url:&apos;api1&apos;,type:&apos;get&apos;,data:&#123;...&#125;&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;url:&apos;api2&apos;,type:&apos;get&apos;,data:&#123;...&#125;&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;url:&apos;api3&apos;,type:&apos;get&apos;,data:&#123;...&#125;&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;url:&apos;api4&apos;,type:&apos;get&apos;,data:&#123;...&#125;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>返回数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    status:0,</span><br><span class="line">    msg:&apos;&apos;,</span><br><span class="line">    data:[</span><br><span class="line">        &#123;status:0,msg:&apos;&apos;,data:[]&#125;,</span><br><span class="line"></span><br><span class="line">        &#123;status:-1,msg:&apos;&apos;,data:&#123;&#125;&#125;,</span><br><span class="line"></span><br><span class="line">        &#123;status:1,msg:&apos;&apos;,data:&#123;&#125;&#125;,</span><br><span class="line"></span><br><span class="line">        &#123;status:0,msg:&apos;&apos;,data:[]&#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-Api共建平台"><a href="#10-Api共建平台" class="headerlink" title="10. Api共建平台"></a>10. Api共建平台</h1><p>RAP是一个GUI的WEB接口管理工具。在RAP中，您可定义接口的URL、请求&amp;响应细节格式等等。通过分析这些数据，RAP提供MOCK服务、测试服务等自动化工具。RAP同时提供大量企业级功能，帮助企业和团队高效的工作。</p><h2 id="10-1-什么是RAP"><a href="#10-1-什么是RAP" class="headerlink" title="10.1 什么是RAP?"></a>10.1 什么是RAP?</h2><p>在前后端分离的开发模式下，我们通常需要定义一份接口文档来规范接口的具体信息。如一个请求的地址、有几个参数、参数名称及类型含义等等。RAP 首先方便团队录入、查看和管理这些接口文档，并通过分析结构化的文档数据，重复利用并生成自测数据、提供自测控制台等等… 大幅度提升开发效率。</p><h2 id="10-2-RAP的特色"><a href="#10-2-RAP的特色" class="headerlink" title="10.2 RAP的特色"></a>10.2 RAP的特色</h2><p>强大的GUI工具 给力的用户体验，你将会爱上使用RAP来管理您的API文档。</p><p>完善的MOCK服务 文档定义好的瞬间，所有接口已经准备就绪。有了MockJS，无论您的业务模型有多复杂，它都能很好的满足。</p><p>庞大的用户群 RAP在阿里巴巴有200多个大型项目在使用，也有许多著名的公司、开源人士在使用。RAP跟随这些业务的成行而成长，专注细节，把握质量，经得住考验。</p><p>免费 + 专业的技术支持 RAP是免费的，而且你的技术咨询都将在24小时内得到答复。大多数情况，在1小时内会得到答复。</p><p>RAP是一个可视化接口管理工具 通过分析接口结构，动态生成模拟数据，校验真实接口正确性， 围绕接口定义，通过一系列自动化工具提升我们的协作效率。我们的口号：提高效率，回家吃晚饭！</p><h1 id="11-RESTful接口规范"><a href="#11-RESTful接口规范" class="headerlink" title="11. RESTful接口规范"></a>11. RESTful接口规范</h1><h2 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h2><h3 id="URI规范"><a href="#URI规范" class="headerlink" title="URI规范"></a>URI规范</h3><ol><li><p>不用大写；</p></li><li><p>用中杠 - 不用下杠 _ ；</p></li><li><p>参数列表要encode；</p></li><li><p>URI中的名词表示资源集合，使用复数形式。</p></li><li><p>在RESTful<a href="http://lib.csdn.net/base/architecture" target="_blank" rel="noopener">架构</a>中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词（特殊情况可以使用动词），而且所用的名词往往与<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="noopener">数据库</a>的表格名对应。</p></li></ol><p>资源集合 vs单个资源</p><p>URI表示资源的两种方式：资源集合、单个资源。</p><p>资源集合：</p><pre><code>/zoos //所有动物园/zoos/1/animals //id为1的动物园中的所有动物</code></pre><p>单个资源：</p><pre><code>/zoos/1//id为1的动物园/zoos/1;2;3//id为1，2，3的动物园</code></pre><p>避免层级过深的URI</p><p>在url中表达层级，用于 按实体关联关系进行对象导航 ，一般根据id导航。</p><p>过深的导航容易导致url膨胀，不易维护，如 GET /zoos/1/areas/3/animals/4 ，尽量使用查询参数代替路径中的实体导航，如 GET/animals?zoo=1&amp;area=3 ；</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>应该将API的版本号放入到URI中</p><p>​           <a href="https://api.example.com/v1/zoos" target="_blank" rel="noopener">https://api.example.com/v1/zoos</a></p><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>HTTP方法</p><p>通过标准HTTP方法对资源CRUD：</p><ol><li>GET：查询（从服务器取出资源一项或多项）</li></ol><p>GET /zoos</p><p>GET /zoos/1</p><p>GET/zoos/1/employees</p><p>POST：创建单个新资源。 POST一般向“资源集合”型uri发起</p><p>POST/animals  //新增动物</p><p>POST/zoos/1/employees //为id为1的动物园雇佣员工</p><ol><li>PUT：更新单个资源（全量），客户端提供完整的更新后的资源。与之对应的是 PATCH，PATCH负责部分更新，客户端提供要更新的那些字段。 PUT/PATCH一般向“单个资源”型uri发起</li></ol><p>PUT/animals/1</p><p>PUT /zoos/1</p><ol><li>DELETE：删除</li></ol><p>DELETE/zoos/1/employees/2</p><p>DELETE/zoos/1/employees/2;4;5</p><p>DELETE/zoos/1/animals  //删除id为1的动物园内的所有动物</p><p>HEAD / OPTION/ PATCH用的不多，就不多解释了。</p><ol><li>HEAD：获取资源的元数据</li><li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的</li><li>PATCH：在服务器更新资源（客户端提供改变的属性）</li></ol><p>安全性和幂等性</p><ol><li><p>安全性 ：不会改变资源状态，可以理解为只读的；</p></li><li><p>幂等性 ：执行1次和执行N次，对资源状态改变的效果是等价的。</p></li></ol><table><thead><tr><th>.</th><th>安全性</th><th>幂等性</th></tr></thead><tbody><tr><td>GET</td><td>√</td><td>√</td></tr><tr><td>POST</td><td>×</td><td>×</td></tr><tr><td>PUT</td><td>×</td><td>√</td></tr><tr><td>DELETE</td><td>×</td><td>√</td></tr></tbody></table><p>安全性和幂等性均不保证反复请求能拿到相同的response。以 DELETE为例，第一次DELETE返回200表示删除成功，第二次返回404提示资源不存在，这是允许的。</p><p>复杂查询</p><p>查询可以捎带以下参数：</p><table><thead><tr><th>.</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>过滤条件</td><td>?type=1&amp;age=16</td><td>允许一定的uri冗余，如 /zoos/1 与 /zoos?id=1</td></tr><tr><td>排序</td><td>?sort=age&amp;order=asc</td><td>指定返回结果按照哪个属性排序，以及排序顺序</td></tr><tr><td>投影</td><td>?whitelist=id,name,email</td><td></td></tr><tr><td>分页</td><td>? page=2&amp;per_page=100</td><td>指定第几页，以及每页的记录数</td></tr></tbody></table><p>Bookmarker</p><p>经常使用的、复杂的查询标签化，降低维护成本。</p><p>如：GET /trades?status=closed&amp;sort=created,desc</p><p>快捷方式：GET /trades#recently-closed或者GET /trades/recently-closed</p><p>状态码</p><pre><code>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</code></pre><p>§200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</p><p>§201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</p><p>§202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</p><p>§204 NO CONTENT - [DELETE]：用户删除数据成功。</p><p>§400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</p><p>§401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</p><p>§403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</p><p>§404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</p><p>§406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</p><p>§410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</p><p>§422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</p><p>§500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</p><p>状态码的完全列表参见<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">这里</a></p><p>URI失效</p><p>随着系统发展，总有一些API失效或者迁移，对失效的API，返回404 not found 或 410 gone；对迁移的API，返回 301重定向。</p><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><ol><li>不要包装：</li></ol><p>response的 body 直接就是数据，不要做多余的包装。错误示例：</p><p>{</p><p>   “success”:true,</p><p>   “data”:{“id”:1,”name”:”xiaotuan”},</p><p>}</p><ol><li>各HTTP方法成功处理后的数据格式：</li></ol><table><thead><tr><th>·</th><th>response 格式</th></tr></thead><tbody><tr><td>GET</td><td>单个对象、集合</td></tr><tr><td>POST</td><td>新增成功的对象</td></tr><tr><td>PUT/PATCH</td><td>更新成功的对象</td></tr><tr><td>DELETE</td><td>空</td></tr></tbody></table><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ol><li><p>不要发生了错误但给2xx响应，客户端可能会缓存成功的http请求；</p></li><li><p>正确设置http状态码，不要自定义；</p></li><li><p>Response body提供</p></li></ol><p>即:返回的信息中将error作为键名，出错信息作为键值即可</p><p>1)错误的代码（日志/问题追查）；</p><p>2)错误的描述文本（展示给用户）。</p><p>对第三点的实现稍微多说一点：</p><p>Java服务器端一般用异常表示 RESTful API的错误。API 可能抛出两类异常：业务异常和非业务异常。 业务异常 由自己的业务代码抛出，表示一个用例的前置条件不满足、业务规则冲突等，比如参数校验不通过、权限校验失败。 非业务类异常 表示不在预期内的问题，通常由类库、框架抛出，或由于自己的代码逻辑错误导致，比如数据库连接失败、空指针异常、除0错误等等。</p><p>业务类异常必须提供2种信息：</p><ol><li><p>如果抛出该类异常，HTTP响应状态码应该设成什么；</p></li><li><p>异常的文本描述；</p></li></ol><p>在Controller层使用统一的异常拦截器：</p><ol><li><p>设置 HTTP响应状态码：对业务类异常，用它指定的 HTTPcode；对非业务类异常，统一500；</p></li><li><p>Response Body的错误码：异常类名</p></li><li><p>Response Body的错误描述：对业务类异常，用它指定的错误文本；对非业务类异常，线上可以统一文案如“服务器端错误，请稍后再试”，开发或测试环境中用异常的 stacktrace，服务器端提供该行为的开关。</p></li></ol><p>常用的http状态码及使用场景：</p><table><thead><tr><th>状态码</th><th>使用场景</th></tr></thead><tbody><tr><td>400 bad request</td><td>常用在参数校验</td></tr><tr><td>401 unauthorized</td><td>未经验证的用户，常见于未登录。如果经过验证后依然没权限，应该 403（即 authentication和 authorization的区别）。</td></tr><tr><td>403 forbidden</td><td>无权限</td></tr><tr><td>404 not found</td><td>资源不存在</td></tr><tr><td>500 internal server error</td><td>非业务类异常</td></tr><tr><td>503 service unavaliable</td><td>由容器抛出，自己的代码不要抛这个异常</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>（1）API的身份认证应该使用OAuth2.0框架</p><p>（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML</p><p>（3）比较复杂的接口不能确定是使用POST还是PUT时，要看具体的业务层代码，看看接口产生的结果是否幂等，如果幂等用PUT，相反用POST</p><p>​      如：接口接收到一资源，资源存在更新，不存在插入新数据，这个接口就要用PUT</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0148.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;API开发规范&lt;br&gt;
    
    </summary>
    
      <category term="API" scheme="http://www.iskei.cn/categories/API/"/>
    
    
      <category term="API" scheme="http://www.iskei.cn/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>cms开发资料</title>
    <link href="http://www.iskei.cn/posts/48599.html"/>
    <id>http://www.iskei.cn/posts/48599.html</id>
    <published>2018-02-27T08:44:36.000Z</published>
    <updated>2018-04-18T09:00:50.174Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0147.jpg" alt="image"></p><p>开发文档<br><a id="more"></a></p><h1 id="1-系统架构概述"><a href="#1-系统架构概述" class="headerlink" title="1. 系统架构概述"></a>1. 系统架构概述</h1><p>本系统核心架构为FreeMarker+hibernate+Spirng的mvc分层架构。</p><h2 id="1-1分层架构模型"><a href="#1-1分层架构模型" class="headerlink" title="1.1分层架构模型"></a>1.1分层架构模型</h2><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms002.png" alt="img"></p><h2 id="1-2数据流转模型-前端"><a href="#1-2数据流转模型-前端" class="headerlink" title="1.2数据流转模型(前端)"></a>1.2数据流转模型(前端)</h2><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms004.png" alt="img"></p><h1 id="2-框架目录介绍"><a href="#2-框架目录介绍" class="headerlink" title="2.框架目录介绍"></a>2.框架目录介绍</h1><h2 id="2-1Cms包介绍"><a href="#2-1Cms包介绍" class="headerlink" title="2.1Cms包介绍"></a>2.1Cms包介绍</h2><table><thead><tr><th>具体包名</th><th>相关功能描述</th></tr></thead><tbody><tr><td>com\mi\cms</td><td>常量包</td></tr><tr><td>com\mi\cms\action</td><td>通用action抽象类包</td></tr><tr><td>com\mi\cms\action\directive</td><td>cms自定义标签包,公用部分继承于abs包</td></tr><tr><td>com\mi\cms\action\directive\abs</td><td>公用部分自定义标签的抽象包</td></tr><tr><td>com\mi\cms\action\front</td><td>前台action包</td></tr><tr><td>com\mi\cms\action\member</td><td>会员中心包</td></tr><tr><td>com\mi\cms\api</td><td></td></tr><tr><td>com\mi\cms\api\admin\assist</td><td>Api辅助包</td></tr><tr><td>com\mi\cms\api\admin\main</td><td>Api主要controller包</td></tr><tr><td>com\mi\cms\api\front</td><td>API前端包</td></tr><tr><td>com\mi\cms\api\member</td><td>Api会员中心包</td></tr><tr><td>com\mi\cms\dao\assist</td><td>辅助dao的接口层</td></tr><tr><td>com\mi\cms\dao\assist\impl</td><td>辅助dao的接口实现层</td></tr><tr><td>com\mi\cms\dao\main</td><td>核心的dao接口层</td></tr><tr><td>com\mi\cms\dao\main\impl</td><td>核心的dao接口实现层</td></tr><tr><td>com\mi\cms\entity\assist</td><td>cms辅助实体类子类</td></tr><tr><td>com\mi\cms\entity\assist\base</td><td>cms辅助实体类基类</td></tr><tr><td>com\mi\cms\entity\assist\hbm</td><td>hibernate辅助实体类的关系映射文件</td></tr><tr><td>com\mi\cms\entity\back</td><td>cms备份实体类子类</td></tr><tr><td>com\mi\cms\entity\back\base</td><td>cms备份实体类基类</td></tr><tr><td>com\mi\cms\entity\back\hbm</td><td>hibernate备份实体类类的关系映射文件</td></tr><tr><td>com\mi\cms\entity\main</td><td>cms核心实体类子类</td></tr><tr><td>com\mi\cms\entity\main\base</td><td>cms核心实体类基类</td></tr><tr><td>com\mi\cms\entity\main\hbm</td><td>hibernate核心实体类的关系映射文件</td></tr><tr><td>com\mi\cms\lucene</td><td>搜索引擎封装包</td></tr><tr><td>com\mi\cms\manager\assist</td><td>辅助的service接口层</td></tr><tr><td>com\mi\cms\manager\assist\impl</td><td>辅助的service接口实现层</td></tr><tr><td>com\mi\cms\manager\main</td><td>核心的service接口层</td></tr><tr><td>com\mi\cms\manager\main\impl</td><td>核心的service接口实现层</td></tr><tr><td>com\mi\cms\service</td><td>service封装层</td></tr><tr><td>com\mi\cms\staticpage</td><td>静态页的封装包包</td></tr><tr><td>com\mi\cms\staticpage\exception</td><td>静态页的异常处理类型</td></tr><tr><td>com\mi\cms\statistic</td><td>内容发布统计包</td></tr><tr><td>com\mi\cms\statistic\workload</td><td>流量统计包</td></tr><tr><td>com\mi\cms\web</td><td>拦截器包</td></tr><tr><td>com\mi\cms\task</td><td>任务包</td></tr><tr><td>com\mi\cms\task\job</td><td>具体任务包</td></tr></tbody></table><h2 id="2-2Common包介绍"><a href="#2-2Common包介绍" class="headerlink" title="2.2Common包介绍"></a>2.2Common包介绍</h2><table><thead><tr><th>具体包名</th><th>相关功能描述</th></tr></thead><tbody><tr><td>com\mi\common\captcha</td><td>验证码封装包</td></tr><tr><td>com\mi\common\dic</td><td>分词</td></tr><tr><td>com\mi\common\email</td><td>邮件包</td></tr><tr><td>com\mi\common\fck</td><td>fck编辑器封装包</td></tr><tr><td>com\mi\common\file</td><td>文件操作封装包</td></tr><tr><td>com\mi\common\hibernate4</td><td>hibeinate封装包</td></tr><tr><td>com\mi\common\image</td><td>图片的封装包</td></tr><tr><td>com\mi\common\ipseek</td><td>ip地址库封装</td></tr><tr><td>com\mi\common\lucene</td><td>收索引擎的基础包</td></tr><tr><td>com\mi\common\office</td><td>文档转换相关工具类</td></tr><tr><td>com\mi\common\page</td><td>jeecms分页封装包</td></tr><tr><td>com\mi\common\security</td><td>安全认证相关的包</td></tr><tr><td>com\mi\common\security\annotation</td><td></td></tr><tr><td>com\mi\common\security\encoder</td><td></td></tr><tr><td>com\mi\common\security\rememberme</td><td></td></tr><tr><td>com\mi\common\security\userdetails</td><td></td></tr><tr><td>com\mi\common\upload</td><td>上传封装包</td></tr><tr><td>com\mi\common\util</td><td>工具包</td></tr><tr><td>com\mi\common\web</td><td>常量包</td></tr><tr><td>com\mi\common\web\freemarker</td><td>freemarker视图封装包</td></tr><tr><td>com\mi\common\web\session</td><td>session包</td></tr><tr><td>com\mi\common\web\session\cache</td><td>session缓存包</td></tr><tr><td>com\mi\common\web\springmvc</td><td>springMVC的简单封装</td></tr><tr><td>com\mi\cms\manager\main</td><td>核心的service接口层</td></tr><tr><td>com\mi\cms\manager\main\impl</td><td>核心的service接口实现层</td></tr><tr><td>com\mi\cms\service</td><td>service封装层</td></tr><tr><td>com\mi\cms\staticpage</td><td>静态页的封装包</td></tr><tr><td>com\mi\cms\staticpage\exception</td><td>静态页的异常处理类型</td></tr><tr><td>com\mi\cms\statistic</td><td>流量统计包</td></tr><tr><td>com\mi\cms\statistic\workload</td><td>内容发布统计包</td></tr><tr><td>com\mi\cms\web</td><td>拦截器包</td></tr></tbody></table><h2 id="2-3Core包介绍"><a href="#2-3Core包介绍" class="headerlink" title="2.3Core包介绍"></a>2.3Core包介绍</h2><table><thead><tr><th>具体包名</th><th>相关功能描述</th></tr></thead><tbody><tr><td>com\mi\core</td><td>一般常量和异常处理</td></tr><tr><td>com\mi\core\action\front</td><td>核心前台的action</td></tr><tr><td>com\mi\core\dao</td><td>核心dao的接口</td></tr><tr><td>com\mi\core\dao\impl</td><td>核心dao的接口实现类</td></tr><tr><td>com\mi\core\entity</td><td>登录认证和核心用户的实体子类</td></tr><tr><td>com\mi\core\entity\base</td><td>登录认证和核心用户的实体基类</td></tr><tr><td>com\mi\core\entity\hbm</td><td>相关的hibernate的映射文件</td></tr><tr><td>com\mi\core\manager</td><td>核心的service接口层</td></tr><tr><td>com\mi\core\manager\impl</td><td>核心的service接口实现层</td></tr><tr><td>com\mi\core\security</td><td>认证登录、退出相关</td></tr><tr><td>com\mi\core\tpl</td><td>模板接口和相关service层</td></tr><tr><td>com\mi\core\web</td><td>定义内容显示的接口，工具类，和错误页面的指定</td></tr><tr><td>com\mi\core\web\util</td><td>uri帮助类</td></tr></tbody></table><h2 id="2-4页面资源介绍"><a href="#2-4页面资源介绍" class="headerlink" title="2.4页面资源介绍"></a>2.4页面资源介绍</h2><table><thead><tr><th>具体包名</th><th>相关功能描述</th><th></th></tr></thead><tbody><tr><td>WebContent</td><td></td><td></td></tr><tr><td>r</td><td>前台资源文件，如css、img、js等</td><td></td></tr><tr><td>jeeadmin</td><td>后台页面和资源文件（由vue源码工程打包）</td><td></td></tr><tr><td>thirdparty</td><td>第三方插件（ckeditor编辑器、swf上传、My97DatePicker日期选择）</td><td></td></tr><tr><td>u</td><td>默认的用户上传资源目录</td><td></td></tr><tr><td>WebContent/WEB-INF</td><td></td><td></td></tr><tr><td>cache</td><td>缓存文件</td><td></td></tr><tr><td>common</td><td>通用页面</td><td></td></tr><tr><td>config</td><td>核心的配置文件，如果action，service,manager,dao,bean等  plug为插件配置文件目录</td><td></td></tr><tr><td>directive</td><td>标签向导模板文件</td><td></td></tr><tr><td>error</td><td>错误页面</td><td></td></tr><tr><td>ftl</td><td>自定义的freemark宏文件</td><td></td></tr><tr><td>ispeek</td><td>ip地址库</td><td></td></tr><tr><td>languages</td><td>国际化配置</td><td></td></tr><tr><td></td><td>jeecms/admin</td><td>后台</td></tr><tr><td></td><td>jeecms/front</td><td>前台</td></tr><tr><td></td><td>jeecms/tpl</td><td>模版</td></tr><tr><td></td><td>jeecore/admin</td><td>公用国际化</td></tr><tr><td></td><td>jeecms/adminapi</td><td>API接口消息国际化</td></tr><tr><td></td><td>plug</td><td>插件国际化配置</td></tr><tr><td>lucene</td><td>lucene文件夹</td><td></td></tr><tr><td>t/cms</td><td>前台模板页面</td><td></td></tr><tr><td>t/cms/www</td><td>站点资源目录</td><td></td></tr><tr><td>t/cms/www/default</td><td>站点方案</td></tr></tbody></table><h1 id="3-开发流程指导"><a href="#3-开发流程指导" class="headerlink" title="3. 开发流程指导"></a>3. 开发流程指导</h1><h2 id="3-1展现层"><a href="#3-1展现层" class="headerlink" title="3.1展现层"></a>3.1展现层</h2><h3 id="3-1-1Freemarer介绍"><a href="#3-1-1Freemarer介绍" class="headerlink" title="3.1.1Freemarer介绍"></a>3.1.1Freemarer介绍</h3><p>FreeMarker是一个用Java语言编写的模板引擎，它基于模板来生成文本输出。FreeMarker与Web容器无关，即在Web运行时，它并不知道Servlet或HTTP。它不仅可以用作表现层的实现技术，而且还可以用于生成XML，JSP或Java 等。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms006.png" alt="img"></p><h3 id="3-1-2后台页面"><a href="#3-1-2后台页面" class="headerlink" title="3.1.2后台页面"></a>3.1.2后台页面</h3><p>后台管理页面全部采用vue工程开发，参考</p><p> 4.后台管理页面vue工程开发](#_4.后台管理页面vue工程开发)</p><h3 id="3-1-3前台模版页面"><a href="#3-1-3前台模版页面" class="headerlink" title="3.1.3前台模版页面"></a>3.1.3前台模版页面</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms008.png" alt="img"></p><p>在default目录相应的文件夹添加html，在html文件中引入freemark机制控制control层传输对象的显示。</p><h2 id="3-2控制层"><a href="#3-2控制层" class="headerlink" title="3.2控制层"></a>3.2控制层</h2><h3 id="3-2-1SpringMVC简介"><a href="#3-2-1SpringMVC简介" class="headerlink" title="3.2.1SpringMVC简介"></a>3.2.1SpringMVC简介</h3><p>Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，通过策略接口，Spring 框架是高度可配置的，而且包含多种视图技术，例如 FreeMarker、JavaServer Pages（JSP）技术、Velocity、Tiles、iText和 POI。Spring MVC 框架并不知道使用的视图，所以不会强迫您只使用 JSP 技术。Spring MVC 分离了控制器、模型对象、分派器以及处理程序对象的角色，这种分离让它们更容易进行定制。</p><h3 id="3-2-2控制层实现"><a href="#3-2-2控制层实现" class="headerlink" title="3.2.2控制层实现"></a>3.2.2控制层实现</h3><h4 id="3-2-2-1配置SpringMVC支持"><a href="#3-2-2-1配置SpringMVC支持" class="headerlink" title="3.2.2.1配置SpringMVC支持"></a>3.2.2.1配置SpringMVC支持</h4><p>Web.xml配置Spring后台核心调度器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>JeeCmsAdminApi<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>dispatchOptionsRequest<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              /WEB-INF/config/jeecms-servlet-admin-api.xml</span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Web.xml配置Spring后台核心调度器匹配路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>JeeCmsAdminApi<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/api/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Web.xml配置Spring前台核心调度器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>JeeCmsFront<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              /WEB-INF/config/jeecms-servlet-front.xml</span><br><span class="line"></span><br><span class="line">              /WEB-INF/config/plug/*/-servlet-front-action.xml</span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Web.xml配置Spring前台核心调度器匹配路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>JeeCmsFront<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jhtml<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>JeeCmsFront<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>JeeCmsFront<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>JeeCmsFront<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.htm<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-2Spring-Controller"><a href="#3-2-2-2Spring-Controller" class="headerlink" title="3.2.2.2Spring Controller"></a>3.2.2.2Spring Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">com.mi.cms.api.admin.main核心管理模块Controller</span><br><span class="line">com.mi.cms.api.admin.assist辅助管理模块Controller</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmsLogApiAct</span> </span>&#123;</span><br><span class="line">         <span class="meta">@RequestMapping</span>(<span class="string">"/log/operating_list"</span>)</span><br><span class="line"></span><br><span class="line">         <span class="function">publicvoid <span class="title">list</span><span class="params">(String queryUsername, String queryTitle,Integer category,</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">                            StringqueryIp, Integer pageNo, Integer pageSize,HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">                            HttpServletResponseresponse)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">                   Stringbody = <span class="string">"\"\""</span>;</span><br><span class="line"></span><br><span class="line">                   Stringmessage = Constants.API_MESSAGE_SUCCESS;</span><br><span class="line"></span><br><span class="line">                   Stringcode = ResponseCode.API_CODE_CALL_SUCCESS;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span>(pageNo==<span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                            pageNo=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span>(pageSize==<span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                            pageSize=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span>(category==<span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                            category=CmsLog.OPERATING;</span><br><span class="line"></span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   Paginationpage =<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                   CmsSitesite = CmsUtils.getSite(request);</span><br><span class="line"></span><br><span class="line">                   WebErrorserrors = WebErrors.create(request);</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span>(category.equals(CmsLog.OPERATING)) &#123;</span><br><span class="line"></span><br><span class="line">                            page= manager.getPage(CmsLog.OPERATING, site.getId(),queryUsername, queryTitle,queryIp, pageNo, pageSize);</span><br><span class="line"></span><br><span class="line">                   &#125;elseif (category.equals(CmsLog.LOGIN_SUCCESS)) &#123;</span><br><span class="line"></span><br><span class="line">                            page= manager.getPage(CmsLog.LOGIN_SUCCESS, <span class="keyword">null</span>,queryUsername, queryTitle,queryIp, pageNo, pageSize);</span><br><span class="line"></span><br><span class="line">                   &#125;elseif (category.equals(CmsLog.LOGIN_FAILURE)) &#123;</span><br><span class="line"></span><br><span class="line">                            page= manager.getPage(CmsLog.LOGIN_FAILURE, <span class="keyword">null</span>,<span class="keyword">null</span>, queryTitle, queryIp, pageNo,pageSize);</span><br><span class="line"></span><br><span class="line">                   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                            errors.addErrorString(Constants.API_MESSAGE_PARAM_ERROR);</span><br><span class="line"></span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span>(errors.hasErrors()) &#123;</span><br><span class="line"></span><br><span class="line">                            message= errors.getErrors().get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                            code= ResponseCode.API_CODE_PARAM_ERROR;</span><br><span class="line"></span><br><span class="line">                   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                            inttotalCount = page.getTotalCount();</span><br><span class="line"></span><br><span class="line">                            List&lt;CmsLog&gt;list = (List&lt;CmsLog&gt;) page.getList();</span><br><span class="line"></span><br><span class="line">                            JSONArrayjsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span>(list!=<span class="keyword">null</span>&amp;&amp;list.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                                     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line"></span><br><span class="line">                                               jsonArray.put(i,list.get(i).convertToJson());</span><br><span class="line"></span><br><span class="line">                                     &#125;</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            body= jsonArray.toString()+<span class="string">",\"totalCount\":"</span>+totalCount;</span><br><span class="line"></span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   ApiResponseapiResponse = <span class="keyword">new</span> ApiResponse(request, body, message, code);</span><br><span class="line"></span><br><span class="line">                   ResponseUtils.renderApiJson(response,request, apiResponse);</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//自动装配对象</span></span><br><span class="line">         <span class="meta">@Autowired</span></span><br><span class="line">         privateCmsLogMng manager;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//统一返回JSON对象</span></span><br><span class="line"></span><br><span class="line">ApiResponse apiResponse = newApiResponse(request, body, message, code);</span><br><span class="line">ResponseUtils.renderApiJson(response,request, apiResponse);</span><br></pre></td></tr></table></figure><p>另外一个例子</p><p>//需要签名认证（建议保存、修改、删除类方法添加签名注解）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SignValidate</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/group/save"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(CmsGroup bean,StringviewChannelIds,String contriChannelIds,</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">                            HttpServletRequestrequest,HttpServletResponse response)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">                   Stringbody = <span class="string">"\"\""</span>;</span><br><span class="line"></span><br><span class="line">                   Stringmessage = Constants.API_MESSAGE_PARAM_REQUIRED;</span><br><span class="line"></span><br><span class="line">                   Stringcode = ResponseCode.API_CODE_PARAM_REQUIRED;</span><br><span class="line"></span><br><span class="line">                   WebErrorserrors = WebErrors.create(request);</span><br><span class="line"></span><br><span class="line">                   <span class="comment">//通用认证必填参数</span></span><br><span class="line"></span><br><span class="line">                   errors= ApiValidate.validateRequiredParams(request, errors, bean.getName(),bean.getPriority(),</span><br><span class="line"></span><br><span class="line">                                     bean.getAllowMaxFile(),bean.getAllowPerDay(),bean.getAllowFileSize(),bean.getAllowFileTotal());</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span>(!errors.hasErrors()) &#123;</span><br><span class="line"></span><br><span class="line">                            Integer[]viewChannel = StrUtils.getInts(viewChannelIds);</span><br><span class="line"></span><br><span class="line">                            Integer[]contriChannel = StrUtils.getInts(contriChannelIds);</span><br><span class="line"></span><br><span class="line">                            errors= validateArrayLength(errors, viewChannel, contriChannel);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span>(errors.hasErrors()) &#123;</span><br><span class="line"></span><br><span class="line">                                     message= errors.getErrors().get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                                     code= ResponseCode.API_CODE_PARAM_ERROR;</span><br><span class="line"></span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                                     bean.init();</span><br><span class="line"></span><br><span class="line">                                     bean= manager.save(bean, viewChannel, contriChannel);</span><br><span class="line"></span><br><span class="line">                                     log.info(<span class="string">"saveCmsGroup id=&#123;&#125;"</span>, bean.getId());</span><br><span class="line"></span><br><span class="line">                                     cmsLogMng.operating(request,<span class="string">"cmsGroup.log.save"</span>, <span class="string">"id="</span> + bean.getId()</span><br><span class="line"></span><br><span class="line">                                                        +<span class="string">";name="</span> + bean.getName());</span><br><span class="line"></span><br><span class="line">                                     body=<span class="string">"&#123;\"id\":"</span>+<span class="string">"\""</span>+bean.getId()+<span class="string">"\"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">                                     message =Constants.API_MESSAGE_SUCCESS;</span><br><span class="line"></span><br><span class="line">                                     code= ResponseCode.API_CODE_CALL_SUCCESS;</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   ApiResponseapiResponse = <span class="keyword">new</span> ApiResponse(request, body, message, code);</span><br><span class="line"></span><br><span class="line">                   ResponseUtils.renderApiJson(response,request, apiResponse);</span><br><span class="line"></span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-3SpringMVC扩展配置"><a href="#3-2-2-3SpringMVC扩展配置" class="headerlink" title="3.2.2.3SpringMVC扩展配置"></a>3.2.2.3SpringMVC扩展配置</h4><p><code>jeecms-servlet-admin-api.xml后台Spring国际化、拦截器、SpringMVC视图解析器配置</code></p><p><code>jeecms-servlet-front.xml前台Spring国际化、拦截器、SpringMVC视图解析器配置</code></p><p><code>jeecms-servlet-admin-api-action.xml 后台action配置文件</code></p><p><code>jeecms-servlet-front-action.xml前台action配置文件</code></p><p>配置action bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ftpApiAct"</span><span class="attr">class</span>=<span class="string">"com.mi.cms.api.admin.main.FtpApiAct"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3逻辑层"><a href="#3-3逻辑层" class="headerlink" title="3.3逻辑层"></a>3.3逻辑层</h2><h3 id="3-3-1类存放包介绍"><a href="#3-3-1类存放包介绍" class="headerlink" title="3.3.1类存放包介绍"></a>3.3.1类存放包介绍</h3><p><code>com.mi.cms.manager.main.impl核心service层</code></p><p><code>com.mi.cms.manager.assist.impl 辅助service层</code></p><p><code>com.mi.cms.service 采集、栏目、内容、流量公用service包</code></p><h3 id="3-3-2service类代码编写样例"><a href="#3-3-2service类代码编写样例" class="headerlink" title="3.3.2service类代码编写样例"></a>3.3.2service类代码编写样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmsConfigMngImplimplements</span> <span class="title">CmsConfigMng</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Transactional</span>(readOnly= <span class="keyword">true</span>)</span><br><span class="line"></span><br><span class="line">         <span class="function">publicCmsConfig <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   CmsConfigentity = dao.findById(<span class="number">1</span>);</span><br><span class="line">                   returnentity;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="function">publicvoid <span class="title">updateCountCopyTime</span><span class="params">(Date d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                   dao.findById(<span class="number">1</span>).setCountCopyTime(d);</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">         <span class="function">publicvoid <span class="title">updateCountClearTime</span><span class="params">(Date d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                   dao.findById(<span class="number">1</span>).setCountClearTime(d);</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">         <span class="function">publicCmsConfig <span class="title">update</span><span class="params">(CmsConfig bean)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                   Updater&lt;CmsConfig&gt;updater = <span class="keyword">new</span> Updater&lt;CmsConfig&gt;(bean);</span><br><span class="line"></span><br><span class="line">                   CmsConfigentity = dao.updateByUpdater(updater);</span><br><span class="line"></span><br><span class="line">                  entity.blankToNull();</span><br><span class="line"></span><br><span class="line">                   returnentity;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function">publicMarkConfig <span class="title">updateMarkConfig</span><span class="params">(MarkConfig mark)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                   get().setMarkConfig(mark);</span><br><span class="line"></span><br><span class="line">                   returnmark;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function">publicvoid <span class="title">updateMemberConfig</span><span class="params">(MemberConfig memberConfig)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                   get().getAttr().putAll(memberConfig.getAttr());</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">         privateCmsConfigDao dao;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//自动装配dao层</span></span><br><span class="line"></span><br><span class="line">         <span class="meta">@Autowired</span></span><br><span class="line"></span><br><span class="line">         <span class="function">publicvoid <span class="title">setDao</span><span class="params">(CmsConfigDao dao)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">this</span>.dao= dao;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要<code>@Service@Transactional</code></p><p>注解标志该类为业务逻辑层，所有的service层均采用接口开发模式</p><p><code>@Transactional(readOnly = true)只读事物</code></p><h3 id="3-3-3配置service-bean"><a href="#3-3-3配置service-bean" class="headerlink" title="3.3.3配置service bean"></a>3.3.3配置service bean</h3><p>jeecms-context.xml中增加servicebean的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>   <span class="attr">id</span>=<span class="string">"cmsConfigMng"</span><span class="attr">class</span>=<span class="string">"com.mi.cms.manager.main.impl.CmsConfigMngImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-4持久层"><a href="#3-4持久层" class="headerlink" title="3.4持久层"></a>3.4持久层</h2><h3 id="3-4-1Hibernate4简介"><a href="#3-4-1Hibernate4简介" class="headerlink" title="3.4.1Hibernate4简介"></a>3.4.1Hibernate4简介</h3><p>Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，使得Java程序员可以随心所欲的使用对象编程思维来操作数据库。 Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，也可以在Servlet/JSP的Web应用中使用</p><h3 id="3-4-2DAO类代码编写样例"><a href="#3-4-2DAO类代码编写样例" class="headerlink" title="3.4.2DAO类代码编写样例"></a>3.4.2DAO类代码编写样例</h3><p>持久层采用Hibernate4，缓存采用Ehcache</p><p><code>com.mi.cms.dao.main.impl 核心DAO层</code></p><p><code>com.mi.cms.dao.assist.impl 辅助DAO层</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmsConfigDaoImplextends</span> <span class="title">HibernateBaseDao</span>&lt;<span class="title">CmsConfig</span>, <span class="title">Integer</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">                   <span class="title">implementsCmsConfigDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="function">publicCmsConfig <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                   CmsConfigentity = get(id);</span><br><span class="line"></span><br><span class="line">                   returnentity;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//重写getEntityClass方法</span></span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">         <span class="function">protectedClass&lt;CmsConfig&gt; <span class="title">getEntityClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   returnCmsConfig.class;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Repository注解标志该类是DAO层组件，可以选择继承HibernateBaseDao基础类，需要实现接口。</p><h3 id="3-4-3配置DAO-bean"><a href="#3-4-3配置DAO-bean" class="headerlink" title="3.4.3配置DAO bean"></a>3.4.3配置DAO bean</h3><p>jeecms-context.xml中增加dao bean的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beanid="cmsConfigDao"class="com.mi.cms.dao.main.impl.CmsConfigDaoImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-4POJO"><a href="#3-4-4POJO" class="headerlink" title="3.4.4POJO"></a>3.4.4POJO</h3><p><code>com.mi.cms.entity.main核心功能包的pojo</code></p><p><code>com.mi.cms.entity.main.base 辅助功能包的pojo基础类</code></p><p><code>com.mi.cms.entity.main.hbm 辅助功能包Hibernate实体映射文件</code></p><p><code>com.mi.cms.entity.assist辅助功能包的pojo</code></p><p><code>com.mi.cms.entity.assist.base辅助功能包的pojo基础类</code></p><p><code>com.mi.cms.entity.assist.hbm辅助功能包Hibernate实体映射文件</code></p><h2 id="3-5自定义标签"><a href="#3-5自定义标签" class="headerlink" title="3.5自定义标签"></a>3.5自定义标签</h2><h3 id="3-5-1定义标签类"><a href="#3-5-1定义标签类" class="headerlink" title="3.5.1定义标签类"></a>3.5.1定义标签类</h3><p>​         自定义标签类所属包com.mi.cms.action.directive</p><p>​         标签类需要实现Freemarker内置接口TemplateDirectiveModel     </p><p>​         获取标签参数可以用DirectiveUtils工具类获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> classChannelDirective implements TemplateDirectiveModel &#123;</span><br><span class="line"></span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          * 输入参数，栏目ID。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line"></span><br><span class="line">         publicstatic <span class="keyword">final</span> String PARAM_ID = <span class="string">"id"</span>;</span><br><span class="line"></span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          * 输入参数，栏目路径。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PARAM_PATH =<span class="string">"path"</span>;</span><br><span class="line"></span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          * 输入参数，站点ID。存在时，获取该站点栏目，不存在时获取当前站点栏目。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line"></span><br><span class="line">         publicstatic <span class="keyword">final</span> String PARAM_SITE_ID = <span class="string">"siteId"</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">         <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"></span><br><span class="line">         <span class="function">publicvoid <span class="title">execute</span><span class="params">(Environment env, Map params, TemplateModel[] loopVars,</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">                            TemplateDirectiveBodybody)</span> <span class="keyword">throws</span> TemplateException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">                   CmsSitesite = FrontUtils.getSite(env);</span><br><span class="line"></span><br><span class="line">                   <span class="comment">//getrequired params from directive</span></span><br><span class="line"></span><br><span class="line">                   Integerid = DirectiveUtils.getInt(PARAM_ID, params);</span><br><span class="line"></span><br><span class="line">                   Channelchannel;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span>(id != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                            channel= channelMng.findById(id);</span><br><span class="line"></span><br><span class="line">                   &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                            Stringpath = DirectiveUtils.getString(PARAM_PATH, params);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span>(StringUtils.isBlank(path)) &#123;</span><br><span class="line"></span><br><span class="line">                                     <span class="comment">//如果path不存在，那么id必须存在。</span></span><br><span class="line"></span><br><span class="line">                                     <span class="function">thrownew <span class="title">ParamsRequiredException</span><span class="params">(PARAM_ID)</span></span>;</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            IntegersiteId = DirectiveUtils.getInt(PARAM_SITE_ID, params);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span>(siteId == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                                     siteId= site.getId();</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            channel= channelMng.findByPathForTag(path, siteId);</span><br><span class="line"></span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">                   Map&lt;String,TemplateModel&gt; paramWrap = <span class="keyword">new</span> HashMap&lt;String, TemplateModel&gt;(</span><br><span class="line"></span><br><span class="line">                                     params);</span><br><span class="line"></span><br><span class="line">                   <span class="comment">//putresult to view</span></span><br><span class="line"></span><br><span class="line">                   paramWrap.put(OUT_BEAN,DEFAULT_WRAPPER.wrap(channel));</span><br><span class="line"></span><br><span class="line">                   Map&lt;String,TemplateModel&gt; origMap = DirectiveUtils</span><br><span class="line"></span><br><span class="line">                                     .addParamsToVariable(env,paramWrap);         </span><br><span class="line"></span><br><span class="line">                   <span class="comment">//render result to response</span></span><br><span class="line"></span><br><span class="line">                   body.render(env.getOut());</span><br><span class="line"></span><br><span class="line">                   DirectiveUtils.removeParamsFromVariable(env,paramWrap, origMap);</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//装配所需service</span></span><br><span class="line"></span><br><span class="line">         <span class="meta">@Autowired</span></span><br><span class="line"></span><br><span class="line">         privateChannelMng channelMng;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-2配置标签"><a href="#3-5-2配置标签" class="headerlink" title="3.5.2配置标签"></a>3.5.2配置标签</h3><p>1.jeecms-context.xml配置Spring bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>       <span class="attr">id</span>=<span class="string">"cms_content_list"</span><span class="attr">class</span>=<span class="string">"com.mi.cms.action.directive.ContentListDirective"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>2.jeecms-context 文件中jeecms.properties文件中引入自定义标签bean</p><p>directive.cms_channel_list=cms_channel_list</p><h3 id="3-5-3标签应用"><a href="#3-5-3标签应用" class="headerlink" title="3.5.3标签应用"></a>3.5.3标签应用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[@cms_content_list count='9'titLen='15' orderBy='8' channelOption='1' channelId='1']</span><br><span class="line"></span><br><span class="line">                  [#list tag_list as a]</span><br><span class="line"></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">ahref="$&#123;a.url&#125;"</span> <span class="attr">title</span>=<span class="string">"$&#123;a.title&#125;"</span><span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>[@text_cut s=a.title len=titLenappend=append/]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                  [/#list]</span><br><span class="line"></span><br><span class="line"> [/@cms_content_list]</span><br></pre></td></tr></table></figure><p>cms_content_list标签名称count、titLen、orderBy、channelOption、channelId标签参数</p><p>tag_list标签结果</p><p>a循环变量</p><p>${a.url}输出a对象的url属性</p><h1 id="4-后台管理页面vue工程开发"><a href="#4-后台管理页面vue工程开发" class="headerlink" title="4.后台管理页面vue工程开发"></a>4.后台管理页面vue工程开发</h1><h2 id="4-1环境准备"><a href="#4-1环境准备" class="headerlink" title="4.1环境准备"></a>4.1环境准备</h2><p>Vue简介</p><p>Vue.js提供一个官方命令行工具，可用于快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：</p><p>推荐查阅官方文档<a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/installation.html</a></p><p>1、安装必要环境Node.js   下载地址 <a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a>.   </p><p>安装最新版本Npm（最新版node自带）</p><p>2、开发环境安装和启动</p><p>使用命令行执行以下命令   执行安装node包</p><p>cd  项目路径（vue工程路径）</p><p>npminstall （推荐使用cnpm  install，<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a>  加快依赖下载速度）</p><p>npmrun dev; </p><h2 id="4-2工程包介绍"><a href="#4-2工程包介绍" class="headerlink" title="4.2工程包介绍"></a>4.2工程包介绍</h2><p>目录结构：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms010.png" alt="img"></p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms012.png" alt="img"></p><p>一级目录说明：</p><p>build webpack打包配置文件</p><p>config  全局配置文件api域名 appid配置</p><pre><code> node_modules:node依赖文件夹    src项目源代码static 全局资源文件夹（css images js）</code></pre><p>index.html 入口文件</p><p>二级目录说明:</p><p>\1. config／dev.env.js   开发环境配置文件，修改源代码时会读取此文件中的配置项</p><p>  config／prod.env.js   生产环境配置文件，打包完成时会读取使用此文件中的配置项</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms014.png" alt="img"></p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms016.png" alt="img"></p><p>以上图（config／dev.env.js）为例，定义了6个属性</p><p>  NODE_ENV :标识当前环境 （当前环境为开发者环境）</p><p>  BaseUrl：项目的api资源 地址</p><p>  Appid：项目的appid </p><p>  aesKey：项目的aesKey (加密用)</p><p>  ivKey：项目的ivKey (加密用)</p><p>  appKey：项目的appKey (加密用)</p><p>配置好相应的属性 即可在任意js文件中使用该变量，调用方式为</p><p>process.env.xxx</p><p>process.env.baseUrl</p><p> <img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms018.png" alt="img"></p><p>2.</p><p>src/api  api以及全局拦截器</p><p>src/assets  源码中的资源文件（JS,CSS,iamges）</p><p>src/components  自定义组件目录</p><p>src/directive  自定义指令目录</p><p>src/mixins   自定义混合目录</p><p>src/plugs   第三方插件目录（jquery相关的插件可存放在此）</p><p>src/router    路由，角色目录</p><p>src/store    vuex 定义目录</p><p>src/untils  全局方法，签名，加密函数存放目录</p><p>src/views   功能页面目录</p><p>src/APP.vue  根组件（无需修改）</p><p>src/config.js  项目路径配置文件</p><p>src/main.js   页面入口文件</p><p>src/permissions.js   全局路由钩子配置文件</p><h2 id="4-3新增功能模块讲解"><a href="#4-3新增功能模块讲解" class="headerlink" title="4.3新增功能模块讲解"></a>4.3新增功能模块讲解</h2><h3 id="4-3-1新增页面"><a href="#4-3-1新增页面" class="headerlink" title="4.3.1新增页面"></a>4.3.1新增页面</h3><p>后台管理页面采用单页组件化开发</p><p>功能模块统一存放在src／views目录下，推荐以导航树层级管理页面，例如下图</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms020.png" alt="img"></p><p>1功能某块统一以单文件组件的形式构造，命名以.vue结尾，单文件组件开发详情查看<a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/single-file-components.html</a></p><p>2.页面基础样式框架基于element-ui2.x版本</p><p>3.页面详解：</p><p>此处以用户列表功能为事例说明</p><p>用户功能列表路径为src/views/userMange/list.vue</p><h3 id="4-3-2数据交互"><a href="#4-3-2数据交互" class="headerlink" title="4.3.2数据交互"></a>4.3.2数据交互</h3><p>后台数据交互采用axios,更多</p><p><a href="https://www.npmjs.com/package/axios" target="_blank" rel="noopener">https://www.npmjs.com/package/axios</a>（推荐）</p><p><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">https://www.kancloud.cn/yunye/axios/234845</a>（汉化文档）</p><p>1.创建数据请求方法 (请求方法统一存放在src/api.js文件下)</p><p>2.将所有的接口地址统一存放在src/api.js下如图</p><p> <img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms022.png" alt="img"><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms024.png" alt="img"></p><p> 如图：api.js 定义了一个setAdminApi函数 用于拼接重复的api地址</p><p> api文档中以/api/admin/为路径的则可使用该函数 ，否则直接填写完整路径</p><p>例如  bsaeUpload:’/api/member/upload/o_upload’,//普通文件上传</p><p>3．数据请求示例 </p><p>   1.普通未封装请求接口示例</p><p>   <code>在页面的&lt;script&gt;下引用 axios</code></p><pre><code>![img](http://ovi3ob9p4.bkt.clouddn.com/cms/cms026.png)         </code></pre><p>然后在需要的方法中调用axios请求 此处以created方法中调用为示例 （具体功能，请根据自身情况修改使用）     </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="keyword">this</span>.$api.memberList,<span class="keyword">this</span>.params)</span><br><span class="line"></span><br><span class="line">     .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;~!</span><br><span class="line"></span><br><span class="line">       <span class="comment">//此处为请求成功的回调</span></span><br><span class="line"></span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line">     .catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//此处为请求失败的回调 </span></span><br><span class="line"></span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure><p>说明：<em>axios.post()方法可以发送一个post 请求，其他请求类型有 get ，put ，delete等，具体参考axios文档</em></p><p><em>this.$api.memberList  此参数为api地址 在页面中使用 this.​$api.XXX 即可调用src</em>/api中的 地址变量   </p><p>此方法为获取所有用户列表信息，传递了一个参数对象params: {//只需要业务参数</p><p>​       </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">queryUsername: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">       queryEmail: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">       queryGroupId: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">       queryStatus: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">       pageNo: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">       pageSize: <span class="string">""</span></span><br><span class="line"></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>在成功的回调函数中，可以将列表数据赋值给自定义的一个变量，在页面中调用该变量即可，</p><p>2 列表封装接口示例</p><p>  本系统封装了一个list和一个form 混合</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms028.png" alt="img"></p><p>此类文件的作用为 将一些公用的方法和变量插入页面组件中，在页面则可直接使用该变量以及方法</p><p>以src/views/userMange/list.vue为例</p><p><code>在页面&lt;script&gt;&lt;/script&gt;中引入mixins</code></p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms030.png" alt="img">      </p><p>此处引入了 list.js 此文件预先定义了基础列表所需要的变量以及方法，简单的列表查询及操作，可直接使用该混合文件，具体变量及方法，查看文件内注释</p><p>在页面中的created方法中 调用了</p><p><code>created(){</code></p><p><code>this.initTableData(this.$api.memberList,this.params);</code></p><p>  <code>}</code></p><p>该方法为混合方法，作用为初始化列表信息，第一个参数传递的为api接口地址，第二个参数为自定义参数对象，调用该函数后会自动初始化列表以及赋值，在页面上直接使用tableData属性即可</p><p>数据加密方法介绍</p><p>如业务参数需要加密，则需要在页面组件中引用src/untils/aes.js</p><p>调用示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Encrypt &#125; from &quot;../untils/aes&quot;;</span><br><span class="line"></span><br><span class="line">  let aesKey = this.$store.state.aesKey</span><br><span class="line"></span><br><span class="line">    letivKey = this.$store.state.ivKey;</span><br><span class="line"></span><br><span class="line">               letaesPassword = Encrypt(this.params.pwd, aesKey, ivKey);</span><br></pre></td></tr></table></figure><h3 id="4-3-3将组件添加至路由表"><a href="#4-3-3将组件添加至路由表" class="headerlink" title="4.3.3将组件添加至路由表"></a>4.3.3将组件添加至路由表</h3><p>页面编写完成后需要将组件注册到路由中</p><p>关于路由采用的是vue-router，更多详细：<a href="https://router.vuejs.org/zh-cn/index.html" target="_blank" rel="noopener">https://router.vuejs.org/zh-cn/index.html</a> </p><p>路由表文件为src/router/routes.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    path:<span class="string">'/'</span>,</span><br><span class="line"></span><br><span class="line">    name:<span class="string">'用户管理'</span>, <span class="comment">//用户管理</span></span><br><span class="line"></span><br><span class="line">    component: body,</span><br><span class="line"></span><br><span class="line">    iconCls: <span class="string">'icon-user'</span>,</span><br><span class="line"></span><br><span class="line">    meta:&#123;</span><br><span class="line"></span><br><span class="line">      isLink: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    children: [&#123;</span><br><span class="line"></span><br><span class="line">      path:<span class="string">'/user'</span>,</span><br><span class="line"></span><br><span class="line">      name:<span class="string">'会员管理'</span>, <span class="comment">//会员管理</span></span><br><span class="line"></span><br><span class="line">      component: childView,</span><br><span class="line"></span><br><span class="line">      isParent: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      redirect: <span class="string">'/user/list'</span>,</span><br><span class="line"></span><br><span class="line">      children: [&#123;</span><br><span class="line"></span><br><span class="line">         path: <span class="string">'/user/list'</span>, <span class="comment">//会员列表</span></span><br><span class="line"></span><br><span class="line">         name: <span class="string">'会员列表'</span>,</span><br><span class="line"></span><br><span class="line">         component:<span class="function"><span class="params">resolve</span> =&gt;</span> &#123; <span class="built_in">require</span>([<span class="string">'@/views/user/userMange/list.vue'</span>], resolve) &#125;,</span><br><span class="line"></span><br><span class="line">       &#125;,</span><br><span class="line"></span><br><span class="line">       &#123;</span><br><span class="line"></span><br><span class="line">         path: <span class="string">'/user/save'</span>, <span class="comment">//会员添加</span></span><br><span class="line"></span><br><span class="line">         name: <span class="string">'会员添加'</span>,</span><br><span class="line"></span><br><span class="line">         component:<span class="function"><span class="params">resolve</span> =&gt;</span> &#123; <span class="built_in">require</span>([<span class="string">'@/views/user/userMange/add.vue'</span>], resolve) &#125;,</span><br><span class="line"></span><br><span class="line">         hidden: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">       &#125;,</span><br><span class="line"></span><br><span class="line">       &#123;</span><br><span class="line"></span><br><span class="line">         path: <span class="string">'/user/update'</span>, <span class="comment">//会员添加</span></span><br><span class="line"></span><br><span class="line">         name: <span class="string">'会员修改'</span>,</span><br><span class="line"></span><br><span class="line">         component:<span class="function"><span class="params">resolve</span> =&gt;</span> &#123; <span class="built_in">require</span>([<span class="string">'@/views/user/userMange/edit.vue'</span>], resolve) &#125;,</span><br><span class="line"></span><br><span class="line">         hidden: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">      ]</span><br><span class="line"></span><br><span class="line">    &#125;, &#123;</span><br></pre></td></tr></table></figure><p><code>path：访问地址（唯一不可重复）</code></p><p>meta：{role:’xxxx’}角色权限名,不可重复，而且不同板块前缀要不同，比如用户模块叫user   另外会员管理叫userMember  这样是不行的   </p><p><code>name:’路由名称’,  【也就是菜单名】</code></p><p><code>component:  component:resolve =&gt; { require([&#39;@/views/user/userMange/list.vue&#39;], resolve) },</code></p><p><code>懒加载页面组件，在点击该功能时才加载文件</code></p><p><code>children:子路由</code></p><h3 id="4-3-4权限控制"><a href="#4-3-4权限控制" class="headerlink" title="4.3.4权限控制"></a>4.3.4权限控制</h3><p>权限文件为src/routers/roles.js</p><p>角色权限编是一个按照路由层级来构造的json对象（自定义添加时，也保持同样的规则）</p><p>以用户列表角色为例 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  name:<span class="string">'用户管理'</span>,</span><br><span class="line"></span><br><span class="line">  role:<span class="string">'userlist'</span>,</span><br><span class="line"></span><br><span class="line">  api:[</span><br><span class="line"></span><br><span class="line">    <span class="string">'/api/admin/user/list'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'/api/admin/user/get'</span></span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  children: [&#123;</span><br><span class="line"></span><br><span class="line">    name:<span class="string">'添加'</span>,</span><br><span class="line"></span><br><span class="line">    role:<span class="string">'useradd'</span>,</span><br><span class="line"></span><br><span class="line">    api:[</span><br><span class="line"></span><br><span class="line">      <span class="string">'/api/admin/user/save'</span></span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    name:<span class="string">'修改'</span>,</span><br><span class="line"></span><br><span class="line">    role:<span class="string">'useredit'</span>,</span><br><span class="line"></span><br><span class="line">    api:[<span class="string">'/api/admin/user/update'</span>],</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    name:<span class="string">'删除'</span>,</span><br><span class="line"></span><br><span class="line">    role:<span class="string">'userdelete'</span>,</span><br><span class="line"></span><br><span class="line">    api:[</span><br><span class="line"></span><br><span class="line">      <span class="string">'/api/admin/user/delete'</span></span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>name：角色权限名称（角色管理中树状结构的名字）</p><p>role：页面显示权限（就是路由表中的meta：{role:’xxxx’}）</p><p>api：页面组件所拥有的调用后台api的地址</p><h3 id="4-3-5-组件使用"><a href="#4-3-5-组件使用" class="headerlink" title="4.3.5 组件使用"></a>4.3.5 组件使用</h3><p>vue是一个组件化开发的js 一切皆为组件</p><p>在本系统中页面基础组件采用了element2.0组件库 (页面中以el-xxxx开头)</p><p>自定义组件为自行封装（页面中以cms-xxxx开头）</p><p>自定义组件存放在</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms032.png" alt="img"></p><p>开发中，一些公用的功能可以封装为自定义组件</p><p>此处以cms-input组件为例</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms034.png" alt="img"></p><p>组件页面与功能页面结构完全相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt; </span><br><span class="line">template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;divclass=<span class="string">"cms-inline-input"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;labelfor=<span class="string">""</span><span class="class"><span class="keyword">class</span></span>=<span class="string">"cms-inline-label"</span>&gt;&#123;&#123;label&#125;&#125;:<span class="xml"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">         &lt;el-input  :value=<span class="string">"currentValue"</span>@input=<span class="string">"handleInput"</span></span><br><span class="line"></span><br><span class="line">         :style=<span class="string">"&#123;width:width+'px'&#125;"</span></span><br><span class="line"></span><br><span class="line">         &gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">exportdefault &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    name:'cms-input',</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    props:&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">         value:'',</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">         label:&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          type:String,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            default:'label'</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">         &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">         width:&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">              type:Number,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">              default:160</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">         &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    data()&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        return&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          currentValue:this.value</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    methods:&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    handleInput(value)&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">       this.$emit('input',value);/</span><span class="regexp">/触发input 事件，并传入新值</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt; </span><br><span class="line"></span><br><span class="line">&lt;stylescoped lang=<span class="string">"scss"</span>&gt;</span><br><span class="line"></span><br><span class="line">    .cms-inline-input&#123;</span><br><span class="line"></span><br><span class="line">        display:inline-block;</span><br><span class="line"></span><br><span class="line">        position:relative;</span><br><span class="line"></span><br><span class="line">        margin-left:<span class="number">12</span>px;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .cms-inline-label&#123;</span><br><span class="line"></span><br><span class="line">        font-size:<span class="number">14</span>px;</span><br><span class="line"></span><br><span class="line">        color:#5a5e66;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><p>此处封装了一个标签和输入框，对外props 暴露了3个属性 value  label width</p><p>在页面上使用方法为   </p><p><code>&lt;cms-inputlabel=’标签名’ width=’120’  v-model=’xxx’&gt;&lt;/cms-input&gt;</code></p><p><code>通过this.$emit(&#39;input&#39;,value);//触发input 事件，并传入新值</code></p><p> <code>向使用者传递返回值</code> </p><h2 id="4-4-后台页面发布"><a href="#4-4-后台页面发布" class="headerlink" title="4.4 后台页面发布"></a>4.4 后台页面发布</h2><p>后台源码的开发文件不可直接运行在浏览器中，需要通过命令打包将源码生成为静态文件</p><p>1.使用命令行工具进入 工程目录</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms036.png" alt="img"></p><ol><li>项目工程中如果没有node_modules文件夹，则执行</li></ol><p>npminstall （推荐使用cnpm  install，<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a>  加快依赖下载速度）</p><p>如果有则忽略此步骤</p><p>3.执行命令npm run build</p><p>出现building for production 则成功执行，等待命令完成完成后会出现下图</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms038.png" alt="img"></p><p>出现上图，说明打包编译完成，在项目中会有一个dist文件夹</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms040.png" alt="img"></p><p>dist文件夹中有两个文件</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms042.png" alt="img"></p><p>4、将index.html改名为index.do后，将index.do和static文件夹放到ROOT下的/jeeadmin/jeecms文件夹下，eclipse下放到/WebContent/jeeadmin/jeecms下</p><h2 id="4-5修改后台地址"><a href="#4-5修改后台地址" class="headerlink" title="4.5修改后台地址"></a>4.5修改后台地址</h2><p>1.带部署路径和端口的此类情况无须修改，如下</p><p><a href="http://xxx.jeecms.com/jeeadmin/jeecms/index.do" target="_blank" rel="noopener">http://xxx.jeecms.com/jeeadmin/jeecms/index.do</a></p><p><a href="http://xxx.jeecms.com/project/jeeadmin/jeecms/index.do" target="_blank" rel="noopener">http://xxx.jeecms.com/project/jeeadmin/jeecms/index.do</a></p><p>\2. 需要调整后台路径此类情况须要修改</p><p><a href="http://xxx.jeecms.com/admin/jeecms/index.do" target="_blank" rel="noopener">http://xxx.jeecms.com/admin/jeecms/index.do</a></p><p><a href="http://xxx.jeecms.com/project/admin/jeecms/index.do" target="_blank" rel="noopener">http://xxx.jeecms.com/project/admin/jeecms/index.do</a></p><p>此处修改源码工程中的src/config.js </p><p> <img src="http://ovi3ob9p4.bkt.clouddn.com/cms/cms044.png" alt="img"></p><p>  将jeeadmin文件夹重命名为admin即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0147.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;开发文档&lt;br&gt;
    
    </summary>
    
      <category term="cms" scheme="http://www.iskei.cn/categories/cms/"/>
    
    
      <category term="cms" scheme="http://www.iskei.cn/tags/cms/"/>
    
  </entry>
  
  <entry>
    <title>数据交互axios的使用</title>
    <link href="http://www.iskei.cn/posts/12277.html"/>
    <id>http://www.iskei.cn/posts/12277.html</id>
    <published>2018-02-26T08:44:36.000Z</published>
    <updated>2018-04-18T09:00:50.166Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0145.jpg" alt="image"></p><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。<br><a id="more"></a></p><p>##Axios</p><p><a href="https://www.npmjs.org/package/axios" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/v/axios.svg?style=flat-square" alt="npm version"></a><br><a href="https://travis-ci.org/mzabriskie/axios" target="_blank" rel="noopener"><img src="https://img.shields.io/travis/mzabriskie/axios.svg?style=flat-square" alt="build status"></a><br><a href="https://coveralls.io/r/mzabriskie/axios" target="_blank" rel="noopener"><img src="https://img.shields.io/coveralls/mzabriskie/axios.svg?style=flat-square" alt="code coverage"></a><br><a href="http://npm-stat.com/charts.html?package=axios" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/dm/axios.svg?style=flat-square" alt="npm downloads"></a><br><a href="https://gitter.im/mzabriskie/axios" target="_blank" rel="noopener"><img src="https://img.shields.io/gitter/room/mzabriskie/axios.svg?style=flat-square" alt="gitter chat"></a></p><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html" target="_blank" rel="noopener">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank" rel="noopener">XSRF</a></li></ul><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><table><thead><tr><th><a href="https://help.kancloud.cn/388561" target="_blank" rel="noopener">**</a></th><th><a href="https://help.kancloud.cn/388561" target="_blank" rel="noopener">**</a></th><th><a href="https://help.kancloud.cn/388561" target="_blank" rel="noopener">**</a></th><th><a href="https://help.kancloud.cn/388561" target="_blank" rel="noopener">**</a></th><th><a href="https://help.kancloud.cn/388561" target="_blank" rel="noopener">**</a></th><th><a href="https://help.kancloud.cn/388561" target="_blank" rel="noopener">**</a></th></tr></thead><tbody><tr><td>Latest ✔</td><td>Latest ✔</td><td>Latest ✔</td><td>Latest ✔</td><td>Latest ✔</td><td>8+ ✔</td></tr></tbody></table><p><a href="https://saucelabs.com/u/axios" target="_blank" rel="noopener"><img src="https://saucelabs.com/open_sauce/build_matrix/axios.svg" alt="Browser Matrix"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用 npm:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure><p>使用 bower:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower install axios</span><br></pre></td></tr></table></figure><p>使用 cdn:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>执行 <code>GET</code> 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为给定 ID 的 user 创建请求</span></span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选地，上面的请求可以这样做</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>执行 <code>POST</code> 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>执行多个并发请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserAccount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPermissions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345/permissions'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(<span class="function"><span class="keyword">function</span> (<span class="params">acct, perms</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 两个请求现在都执行完成</span></span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure><h2 id="axios-API"><a href="#axios-API" class="headerlink" title="axios API"></a>axios API</h2><p>可以通过向 <code>axios</code> 传递相关配置来创建请求</p><h5 id="axios-config"><a href="#axios-config" class="headerlink" title="axios(config)"></a>axios(config)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送 POST 请求</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  method: <span class="string">'post'</span>,</span><br><span class="line">  url: <span class="string">'/user/12345'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="axios-url-config"><a href="#axios-url-config" class="headerlink" title="axios(url[, config])"></a>axios(url[, config])</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送 GET 请求（默认的方法）</span></span><br><span class="line">axios(<span class="string">'/user/12345'</span>);</span><br></pre></td></tr></table></figure><h3 id="请求方法的别名"><a href="#请求方法的别名" class="headerlink" title="请求方法的别名"></a>请求方法的别名</h3><p>为方便起见，为所有支持的请求方法提供了别名</p><h5 id="axios-request-config"><a href="#axios-request-config" class="headerlink" title="axios.request(config)"></a>axios.request(config)</h5><h5 id="axios-get-url-config"><a href="#axios-get-url-config" class="headerlink" title="axios.get(url[, config])"></a>axios.get(url[, config])</h5><h5 id="axios-delete-url-config"><a href="#axios-delete-url-config" class="headerlink" title="axios.delete(url[, config])"></a>axios.delete(url[, config])</h5><h5 id="axios-head-url-config"><a href="#axios-head-url-config" class="headerlink" title="axios.head(url[, config])"></a>axios.head(url[, config])</h5><h5 id="axios-post-url-data-config"><a href="#axios-post-url-data-config" class="headerlink" title="axios.post(url[, data[, config]])"></a>axios.post(url[, data[, config]])</h5><h5 id="axios-put-url-data-config"><a href="#axios-put-url-data-config" class="headerlink" title="axios.put(url[, data[, config]])"></a>axios.put(url[, data[, config]])</h5><h5 id="axios-patch-url-data-config"><a href="#axios-patch-url-data-config" class="headerlink" title="axios.patch(url[, data[, config]])"></a>axios.patch(url[, data[, config]])</h5><h6 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h6><p>在使用别名方法时， <code>url</code>、<code>method</code>、<code>data</code> 这些属性都不必在配置中指定。</p><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>处理并发请求的助手函数</p><h5 id="axios-all-iterable"><a href="#axios-all-iterable" class="headerlink" title="axios.all(iterable)"></a>axios.all(iterable)</h5><h5 id="axios-spread-callback"><a href="#axios-spread-callback" class="headerlink" title="axios.spread(callback)"></a>axios.spread(callback)</h5><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p>可以使用自定义配置新建一个 axios 实例</p><h5 id="axios-create-config"><a href="#axios-create-config" class="headerlink" title="axios.create([config])"></a>axios.create([config])</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,</span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line">  headers: &#123;<span class="string">'X-Custom-Header'</span>: <span class="string">'foobar'</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><p>以下是可用的实例方法。指定的配置将与实例的配置合并</p><h5 id="axios-request-config-1"><a href="#axios-request-config-1" class="headerlink" title="axios#request(config)"></a>axios#request(config)</h5><h5 id="axios-get-url-config-1"><a href="#axios-get-url-config-1" class="headerlink" title="axios#get(url[, config])"></a>axios#get(url[, config])</h5><h5 id="axios-delete-url-config-1"><a href="#axios-delete-url-config-1" class="headerlink" title="axios#delete(url[, config])"></a>axios#delete(url[, config])</h5><h5 id="axios-head-url-config-1"><a href="#axios-head-url-config-1" class="headerlink" title="axios#head(url[, config])"></a>axios#head(url[, config])</h5><h5 id="axios-post-url-data-config-1"><a href="#axios-post-url-data-config-1" class="headerlink" title="axios#post(url[, data[, config]])"></a>axios#post(url[, data[, config]])</h5><h5 id="axios-put-url-data-config-1"><a href="#axios-put-url-data-config-1" class="headerlink" title="axios#put(url[, data[, config]])"></a>axios#put(url[, data[, config]])</h5><h5 id="axios-patch-url-data-config-1"><a href="#axios-patch-url-data-config-1" class="headerlink" title="axios#patch(url[, data[, config]])"></a>axios#patch(url[, data[, config]])</h5><h2 id="请求配置"><a href="#请求配置" class="headerlink" title="请求配置"></a>请求配置</h2><p>这些是创建请求时可以用的配置选项。只有 <code>url</code> 是必需的。如果没有指定 <code>method</code>，请求将默认使用 <code>get</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">  url: <span class="string">'/user'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">  method: <span class="string">'get'</span>, <span class="comment">// 默认是 get</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">  <span class="comment">// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法</span></span><br><span class="line">  <span class="comment">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class="line">  transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 是即将被发送的自定义请求头</span></span><br><span class="line">  headers: &#123;<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `params` 是即将与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    ID: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  paramsSerializer: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Qs.stringify(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">'brackets'</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `data` 是作为请求主体被发送的数据</span></span><br><span class="line">  <span class="comment">// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'</span></span><br><span class="line">  <span class="comment">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属：FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属： Stream</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class="line">  <span class="comment">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  withCredentials: <span class="literal">false</span>, <span class="comment">// 默认的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `adapter` 允许自定义处理请求，以使测试更轻松</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class="line">  adapter: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span></span><br><span class="line">  auth: &#123;</span><br><span class="line">    username: <span class="string">'janedoe'</span>,</span><br><span class="line">    password: <span class="string">'s00pers3cret'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></span><br><span class="line">  responseType: <span class="string">'json'</span>, <span class="comment">// 默认的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span></span><br><span class="line">  xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span></span><br><span class="line">  xsrfHeaderName: <span class="string">'X-XSRF-TOKEN'</span>, <span class="comment">// 默认的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">  onUploadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对原生进度事件的处理</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">  onDownloadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对原生进度事件的处理</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxContentLength` 定义允许的响应内容的最大尺寸</span></span><br><span class="line">  maxContentLength: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class="line">  validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// 默认的</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span></span><br><span class="line">  <span class="comment">// 如果设置为0，将不会 follow 任何重定向</span></span><br><span class="line">  maxRedirects: <span class="number">5</span>, <span class="comment">// 默认的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span></span><br><span class="line">  <span class="comment">// `keepAlive` 默认没有启用</span></span><br><span class="line">  httpAgent: <span class="keyword">new</span> http.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  httpsAgent: <span class="keyword">new</span> https.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 'proxy' 定义代理服务器的主机名称和端口</span></span><br><span class="line">  <span class="comment">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class="line">  proxy: &#123;</span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="number">9000</span>,</span><br><span class="line">    auth: : &#123;</span><br><span class="line">      username: <span class="string">'mikeymike'</span>,</span><br><span class="line">      password: <span class="string">'rapunz3l'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `cancelToken` 指定用于取消请求的 cancel token</span></span><br><span class="line">  <span class="comment">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class="line">  cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> (<span class="params">cancel</span>) </span>&#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a>响应结构</h2><p>某个请求的响应包含以下信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  status: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  statusText: <span class="string">'OK'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 服务器响应的头</span></span><br><span class="line">  headers: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `config` 是为请求提供的配置信息</span></span><br><span class="line">  config: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>then</code> 时，你将接收下面这样的响应：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user/12345'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data);</span><br><span class="line">    <span class="built_in">console</span>.log(response.status);</span><br><span class="line">    <span class="built_in">console</span>.log(response.statusText);</span><br><span class="line">    <span class="built_in">console</span>.log(response.headers);</span><br><span class="line">    <span class="built_in">console</span>.log(response.config);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>在使用 <code>catch</code> 时，或传递 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then" target="_blank" rel="noopener">rejection callback</a> 作为 <code>then</code> 的第二个参数时，响应可以通过 <code>error</code> 对象可被使用，正如在<a href="https://www.kancloud.cn/yunye/axios/234845#handling-errors" target="_blank" rel="noopener">错误处理</a>这一节所讲。</p><h2 id="配置的默认值-defaults"><a href="#配置的默认值-defaults" class="headerlink" title="配置的默认值/defaults"></a>配置的默认值/defaults</h2><p>你可以指定将被用在各个请求的配置默认值</p><h3 id="全局的-axios-默认值"><a href="#全局的-axios-默认值" class="headerlink" title="全局的 axios 默认值"></a>全局的 axios 默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="string">'https://api.example.com'</span>;</span><br><span class="line">axios.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</span><br><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</span><br></pre></td></tr></table></figure><h3 id="自定义实例默认值"><a href="#自定义实例默认值" class="headerlink" title="自定义实例默认值"></a>自定义实例默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建实例时设置配置的默认值</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://api.example.com'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在实例已创建后修改默认值</span></span><br><span class="line">instance.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</span><br></pre></td></tr></table></figure><h3 id="配置的优先顺序"><a href="#配置的优先顺序" class="headerlink" title="配置的优先顺序"></a>配置的优先顺序</h3><p>配置会以一个优先顺序进行合并。这个顺序是：在 <code>lib/defaults.js</code> 找到的库的默认值，然后是实例的 <code>defaults</code> 属性，最后是请求的 <code>config</code> 参数。后者将优先于前者。这里是一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用由库提供的配置的默认值来创建实例</span></span><br><span class="line"><span class="comment">// 此时超时配置的默认值是 `0`</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.create();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆写库的超时默认值</span></span><br><span class="line"><span class="comment">// 现在，在超时前，所有请求都会等待 2.5 秒</span></span><br><span class="line">instance.defaults.timeout = <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为已知需要花费很长时间的请求覆写超时设置</span></span><br><span class="line">instance.get(<span class="string">'/longRequest'</span>, &#123;</span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>在请求或响应被 <code>then</code> 或 <code>catch</code> 处理前拦截它们。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>如果你想在稍后移除拦截器，可以这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure><p>可以为自定义 axios 实例添加拦截器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = axios.create();</span><br><span class="line">instance.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user/12345'</span>)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">      <span class="comment">// 请求已发出，但服务器响应的状态码不在 2xx 范围内</span></span><br><span class="line">      <span class="built_in">console</span>.log(error.response.data);</span><br><span class="line">      <span class="built_in">console</span>.log(error.response.status);</span><br><span class="line">      <span class="built_in">console</span>.log(error.response.headers);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Something happened in setting up the request that triggered an Error</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Error'</span>, error.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(error.config);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>可以使用 <code>validateStatus</code> 配置选项定义一个自定义 HTTP 状态码的错误范围。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</span><br><span class="line">  validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &lt; <span class="number">500</span>; <span class="comment">// 状态码在大于或等于500时才会 reject</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="取消"><a href="#取消" class="headerlink" title="取消"></a>取消</h2><p>使用 <em>cancel token</em> 取消请求</p><blockquote><p>Axios 的 cancel token API 基于<a href="https://github.com/tc39/proposal-cancelable-promises" target="_blank" rel="noopener">cancelable promises proposal</a>，它还处于第一阶段。</p></blockquote><p>可以使用 <code>CancelToken.source</code> 工厂方法创建 cancel token，像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">var</span> source = CancelToken.source();</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</span><br><span class="line">  cancelToken: source.token</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">thrown</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (axios.isCancel(thrown)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Request canceled'</span>, thrown.message);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求（message 参数是可选的）</span></span><br><span class="line">source.cancel(<span class="string">'Operation canceled by the user.'</span>);</span><br></pre></td></tr></table></figure><p>还可以通过传递一个 executor 函数到 <code>CancelToken</code> 的构造函数来创建 cancel token：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">var</span> cancel;</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</span><br><span class="line">  cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// executor 函数接收一个 cancel 函数作为参数</span></span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line">cancel();</span><br></pre></td></tr></table></figure><p>Note : 可以使用同一个 cancel token 取消多个请求</p><h2 id="Semver"><a href="#Semver" class="headerlink" title="Semver"></a>Semver</h2><p>Until axios reaches a <code>1.0</code> release, breaking changes will be released with a new minor version. For example <code>0.5.1</code>, and <code>0.5.4</code> will have the same API, but <code>0.6.0</code> will have breaking changes.</p><h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h2><p>axios 依赖原生的 ES6 Promise 实现而<a href="http://caniuse.com/promises" target="_blank" rel="noopener">被支持</a>.<br>如果你的环境不支持 ES6 Promise，你可以使用 <a href="https://github.com/jakearchibald/es6-promise" target="_blank" rel="noopener">polyfill</a>.</p><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>axios includes <a href="http://typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a> definitions.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line">axios.get(&apos;/user?ID=12345&apos;);</span><br></pre></td></tr></table></figure><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul><li><a href="https://github.com/mzabriskie/axios/blob/master/CHANGELOG.md" target="_blank" rel="noopener">Changelog</a></li><li><a href="https://github.com/mzabriskie/axios/blob/master/UPGRADE_GUIDE.md" target="_blank" rel="noopener">Upgrade Guide</a></li><li><a href="https://github.com/mzabriskie/axios/blob/master/ECOSYSTEM.md" target="_blank" rel="noopener">Ecosystem</a></li><li><a href="https://github.com/mzabriskie/axios/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener">Contributing Guide</a></li><li><a href="https://github.com/mzabriskie/axios/blob/master/CODE_OF_CONDUCT.md" target="_blank" rel="noopener">Code of Conduct</a></li></ul><h2 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h2><p>axios is heavily inspired by the <a href="https://docs.angularjs.org/api/ng/service/$http" target="_blank" rel="noopener">$http service</a> provided in <a href="https://angularjs.org/" target="_blank" rel="noopener">Angular</a>. Ultimately axios is an effort to provide a standalone <code>$http</code>-like service for use outside of Angular.</p><h1 id="升级指南"><a href="#升级指南" class="headerlink" title="升级指南"></a>升级指南</h1><h1 id="Upgrade-Guide"><a href="#Upgrade-Guide" class="headerlink" title="Upgrade Guide"></a>Upgrade Guide</h1><h3 id="0-13-x-gt-0-14-0"><a href="#0-13-x-gt-0-14-0" class="headerlink" title="0.13.x -&gt; 0.14.0"></a>0.13.x -&gt; 0.14.0</h3><h4 id="TypeScript-Definitions"><a href="#TypeScript-Definitions" class="headerlink" title="TypeScript Definitions"></a>TypeScript Definitions</h4><p>The axios TypeScript definitions have been updated to match the axios API and use the ES2015 module syntax.</p><p>Please use the following <code>import</code> statement to import axios in TypeScript:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'/foo'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> <span class="built_in">console</span>.log(response))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error));</span><br></pre></td></tr></table></figure><h4 id="agent-Config-Option"><a href="#agent-Config-Option" class="headerlink" title="agent Config Option"></a><code>agent</code> Config Option</h4><p>The <code>agent</code> config option has been replaced with two new options: <code>httpAgent</code> and <code>httpsAgent</code>. Please use them instead.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Define a custom agent for HTTP</span></span><br><span class="line">  httpAgent: <span class="keyword">new</span> http.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  <span class="comment">// Define a custom agent for HTTPS</span></span><br><span class="line">  httpsAgent: <span class="keyword">new</span> https.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="progress-Config-Option"><a href="#progress-Config-Option" class="headerlink" title="progress Config Option"></a><code>progress</code> Config Option</h4><p>The <code>progress</code> config option has been replaced with the <code>onUploadProgress</code> and <code>onDownloadProgress</code> options.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Define a handler for upload progress events</span></span><br><span class="line">  onUploadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Define a handler for download progress events</span></span><br><span class="line">  onDownloadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0-12-x-gt-0-13-0"><a href="#0-12-x-gt-0-13-0" class="headerlink" title="0.12.x -&gt; 0.13.0"></a>0.12.x -&gt; 0.13.0</h3><p>The <code>0.13.0</code> release contains several changes to custom adapters and error handling.</p><h4 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h4><p>Previous to this release an error could either be a server response with bad status code or an actual <code>Error</code>. With this release Promise will always reject with an <code>Error</code>. In the case that a response was received, the <code>Error</code> will also include the response.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user/12345'</span>)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error.message);</span><br><span class="line">    <span class="built_in">console</span>.log(error.code); <span class="comment">// Not always specified</span></span><br><span class="line">    <span class="built_in">console</span>.log(error.config); <span class="comment">// The config that was used to make the request</span></span><br><span class="line">    <span class="built_in">console</span>.log(error.response); <span class="comment">// Only available if response was received from the server</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="Request-Adapters"><a href="#Request-Adapters" class="headerlink" title="Request Adapters"></a>Request Adapters</h4><p>This release changes a few things about how request adapters work. Please take note if you are using your own custom adapter.</p><ol><li>Response transformer is now called outside of adapter.</li><li>Request adapter returns a <code>Promise</code>.</li></ol><p>This means that you no longer need to invoke <code>transformData</code> on response data. You will also no longer receive <code>resolve</code> and <code>reject</code> as arguments in your adapter.</p><p>Previous code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAdapter</span>(<span class="params">resolve, reject, config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> response = &#123;</span><br><span class="line">    data: transformData(</span><br><span class="line">      responseData,</span><br><span class="line">      responseHeaders,</span><br><span class="line">      config.transformResponse</span><br><span class="line">    ),</span><br><span class="line">    status: request.status,</span><br><span class="line">    statusText: request.statusText,</span><br><span class="line">    headers: responseHeaders</span><br><span class="line">  &#125;;</span><br><span class="line">  settle(resolve, reject, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>New code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAdapter</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> response = &#123;</span><br><span class="line">      data: responseData,</span><br><span class="line">      status: request.status,</span><br><span class="line">      statusText: request.statusText,</span><br><span class="line">      headers: responseHeaders</span><br><span class="line">    &#125;;</span><br><span class="line">    settle(resolve, reject, response);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>See the related commits for more details:</p><ul><li><a href="https://github.com/mzabriskie/axios/commit/10eb23865101f9347570552c04e9d6211376e25e" target="_blank" rel="noopener">Response transformers</a></li><li><a href="https://github.com/mzabriskie/axios/commit/157efd5615890301824e3121cc6c9d2f9b21f94a" target="_blank" rel="noopener">Request adapter Promise</a></li></ul><h3 id="0-5-x-gt-0-6-0"><a href="#0-5-x-gt-0-6-0" class="headerlink" title="0.5.x -&gt; 0.6.0"></a>0.5.x -&gt; 0.6.0</h3><p>The <code>0.6.0</code> release contains mostly bug fixes, but there are a couple things to be aware of when upgrading.</p><h4 id="ES6-Promise-Polyfill"><a href="#ES6-Promise-Polyfill" class="headerlink" title="ES6 Promise Polyfill"></a>ES6 Promise Polyfill</h4><p>Up until the <code>0.6.0</code> release ES6 <code>Promise</code> was being polyfilled using <a href="https://github.com/jakearchibald/es6-promise" target="_blank" rel="noopener">es6-promise</a>. With this release, the polyfill has been removed, and you will need to supply it yourself if your environment needs it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">require(&apos;es6-promise&apos;).polyfill();</span><br><span class="line">var axios = require(&apos;axios&apos;);</span><br></pre></td></tr></table></figure><p>This will polyfill the global environment, and only needs to be done once.</p><h4 id="axios-success-axios-error"><a href="#axios-success-axios-error" class="headerlink" title="axios.success/axios.error"></a><code>axios.success</code>/<code>axios.error</code></h4><p>The <code>success</code>, and <code>error</code> aliases were deprectated in <a href="https://github.com/mzabriskie/axios/blob/master/CHANGELOG.md#040-oct-03-2014" target="_blank" rel="noopener">0.4.0</a>. As of this release they have been removed entirely. Instead please use <code>axios.then</code>, and <code>axios.catch</code> respectively.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'some/url'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h4><p>Previous versions of axios shipped with an AMD, CommonJS, and Global build. This has all been rolled into a single UMD build.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// AMD</span><br><span class="line">require([&apos;bower_components/axios/dist/axios&apos;], function (axios) &#123;</span><br><span class="line">  /* ... */</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// CommonJS</span><br><span class="line">var axios = require(&apos;axios/dist/axios&apos;);</span><br></pre></td></tr></table></figure><h1 id="生态系统"><a href="#生态系统" class="headerlink" title="生态系统"></a>生态系统</h1><h1 id="Ecosystem"><a href="#Ecosystem" class="headerlink" title="Ecosystem"></a>Ecosystem</h1><p>This is a list of axios related libraries and resources. If you have a suggestion on what to add, please don’t hesitate to submit a PR.</p><h2 id="Libraries"><a href="#Libraries" class="headerlink" title="Libraries"></a>Libraries</h2><ul><li><a href="https://github.com/mzabriskie/moxios" target="_blank" rel="noopener">moxios</a> - Mock axios requests for testing</li><li><a href="https://github.com/srph/axios-response-logger" target="_blank" rel="noopener">axios-response-logger</a> - Axios interceptor which logs responses</li><li><a href="https://github.com/ctimmerm/axios-mock-adapter" target="_blank" rel="noopener">axios-mock-adapter</a> — Axios adapter that allows to easily mock requests</li><li><a href="https://github.com/svrcekmichal/redux-axios-middleware" target="_blank" rel="noopener">redux-axios-middleware</a> - Redux middleware for fetching data with axios HTTP client</li><li><a href="https://github.com/nettofarah/axios-vcr" target="_blank" rel="noopener">axios-vcr</a> - Record and Replay Axios requests</li><li><a href="https://github.com/3846masa/axios-cookiejar-support" target="_blank" rel="noopener">@3846masa/axios-cookiejar-support</a> - Add tough-cookie support to axios</li><li><a href="https://github.com/imcvampire/vue-axios" target="_blank" rel="noopener">vue-axios</a> - A small wrapper for integrating axios to Vuejs</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0145.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJs" scheme="http://www.iskei.cn/categories/nodeJs/"/>
    
    
      <category term="nodeJs" scheme="http://www.iskei.cn/tags/nodeJs/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli本地环境API代理设置和解决跨域</title>
    <link href="http://www.iskei.cn/posts/48205.html"/>
    <id>http://www.iskei.cn/posts/48205.html</id>
    <published>2018-02-26T08:44:36.000Z</published>
    <updated>2018-04-18T09:00:50.166Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0144.jpg" alt="image"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在使用vue-cli启动项目的时候<code>npm run dev</code>便可以启动我们的项目了，通常我们的请求地址是以localhost:8080来请求接口数据的，localhost是没有办法设置cookie的。<br><a id="more"></a></p><p>我们可以在vue-cli配置文件里面设置一个代理，跨域的方法有很多，通常需要后台来进行配置。我们可以直接通过node.js代理服务器来实现跨域请求。</p><h2 id="vue-proxyTable接口跨域请求调试"><a href="#vue-proxyTable接口跨域请求调试" class="headerlink" title="vue proxyTable接口跨域请求调试"></a>vue proxyTable接口跨域请求调试</h2><p>在vue-cli项目中的<code>config</code>文件夹下的<code>index.js</code>配置文件中，<code>dev</code>长这样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dev: &#123;</span><br><span class="line">    env: require(&apos;./dev.env&apos;),</span><br><span class="line">    port: 8080,</span><br><span class="line">    autoOpenBrowser: true,</span><br><span class="line">    assetsSubDirectory: &apos;static&apos;,</span><br><span class="line">    assetsPublicPath: &apos;/&apos;,</span><br><span class="line">    proxyTable: &#123;&#125;,   </span><br><span class="line">    cssSourceMap: false</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>服务器提供的接口如果长这样<code>https://www.exaple.com/server_new/login</code>，我们把域名提取出来如<code>https://www.exaple.com</code>；</p><p>在config中新建一个文件命名为<code>proxyConfig.js</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  proxy: &#123;</span><br><span class="line">        &apos;/apis&apos;: &#123;    //将www.exaple.com印射为/apis</span><br><span class="line">            target: &apos;https://www.exaple.com&apos;,  // 接口域名</span><br><span class="line">            changeOrigin: true,  //是否跨域</span><br><span class="line">            pathRewrite: &#123;</span><br><span class="line">                &apos;^/apis&apos;: &apos;&apos;   //需要rewrite的,</span><br><span class="line">            &#125;              </span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>config</code>文件夹下的<code>index.js</code>引入<code>proxyConfig.js</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var proxyConfig = require(&apos;./proxyConfig&apos;)</span><br></pre></td></tr></table></figure><p><code>config</code>文件夹下的<code>index.js</code>中的<code>dev</code>改成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dev: &#123;</span><br><span class="line">    env: require(&apos;./dev.env&apos;),</span><br><span class="line">    port: 8080,</span><br><span class="line">    autoOpenBrowser: true,</span><br><span class="line">    assetsSubDirectory: &apos;static&apos;,</span><br><span class="line">    assetsPublicPath: &apos;/&apos;,</span><br><span class="line">    proxyTable: proxyConfig.proxy,</span><br><span class="line">    cssSourceMap: false</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>重启项目<code>npm run dev</code>：</p><p>你会发现出现了这个</p><p><img src="https://segmentfault.com/img/bVUlEp?w=455&amp;h=88" alt="img"></p><p>这个时候我们已经设置好了本地API代理了</p><h2 id="修改本地hosts文件"><a href="#修改本地hosts文件" class="headerlink" title="修改本地hosts文件"></a>修改本地<code>hosts</code>文件</h2><p>文件路径一般是<code>C:\Window\System32\drivers\etc</code>，打开<code>hosts</code>文件，在这一段下面把<code>localhost</code>设置进去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># localhost name resolution is handled within DNS itself.</span><br><span class="line"># 127.0.0.1       localhost</span><br><span class="line"># ::1             localhost</span><br><span class="line">127.0.0.1                   activate.adobe.com</span><br><span class="line">127.0.0.1                   practivate.adobe.com</span><br><span class="line">127.0.0.1                   lmlicenses.wip4.adobe.com</span><br><span class="line">127.0.0.1                   lm.licenses.adobe.com</span><br><span class="line">127.0.0.1                   na1r.services.adobe.com</span><br><span class="line">127.0.0.1                   hlrcv.stage.adobe.com</span><br><span class="line"></span><br><span class="line">localhost                   www.exaple.com</span><br></pre></td></tr></table></figure><h2 id="搞定"><a href="#搞定" class="headerlink" title="搞定"></a>搞定</h2><p>此时我们已经完全解决了跨域问题，以及本地测试后台无法向我们本地环境设置<code>cookie</code>的情况了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0144.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们在使用vue-cli启动项目的时候&lt;code&gt;npm run dev&lt;/code&gt;便可以启动我们的项目了，通常我们的请求地址是以localhost:8080来请求接口数据的，localhost是没有办法设置cookie的。&lt;br&gt;
    
    </summary>
    
      <category term="vueJs" scheme="http://www.iskei.cn/categories/vueJs/"/>
    
    
      <category term="vueJs" scheme="http://www.iskei.cn/tags/vueJs/"/>
    
  </entry>
  
  <entry>
    <title>JVM</title>
    <link href="http://www.iskei.cn/posts/17374.html"/>
    <id>http://www.iskei.cn/posts/17374.html</id>
    <published>2018-02-24T08:44:36.000Z</published>
    <updated>2018-04-18T09:00:50.150Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0139.jpg" alt="image"></p><p>Java面试笔记<br><a id="more"></a></p><h1 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h1><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/dc695f48-4189-4fc7-b950-ed25f6c80f82.jpg" alt=""></p><p>注：白色区域为线程私有的，蓝色区域为线程共享的。</p><h2 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1. 程序计数器"></a>1. 程序计数器</h2><p>记录正在执行的虚拟机字节码指令的地址（如果正在执行的是 Native 方法则为空）。</p><h2 id="2-Java-虚拟机栈"><a href="#2-Java-虚拟机栈" class="headerlink" title="2. Java 虚拟机栈"></a>2. Java 虚拟机栈</h2><p>每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。</p><p>该区域可能抛出以下异常：</p><ol><li>当线程请求的栈深度超过最大值，会抛出 StackOverflowError 异常；</li><li>栈进行动态扩展时如果无法申请导足够内存，会抛出 OutOfMemoryError 异常。</li></ol><h2 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3. 本地方法栈"></a>3. 本地方法栈</h2><p>与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。</p><h2 id="4-Java-堆"><a href="#4-Java-堆" class="headerlink" title="4. Java 堆"></a>4. Java 堆</h2><p>所有对象实例都在这里分配内存。</p><p>这块区域是垃圾收集器管理的主要区域（”GC 堆 “）。现在收集器基本都是采用分代收集算法，Java 堆还可以分成：新生代和老年代（新生代还可以分成 Eden 空间、From Survivor 空间、To Survivor 空间等）。</p><p>不需要连续内存，可以通过 -Xmx 和 -Xms 来控制动态扩展内存大小，如果动态扩展失败会抛出 OutOfMemoryError 异常。</p><h2 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5. 方法区"></a>5. 方法区</h2><p>用于存放已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p>和 Java 堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。</p><p>对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现，HotSpot 虚拟机把它当成永久代来进行垃圾回收。</p><h2 id="6-运行时常量池"><a href="#6-运行时常量池" class="headerlink" title="6. 运行时常量池"></a>6. 运行时常量池</h2><p>运行时常量池是方法区的一部分。</p><p>类加载后，Class 文件中的常量池（用于存放编译期生成的各种字面量和符号引用）就会被放到这个区域。</p><p>在运行期间也可以用过 String 类的 intern() 方法将新的常量放入该区域。</p><h2 id="7-直接内存"><a href="#7-直接内存" class="headerlink" title="7. 直接内存"></a>7. 直接内存</h2><p>在 JDK 1.4 中新加入了 NIO 类，引入了一种基于通道（Channel）与缓冲区（Buffer）的 I/O 方式，它可以使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆里的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。</p><h1 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h1><p>程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。</p><p>垃圾回收主要是针对 Java 堆和方法区进行。</p><h2 id="1-判断一个对象是否可回收"><a href="#1-判断一个对象是否可回收" class="headerlink" title="1. 判断一个对象是否可回收"></a>1. 判断一个对象是否可回收</h2><h3 id="1-1-引用计数"><a href="#1-1-引用计数" class="headerlink" title="1.1 引用计数"></a>1.1 引用计数</h3><p>给对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。</p><p>引用计数为 0 的对象可被回收。</p><p>两个对象会出现循环引用问题，此时引用计数器永远不为 0，导致 GC 收集器无法回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objA.instance = objB;</span><br><span class="line">objB.instance = objA;</span><br></pre></td></tr></table></figure><h3 id="1-2-可达性"><a href="#1-2-可达性" class="headerlink" title="1.2 可达性"></a>1.2 可达性</h3><p>通过 GC Roots 作为起始点进行搜索，能够到达到的对象都是都是可用的，不可达的对象可被回收。</p><p>GC Roots 一般包含以下内容：</p><ol><li>虚拟机栈中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中的常量引用的对象</li><li>本地方法栈中引用的对象</li></ol><h3 id="1-3-引用类型"><a href="#1-3-引用类型" class="headerlink" title="1.3 引用类型"></a>1.3 引用类型</h3><p>无论是通过引用计算算法判断对象的引用数量，还是通过可达性分析算法判断对象的引用链是否可达，判定独享是否存活都与“引用”有关。</p><h4 id="1-3-1-强引用"><a href="#1-3-1-强引用" class="headerlink" title="1.3.1 强引用"></a>1.3.1 强引用</h4><p>只要强引用存在，垃圾回收器永远不会回收调掉被引用的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><h4 id="1-3-2-软引用"><a href="#1-3-2-软引用" class="headerlink" title="1.3.2 软引用"></a>1.3.2 软引用</h4><p>非必须引用，内存溢出之前进行回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">SoftReference&lt;Object&gt; sf = <span class="keyword">new</span> SoftReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;</span><br><span class="line">sf.get();</span><br></pre></td></tr></table></figure><p>sf 是对 obj 的一个软引用，通过 sf.get() 方法可以取到这个对象，当然，当这个对象被标记为需要回收的对象时，则返回 null；</p><p>软引用主要用户实现类似缓存的功能，在内存足够的情况下直接通过软引用取值，无需从繁忙的真实来源查询数据，提升速度；当内存不足时，自动删除这部分缓存数据，从真正的来源查询这些数据。</p><h4 id="1-3-3-弱引用"><a href="#1-3-3-弱引用" class="headerlink" title="1.3.3 弱引用"></a>1.3.3 弱引用</h4><p>只能生存到下一次垃圾收集发生之前，当垃圾收集器工作时，无论当前内存是否足够，都会被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">WeakReference&lt;Object&gt; wf = <span class="keyword">new</span> WeakReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;</span><br><span class="line">wf.get();</span><br><span class="line">wf.isEnQueued();</span><br></pre></td></tr></table></figure><h4 id="1-3-4-虚引用"><a href="#1-3-4-虚引用" class="headerlink" title="1.3.4 虚引用"></a>1.3.4 虚引用</h4><p>又称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">PhantomReference&lt;Object&gt; pf = <span class="keyword">new</span> PhantomReference&lt;Object&gt;(obj);</span><br><span class="line">obj=<span class="keyword">null</span>;</span><br><span class="line">pf.get();</span><br><span class="line">pf.isEnQueued();</span><br></pre></td></tr></table></figure><h3 id="1-3-方法区的回收"><a href="#1-3-方法区的回收" class="headerlink" title="1.3 方法区的回收"></a>1.3 方法区的回收</h3><p>在方法区主要是对常量池的回收和对类的卸载。</p><p>常量池的回收和堆中对象回收类似。</p><p>类的卸载条件很多，需要满足以下三个条件，并且满足了也不一定会被卸载：</p><ol><li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</li><li>加载该类的 ClassLoader 已经被回收。</li><li>该类对应的 java.lang.Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。</li></ol><p>可以通过 -Xnoclassgc 参数来控制是否对类进行卸载。</p><p>在大量使用反射、动态代理、CGLib 等 ByteCode 框架、动态生成 JSP 以及 OSGo 这类频繁自定义 ClassLoader 的场景都需要虚拟机具备类卸载功能，以保证不会出现内存溢出。</p><h3 id="1-4-finalize"><a href="#1-4-finalize" class="headerlink" title="1.4 finalize()"></a>1.4 finalize()</h3><p>当一个对象可被回收时，如果该对象有必要执行 finalize() 方法，那么就有可能可能通过在该方法中让对象重新被引用，从而实现自救。</p><p>finalize() 类似 C++ 的虚构函数，用来做关闭外部资源等工作。但是 try-finally 等方式可以做的更好，并且该方法运行代价高昂，不确定性大，无法保证各个对象的调用顺序，因此最好不要使用。</p><h2 id="2-垃圾收集算法"><a href="#2-垃圾收集算法" class="headerlink" title="2. 垃圾收集算法"></a>2. 垃圾收集算法</h2><h3 id="2-1-标记-清除算法"><a href="#2-1-标记-清除算法" class="headerlink" title="2.1 标记 - 清除算法"></a>2.1 标记 - 清除算法</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/a4248c4b-6c1d-4fb8-a557-86da92d3a294.jpg" alt=""></p><p>将需要回收的对象进行标记，然后清除。</p><p>不足：</p><ol><li>标记和清除过程效率都不高</li><li>会产生大量碎片</li></ol><p>之后的算法都是基于该算法进行改进。</p><h3 id="2-2-复制算法"><a href="#2-2-复制算法" class="headerlink" title="2.2 复制算法"></a>2.2 复制算法</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/e6b733ad-606d-4028-b3e8-83c3a73a3797.jpg" alt=""></p><p>将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。</p><p>主要不足是只使用了内存的一半。</p><p>现在的商业虚拟机都采用这种收集算法来回收新生代，但是并不是将内存划分为大小相等的两块，而是分为一块较大的 Eden 空间和两块较小的 Survior 空间，每次使用 Eden 空间和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象一次性复制到另一块 Survivor 空间上，最后清理 Eden 和 Survivor。HotSpot 虚拟机的 Eden 和 Survivor 的大小比例默认为 8:1，保证了内存的利用率达到 90 %。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 空间就不够用了，需要依赖于老年代进行分配担保，也就是借用老年代的空间。</p><h3 id="2-3-标记-整理算法"><a href="#2-3-标记-整理算法" class="headerlink" title="2.3 标记 - 整理算法"></a>2.3 标记 - 整理算法</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/902b83ab-8054-4bd2-898f-9a4a0fe52830.jpg" alt=""></p><p>让所有存活的对象都向一段移动，然后直接清理掉端边界以外的内存。</p><h3 id="2-4-分代收集算法"><a href="#2-4-分代收集算法" class="headerlink" title="2.4 分代收集算法"></a>2.4 分代收集算法</h3><p>现在的商业虚拟机采用分代收集算法，它使用了前面介绍的几种收集算法，根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p><p>一般将 Java 堆分为新生代和老年代。</p><ol><li>新生代使用：复制算法</li><li>老年代使用：标记 - 清理 或者 标记 - 整理 算法。</li></ol><h2 id="3-垃圾收集器"><a href="#3-垃圾收集器" class="headerlink" title="3. 垃圾收集器"></a>3. 垃圾收集器</h2><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/c625baa0-dde6-449e-93df-c3a67f2f430f.jpg" alt=""></p><p>以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。</p><h3 id="3-1-Serial-收集器"><a href="#3-1-Serial-收集器" class="headerlink" title="3.1 Serial 收集器"></a>3.1 Serial 收集器</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/22fda4ae-4dd5-489d-ab10-9ebfdad22ae0.jpg" alt=""></p><p>它是单线程的收集器，不仅意味着只会使用一个线程进行垃圾收集工作，更重要的是它在进行垃圾收集时，必须暂停所有其他工作线程，往往造成过长的等待时间。</p><p>它的优点是简单高效，对于单个 CPU 环境来说，由于没有线程交互的开销，因此拥有最高的单线程收集效率。</p><p>在 Client 应用场景中，分配给虚拟机管理的内存一般来说不会很大，该收集器收集几十兆甚至一两百兆的新生代停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿是可以接受的。</p><h3 id="3-2-ParNew-收集器"><a href="#3-2-ParNew-收集器" class="headerlink" title="3.2 ParNew 收集器"></a>3.2 ParNew 收集器</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/81538cd5-1bcf-4e31-86e5-e198df1e013b.jpg" alt=""></p><p>它是 Serial 收集器的多线程版本。</p><p>是 Server 模式下的虚拟机首选新生代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合工作。</p><p>默认开始的线程数量与 CPU 数量相同，可以使用 -XX:ParallelGCThreads 参数来设置线程数。</p><h3 id="3-3-Parallel-Scavenge-收集器"><a href="#3-3-Parallel-Scavenge-收集器" class="headerlink" title="3.3 Parallel Scavenge 收集器"></a>3.3 Parallel Scavenge 收集器</h3><p>是并行的多线程收集器。</p><p>其它收集器关注点是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，它被称为“吞吐量优先”收集器。这里的吞吐量指 CPU 用于运行用户代码的时间占总时间的比值。</p><p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</p><p>提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间 -XX:MaxGCPauseMillis 参数以及直接设置吞吐量大小的 -XX:GCTimeRatio 参数（值为大于 0 且小于 100 的整数）。缩短停顿时间是以牺牲吞吐量和新生代空间来换取的：新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。</p><p>还提供了一个参数 -XX:+UseAdaptiveSizePolicy，这是一个开关参数，打开参数后，就不需要手工指定新生代的大小（-Xmn）、Eden 和 Survivor 区的比例（-XX:SurvivorRatio）、晋升老年代对象年龄（-XX:PretenureSizeThreshold）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种方式称为 GC 自适应的调节策略（GC Ergonomics）。自适应调节策略也是它与 ParNew 收集器的一个重要区别。</p><h3 id="3-4-Serial-Old-收集器"><a href="#3-4-Serial-Old-收集器" class="headerlink" title="3.4 Serial Old 收集器"></a>3.4 Serial Old 收集器</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/08f32fd3-f736-4a67-81ca-295b2a7972f2.jpg" alt=""></p><p>Serial Old 是 Serial 收集器的老年代版本，也是给 Client 模式下的虚拟机使用。如果用在 Server 模式下，它有两大用途：</p><ol><li>在 JDK 1.5 以及之前版本（Parallel Old 诞生以前）中与 Parallel Scavenge 收集器搭配使用。</li><li>作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。</li></ol><h3 id="3-5-Parallel-Old-收集器"><a href="#3-5-Parallel-Old-收集器" class="headerlink" title="3.5 Parallel Old 收集器"></a>3.5 Parallel Old 收集器</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/278fe431-af88-4a95-a895-9c3b80117de3.jpg" alt=""></p><p>是 Parallel Scavenge 收集器的老年代版本。</p><p>在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器。</p><h3 id="3-6-CMS-收集器"><a href="#3-6-CMS-收集器" class="headerlink" title="3.6 CMS 收集器"></a>3.6 CMS 收集器</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/62e77997-6957-4b68-8d12-bfd609bb2c68.jpg" alt=""></p><p>CMS（Concurrent Mark Sweep），从 Mark Sweep 可以知道它是基于 标记 - 清除 算法实现的。</p><p>特点：并发收集、低停顿。</p><p>分为以下四个流程：</p><ol><li>初始标记：仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。</li><li>并发标记：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。</li><li>重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。</li><li>并发清除：不需要停顿。</li></ol><p>在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。</p><p>具有以下缺点：</p><ol><li><p>对 CPU 资源敏感。CMS 默认启动的回收线程数是 (CPU 数量 + 3) / 4，当 CPU 不足 4 个时，CMS 对用户程序的影响就可能变得很大，如果本来 CPU 负载就比较大，还要分出一半的运算能力去执行收集器线程，就可能导致用户程序的执行速度忽然降低了 50%，其实也让人无法接受。并且低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率变低。</p></li><li><p>无法处理浮动垃圾。由于并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生。这一部分垃圾出现在标记过程之后，CMS 无法在当次收集中处理掉它们，只好留到下一次 GC 时再清理掉，这一部分垃圾就被称为“浮动垃圾”。也是由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留有足够的内存空间给用户线程使用，因此它不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。可以使用 -XX:CMSInitiatingOccupancyFraction 的值来改变触发收集器工作的内存占用百分比，JDK 1.5 默认设置下该值为 68，也就是当老年代使用了 68% 的空间之后会触发收集器工作。如果该值设置的太高，导致浮动垃圾无法保存，那么就会出现 Concurrent Mode Failure，此时虚拟机将启动后备预案：临时启用 Serial Old 收集器来重新进行老年代的垃圾收集。</p></li><li><p>标记 - 清除算法导致的空间碎片，给大对象分配带来很大麻烦，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前出发一次 Full GC。</p></li></ol><h3 id="3-7-G1-收集器"><a href="#3-7-G1-收集器" class="headerlink" title="3.7 G1 收集器"></a>3.7 G1 收集器</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/f99ee771-c56f-47fb-9148-c0036695b5fe.jpg" alt=""></p><p>G1（Garbage-First）收集器是当今收集器技术发展最前沿的成果之一，它是一款面向服务端应用的垃圾收集器，HotSpot 开发团队赋予它的使命是（在比较长期的）未来可以替换掉 JDK 1.5 中发布的 CMS 收集器。</p><p>具备如下特点：</p><ul><li>并行与并发：能充分利用多 CPU 环境下的硬件优势，使用多个 CPU 来缩短停顿时间；</li><li>分代收集：分代概念依然得以保留，虽然它不需要其它收集器配合就能独立管理整个 GC 堆，但它能够采用不同方式去处理新创建的对象和已存活一段时间、熬过多次 GC 的旧对象来获取更好的收集效果。</li><li>空间整合：整体来看是基于“标记 - 整理”算法实现的收集器，从局部（两个 Region 之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。</li><li>可预测的停顿：这是它相对 CMS 的一大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了降低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒，这几乎已经是实时 Java（RTSJ）的垃圾收集器的特征了。</li></ul><p>在 G1 之前的其他收集器进行收集的范围都是整个新生代或者老生代，而 G1 不再是这样，Java 堆的内存布局与其他收集器有很大区别，将整个 Java 堆划分为多个大小相等的独立区域（Region）。虽然还保留新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，而都是一部分 Region（不需要连续）的集合。</p><p>之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个 Java 堆中进行全区域的垃圾收集。它跟踪各个 Region 里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region（这也就是 Garbage-First 名称的来由）。这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了它在有限的时间内可以获取尽可能高的收集效率。</p><p>Region 不可能是孤立的，一个对象分配在某个 Region 中，可以与整个 Java 堆任意的对象发生引用关系。在做可达性分析确定对象是否存活的时候，需要扫描整个 Java 堆才能保证准确性，这显然是对 GC 效率的极大伤害。为了避免全堆扫描的发生，每个 Region 都维护了一个与之对应的 Remembered Set。虚拟机发现程序在对 Reference 类型的数据进行写操作时，会产生一个 Write Barrier 暂时中断写操作，检查 Reference 引用的对象是否处于不同的 Region 之中，如果是，便通过 CardTable 把相关引用信息记录到被引用对象所属的 Region 的 Remembered Set 之中。当进行内存回收时，在 GC 根节点的枚举范围中加入 Remembered Set 即可保证不对全堆扫描也不会有遗漏。</p><p>如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致可划分为以下几个步骤：</p><ol><li>初始标记</li><li>并发标记</li><li>最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。</li><li>筛选回收：首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿是时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。</li></ol><h3 id="3-8-七种垃圾收集器的比较"><a href="#3-8-七种垃圾收集器的比较" class="headerlink" title="3.8 七种垃圾收集器的比较"></a>3.8 七种垃圾收集器的比较</h3><table><thead><tr><th>收集器</th><th>串行、并行 or 并发</th><th>新生代 / 老年代</th><th>算法</th><th>目标</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>Serial</strong></td><td>串行</td><td>新生代</td><td>复制算法</td><td>响应速度优先</td><td>单 CPU 环境下的 Client 模式</td></tr><tr><td><strong>Serial Old</strong></td><td>串行</td><td>老年代</td><td>标记 - 整理</td><td>响应速度优先</td><td>单 CPU 环境下的 Client 模式、CMS 的后备预案</td></tr><tr><td><strong>ParNew</strong></td><td>并行</td><td>新生代</td><td>复制算法</td><td>响应速度优先</td><td>多 CPU 环境时在 Server 模式下与 CMS 配合</td></tr><tr><td><strong>Parallel Scavenge</strong></td><td>并行</td><td>新生代</td><td>复制算法</td><td>吞吐量优先</td><td>在后台运算而不需要太多交互的任务</td></tr><tr><td><strong>Parallel Old</strong></td><td>并行</td><td>老年代</td><td>标记 - 整理</td><td>吞吐量优先</td><td>在后台运算而不需要太多交互的任务</td></tr><tr><td><strong>CMS</strong></td><td>并发</td><td>老年代</td><td>标记 - 清除</td><td>响应速度优先</td><td>集中在互联网站或 B/S 系统服务端上的 Java 应用</td></tr><tr><td><strong>G1</strong></td><td>并发</td><td>both</td><td>标记 - 整理 + 复制算法</td><td>响应速度优先</td><td>面向服务端应用，将来替换 CMS</td></tr></tbody></table><h2 id="4-内存分配与回收策略"><a href="#4-内存分配与回收策略" class="headerlink" title="4. 内存分配与回收策略"></a>4. 内存分配与回收策略</h2><h3 id="4-1-优先在-Eden-分配"><a href="#4-1-优先在-Eden-分配" class="headerlink" title="4.1 优先在 Eden 分配"></a>4.1 优先在 Eden 分配</h3><p>大多数情况下，对象在新生代 Eden 区分配，当 Eden 区空间不够时，发起 Minor GC；</p><h3 id="4-2-大对象直接进入老年代"><a href="#4-2-大对象直接进入老年代" class="headerlink" title="4.2 大对象直接进入老年代"></a>4.2 大对象直接进入老年代</h3><p>提供 -XX:PretenureSizeThreshold 参数，大于此值的对象直接在老年代分配，避免在 Eden 区和 Survivor 区之间的大量内存复制；</p><h3 id="4-3-长期存活的对象进入老年代"><a href="#4-3-长期存活的对象进入老年代" class="headerlink" title="4.3 长期存活的对象进入老年代"></a>4.3 长期存活的对象进入老年代</h3><p>JVM 为对象定义年龄计数器，经过 Minor GC 依然存活且被 Survivor 区容纳的，移动到 Survivor 区，年龄加 1，每经历一次 Minor GC 不被清理则年龄加 1，增加到一定年龄则移动到老年区（默认 15 岁，通过 -XX:MaxTenuringThreshold 设置）；</p><h3 id="4-4-动态对象年龄判定"><a href="#4-4-动态对象年龄判定" class="headerlink" title="4.4 动态对象年龄判定"></a>4.4 动态对象年龄判定</h3><p>若 Survivor 区中同年龄所有对象大小总和大于 Survivor 空间一半，则年龄大于等于该年龄的对象可以直接进入老年代；</p><h3 id="4-5-空间分配担保"><a href="#4-5-空间分配担保" class="headerlink" title="4.5 空间分配担保"></a>4.5 空间分配担保</h3><p>在发生 Minor GC 之前，JVM 先检查老年代最大可用连续空间是否大于新生代所有对象总空间，成立的话 Minor GC 确认是安全的；否则继续检查老年代最大可用连续空间是否大于历次晋升到老年代对象的平均大小，大于的话进行 Minor GC，小于的话进行 Full GC。</p><h2 id="4-6-Full-GC-的触发条件"><a href="#4-6-Full-GC-的触发条件" class="headerlink" title="4.6 Full GC 的触发条件"></a>4.6 Full GC 的触发条件</h2><p>对于 Minor GC，其触发条件非常简单，当 Eden 区空间满时，就将触发一次 Minor GC。而 Full GC 则相对复杂，有以下条件：</p><h3 id="4-6-1-调用-System-gc"><a href="#4-6-1-调用-System-gc" class="headerlink" title="4.6.1 调用 System.gc()"></a>4.6.1 调用 System.gc()</h3><p>此方法的调用是建议 JVM 进行 Full GC，虽然只是建议而非一定，但很多情况下它会触发 Full GC，从而增加 Full GC 的频率，也即增加了间歇性停顿的次数。因此强烈建议能不使用此方法就不要使用，让虚拟机自己去管理它的内存，可通过 -XX:+ DisableExplicitGC 来禁止 RMI 调用 System.gc()。</p><h3 id="4-6-2-老年代空间不足"><a href="#4-6-2-老年代空间不足" class="headerlink" title="4.6.2 老年代空间不足"></a>4.6.2 老年代空间不足</h3><p>老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等，当执行 Full GC 后空间仍然不足，则抛出如下错误： Java.lang.OutOfMemoryError: Java heap space 为避免以上两种状况引起的 Full GC，调优时应尽量做到让对象在 Minor GC 阶段被回收、让对象在新生代多存活一段时间及不要创建过大的对象及数组。</p><h3 id="4-6-3-空间分配担保失败"><a href="#4-6-3-空间分配担保失败" class="headerlink" title="4.6.3 空间分配担保失败"></a>4.6.3 空间分配担保失败</h3><p>使用复制算法的 Minor GC 需要老年代的内存空间作担保，如果出现了 HandlePromotionFailure 担保失败，则会触发 Full GC。</p><h3 id="4-6-4-JDK-1-7-及以前的永久代空间不足"><a href="#4-6-4-JDK-1-7-及以前的永久代空间不足" class="headerlink" title="4.6.4 JDK 1.7 及以前的永久代空间不足"></a>4.6.4 JDK 1.7 及以前的永久代空间不足</h3><p>在 JDK 1.7 及以前，HotSpot 虚拟机中的方法区是用永久代实现的，永久代中存放的为一些 class 的信息、常量、静态变量等数据，当系统中要加载的类、反射的类和调用的方法较多时，Permanet Generation 可能会被占满，在未配置为采用 CMS GC 的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么 JVM 会抛出如下错误信息：java.lang.OutOfMemoryError: PermGen space 为避免 PermGen 占满造成 Full GC 现象，可采用的方法为增大 PermGen 空间或转为使用 CMS GC。</p><p>在 JDK 1.8 中用元空间替换了永久代作为方法区的实现，元空间是本地内存，因此减少了一种 Full GC 触发的可能性。</p><h3 id="4-6-5-Concurrent-Mode-Failure"><a href="#4-6-5-Concurrent-Mode-Failure" class="headerlink" title="4.6.5 Concurrent Mode Failure"></a>4.6.5 Concurrent Mode Failure</h3><p>执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足（有时候“空间不足”是 CMS GC 时当前的浮动垃圾过多导致暂时性的空间不足触发 Full GC），便会报 Concurrent Mode Failure 错误，并触发 Full GC。</p><h1 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h1><p>类是在运行期间动态加载的。</p><h2 id="1-类的生命周期"><a href="#1-类的生命周期" class="headerlink" title="1 类的生命周期"></a>1 类的生命周期</h2><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/32b8374a-e822-4720-af0b-c0f485095ea2.jpg" alt=""></p><p>包括以下 7 个阶段：</p><ul><li><strong>加载（Loading）</strong></li><li><strong>验证（Verification）</strong></li><li><strong>准备（Preparation）</strong></li><li><strong>解析（Resolution）</strong></li><li><strong>初始化（Initialization）</strong></li><li>使用（Using）</li><li>卸载（Unloading）</li></ul><p>其中解析过程在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 的动态绑定。</p><h2 id="2-类初始化时机"><a href="#2-类初始化时机" class="headerlink" title="2. 类初始化时机"></a>2. 类初始化时机</h2><p>虚拟机规范中并没有强制约束何时进行加载，但是规范严格规定了有且只有下列五种情况必须对类进行初始化：( 加载、验证、准备都会随着发生 )</p><ol><li><p>遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化。最常见的生成这 4 条指令的场景是：使用 new 关键字实例化对象的时候；读取或设置一个类的静态字段（被 final 修饰、已在编译器把结果放入常量池的静态字段除外）的时候；以及调用一个类的静态方法的时候。</p></li><li><p>使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没有进行初始化，则需要先触发其初始化。</p></li><li><p>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</p></li><li><p>当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类），虚拟机会先初始化这个主类；</p></li><li><p>当使用 jdk1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getStatic, REF_putStatic, REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化；</p></li></ol><p>以上 5 种场景中的行为称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发初始化，称为被动引用。被动引用的常见例子包括：</p><p>1. 通过子类引用父类的静态字段，不会导致子类初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(SubClass.value); <span class="comment">// value 字段在 SuperClass 中定义</span></span><br></pre></td></tr></table></figure><p>2. 通过数组定义来引用类，不会触发此类的初始化。该过程会对数组类进行初始化，数组类是一个由虚拟机自动生成的、直接继承自 Object 的子类，其中包含了数组的属性和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SuperClass[] sca = <span class="keyword">new</span> SuperClass[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>3. 常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(ConstClass.HELLOWORLD);</span><br></pre></td></tr></table></figure><h2 id="3-类加载过程"><a href="#3-类加载过程" class="headerlink" title="3. 类加载过程"></a>3. 类加载过程</h2><p>包含了加载、验证、准备、解析和初始化这 5 个阶段。</p><h3 id="3-1-加载"><a href="#3-1-加载" class="headerlink" title="3.1 加载"></a>3.1 加载</h3><p>加载是类加载的一个阶段，注意不要混淆。</p><p>加载过程完成以下三件事：</p><ol><li>通过一个类的全限定名来获取定义此类的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时存储结构。</li><li>在内存中生成一个代表这个类的 Class 对象，作为方法区这个类的各种数据的访问入口。</li></ol><p>其中二进制字节流可以从以下方式中获取：</p><ul><li>从 ZIP 包读取，这很常见，最终成为日后 JAR、EAR、WAR 格式的基础。</li><li>从网络中获取，这种场景最典型的应用是 Applet。</li><li>运行时计算生成，这种场景使用得最多得就是动态代理技术，在 java.lang.reflect.Proxy 中，就是用了 ProxyGenerator.generateProxyClass 的代理类的二进制字节流。</li><li>由其他文件生成，典型场景是 JSP 应用，即由 JSP 文件生成对应的 Class 类。</li><li>从数据库读取，这种场景相对少见，例如有些中间件服务器（如 SAP Netweaver）可以选择把程序安装到数据库中来完成程序代码在集群间的分发。<br>…</li></ul><h3 id="3-2-验证"><a href="#3-2-验证" class="headerlink" title="3.2 验证"></a>3.2 验证</h3><p>确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p><p>主要有以下 4 个阶段：</p><ol><li>文件格式验证</li><li>元数据验证（对字节码描述的信息进行语义分析）</li><li>字节码验证（通过数据流和控制流分析，确保程序语义是合法、符合逻辑的，将对类的方法体进行校验分析）</li><li>符号引用验证</li></ol><h3 id="3-3-准备"><a href="#3-3-准备" class="headerlink" title="3.3 准备"></a>3.3 准备</h3><p>类变量是被 static 修饰的变量，准备阶段为类变量分配内存并设置初始值，使用的是方法区的内存。</p><p>实例变量不会在这阶段分配内存，它将会在对象实例化时随着对象一起分配在 Java 堆中。</p><p>初始值一般为 0 值，例如下面的类变量 value 被初始化为 0 而不是 123。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p>如果类变量是常量，那么会按照表达式来进行初始化，而不是赋值为 0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><h3 id="3-4-解析"><a href="#3-4-解析" class="headerlink" title="3.4 解析"></a>3.4 解析</h3><p>将常量池的符号引用替换为直接引用的过程。</p><h3 id="3-5-初始化"><a href="#3-5-初始化" class="headerlink" title="3.5 初始化"></a>3.5 初始化</h3><p>初始化阶段即虚拟机执行类构造器 &lt;clinit&gt;() 方法的过程。</p><p>在准备阶段，类变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主观计划去初始化类变量和其它资源。</p><p>&lt;clinit&gt;() 方法具有以下特点：</p><ul><li>是由编译器自动收集类中所有类变量的赋值动作和静态语句块（static{} 块）中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定。特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。例如以下代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        i = <span class="number">0</span>;                <span class="comment">// 给变量赋值可以正常编译通过</span></span><br><span class="line">        System.out.print(i);  <span class="comment">// 这句编译器会提示“非法向前引用”</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>与类的构造函数（或者说实例构造器 &lt;init&gt;()）不同，不需要显式的调用父类的构造器。虚拟机会自动保证在子类的 &lt;clinit&gt;() 方法运行之前，父类的 &lt;clinit&gt;() 方法已经执行结束。因此虚拟机中第一个执行 &lt;clinit&gt;() 方法的类肯定为 java.lang.Object。</p></li><li><p>由于父类的 &lt;clinit&gt;() 方法先执行，也就意味着父类中定义的静态语句块要优于子类的变量赋值操作。例如以下代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> A = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            A = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> B = A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Sub.B);  <span class="comment">// 输出结果是父类中的静态变量值 A，也就是 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>&lt;clinit&gt;() 方法对于类或接口不是必须的，如果一个类中不包含静态语句块，也没有对类变量的赋值操作，编译器可以不为该类生成 &lt;clinit&gt;() 方法。</p></li><li><p>接口中不可以使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样都会生成 &lt;clinit&gt;() 方法。但接口与类不同的是，执行接口的 &lt;clinit&gt;() 方法不需要先执行父接口的 &lt;clinit&gt;() 方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的 &lt;clinit&gt;() 方法。</p></li><li><p>虚拟机会保证一个类的 &lt;clinit&gt;() 方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的 &lt;clinit&gt;() 方法，其它线程都会阻塞等待，直到活动线程执行 &lt;clinit&gt;() 方法完毕。如果在一个类的 &lt;clinit&gt;() 方法中有耗时的操作，就可能造成多个进程阻塞，在实际过程中此种阻塞很隐蔽。</p></li></ul><h2 id="4-类加载器"><a href="#4-类加载器" class="headerlink" title="4. 类加载器"></a>4. 类加载器</h2><p>虚拟机设计团队把类加载阶段中的“通过一个类的全限定名来获取描述此类的二进制字节流 ( 即字节码 )”这个动作放到 Java 虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这个动作的代码模块称为“类加载器”。</p><h3 id="4-1-类与类加载器"><a href="#4-1-类与类加载器" class="headerlink" title="4.1 类与类加载器"></a>4.1 类与类加载器</h3><p>对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在 Java 虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。通俗而言：比较两个类是否“相等”（这里所指的“相等”，包括类的 Class 对象的 equals() 方法、isAssignableFrom() 方法、isInstance() 方法的返回结果，也包括使用 instanceof() 关键字对做对象所属关系判定等情况），只有在这两个类时由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个 Class 文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等。</p><h3 id="4-2-类加载器分类"><a href="#4-2-类加载器分类" class="headerlink" title="4.2 类加载器分类"></a>4.2 类加载器分类</h3><p>从 Java 虚拟机的角度来讲，只存在以下两种不同的类加载器：</p><p>一种是启动类加载器（Bootstrap ClassLoader），这个类加载器用 C++ 实现，是虚拟机自身的一部分；另一种就是所有其他类的加载器，这些类由 Java 实现，独立于虚拟机外部，并且全都继承自抽象类 java.lang.ClassLoader。</p><p>从 Java 开发人员的角度看，类加载器可以划分得更细致一些：</p><ul><li><p>启动类加载器（Bootstrap ClassLoader） 此类加载器负责将存放在 <java_home>\lib 目录中的，或者被 -Xbootclasspath 参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如 rt.jar，名字不符合的类库即使放在 lib 目录中也不会被加载）类库加载到虚拟机内存中。 启动类加载器无法被 Java 程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器，直接使用 null 代替即可。</java_home></p></li><li><p>扩展类加载器（Extension ClassLoader） 这个类加载器是由 ExtClassLoader（sun.misc.Launcher$ExtClassLoader）实现的。它负责将 <java_home>/lib/ext 或者被 java.ext.dir 系统变量所指定路径中的所有类库加载到内存中，开发者可以直接使用扩展类加载器。</java_home></p></li><li><p>应用程序类加载器（Application ClassLoader） 这个类加载器是由 AppClassLoader（sun.misc.Launcher$AppClassLoader）实现的。由于这个类加载器是 ClassLoader 中的 getSystemClassLoader() 方法的返回值，因此一般称为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p></li></ul><h3 id="4-3-双亲委派模型"><a href="#4-3-双亲委派模型" class="headerlink" title="4.3 双亲委派模型"></a>4.3 双亲委派模型</h3><p>应用程序都是由三种类加载器相互配合进行加载的，如果有必要，还可以加入自己定义的类加载器。下图展示的类加载器之间的层次关系，称为类加载器的双亲委派模型（Parents Delegation Model）。该模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器，这里类加载器之间的父子关系一般通过组合（Composition）关系来实现，而不是通过继承（Inheritance）的关系实现。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/2cdc3ce2-fa82-4c22-baaa-000c07d10473.jpg" alt=""></p><p><strong>工作过程</strong></p><p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载，而是把这个请求委派给父类加载器，每一个层次的加载器都是如此，依次递归，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成此加载请求（它搜索范围中没有找到所需类）时，子加载器才会尝试自己加载。</p><p><strong>好处</strong></p><p>使用双亲委派模型来组织类加载器之间的关系，使得 Java 类随着它的类加载器一起具备了一种带有优先级的层次关系。例如类 java.lang.Object，它存放再 rt.jar 中，无论哪个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此 Object 类在程序的各种类加载器环境中都是同一个类。相反，如果没有双亲委派模型，由各个类加载器自行加载的话，如果用户编写了一个称为｀java.lang.Object 的类，并放在程序的 ClassPath 中，那系统中将会出现多个不同的 Object 类，程序将变得一片混乱。如果开发者尝试编写一个与 rt.jar 类库中已有类重名的 Java 类，将会发现可以正常编译，但是永远无法被加载运行。</p><p><strong>实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">    <span class="comment">//check the class has been loaded or not</span></span><br><span class="line">    Class c = findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                c = findBootstrapClassOrNull(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">//if throws the exception , the father can not complete the load</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(resolve) &#123;</span><br><span class="line">        resolveClass(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JVM-参数"><a href="#JVM-参数" class="headerlink" title="JVM 参数"></a>JVM 参数</h1><h2 id="GC-优化配置"><a href="#GC-优化配置" class="headerlink" title="GC 优化配置"></a>GC 优化配置</h2><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>-Xms</td><td>初始化堆内存大小</td></tr><tr><td>-Xmx</td><td>堆内存最大值</td></tr><tr><td>-Xmn</td><td>新生代大小</td></tr><tr><td>-XX:PermSize</td><td>初始化永久代大小</td></tr><tr><td>-XX:MaxPermSize</td><td>永久代最大容量</td></tr></tbody></table><h2 id="GC-类型设置"><a href="#GC-类型设置" class="headerlink" title="GC 类型设置"></a>GC 类型设置</h2><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>-XX:+UseSerialGC</td><td>串行垃圾回收器</td></tr><tr><td>-XX:+UseParallelGC</td><td>并行垃圾回收器</td></tr><tr><td>-XX:+UseConcMarkSweepGC</td><td>并发标记扫描垃圾回收器</td></tr><tr><td>-XX:ParallelCMSThreads=</td><td>并发标记扫描垃圾回收器 = 为使用的线程数量</td></tr><tr><td>-XX:+UseG1GC</td><td>G1 垃圾回收器</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xmx12m -Xms3m -Xmn1m -XX:PermSize=<span class="number">20</span>m -XX:MaxPermSize=<span class="number">20</span>m -XX:+UseSerialGC -jar java-application.jar</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0139.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Java面试笔记&lt;br&gt;
    
    </summary>
    
      <category term="Interview" scheme="http://www.iskei.cn/categories/Interview/"/>
    
    
      <category term="Interview" scheme="http://www.iskei.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>linux</title>
    <link href="http://www.iskei.cn/posts/64202.html"/>
    <id>http://www.iskei.cn/posts/64202.html</id>
    <published>2018-02-24T08:44:36.000Z</published>
    <updated>2018-04-18T09:00:50.154Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0141.jpg" alt="image"></p><p>Java面试笔记<br><a id="more"></a></p><h1 id="常用操作以及概念"><a href="#常用操作以及概念" class="headerlink" title="常用操作以及概念"></a>常用操作以及概念</h1><h2 id="求助"><a href="#求助" class="headerlink" title="求助"></a>求助</h2><p><strong>1. –help</strong></p><p>指令的基本用法与选项介绍。</p><p><strong>2. man</strong></p><p>man 是 manual 的缩写，将指令的具体信息显示出来。</p><p>当执行 man date 时，有 DATE(1) 出现，其中的数字代表指令的类型，常用的数字及其类型如下：</p><table><thead><tr><th>代号</th><th>类型</th></tr></thead><tbody><tr><td>1</td><td>用户在 shell 环境中可以操作的指令或者可执行文件</td></tr><tr><td>5</td><td>配置文件</td></tr><tr><td>8</td><td>系统管理员可以使用的管理指令</td></tr></tbody></table><p><strong>3. info</strong></p><p>info 与 man 类似，但是 info 将文档分成一个个页面，每个页面可以进行跳转。</p><h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><p><strong>1. sync</strong></p><p>为了加快对磁盘上文件的读写速度，位于内存中的文件数据不会立即同步到磁盘上，因此关机之前需要先进行 sync 同步操作。</p><p><strong>2. shutdown</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># /sbin/shutdown [-krhc] [时间] [警告讯息]</span><br><span class="line">-k ： 不会关机，只是发送警告讯息，通知所有在线的用户</span><br><span class="line">-r ： 将系统的服务停掉后就重新启动</span><br><span class="line">-h ： 将系统的服务停掉后就立即关机</span><br><span class="line">-c ： 取消已经在进行的 shutdown 指令内容</span><br></pre></td></tr></table></figure><p><strong>3. 其它关机指令</strong></p><p>reboot、halt、poweroff。</p><h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep threadx</span><br></pre></td></tr></table></figure><h2 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 80</span><br></pre></td></tr></table></figure><h2 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h2><p>可以在环境变量 PATH 中声明可执行文件的路径，路径之间用 : 分隔。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin</span><br></pre></td></tr></table></figure><h2 id="运行等级"><a href="#运行等级" class="headerlink" title="运行等级"></a>运行等级</h2><ul><li>0：关机模式</li><li>1：单用户模式（可用于破解root密码）</li><li>2：无网络支持的多用户模式</li><li>3：有网络支持的多用户模式（文本模式，工作中最常用的模式）</li><li>4：保留，未使用</li><li>5：有网络支持的 X-windows 多用户模式（桌面）</li><li>6：重新引导系统，即重启</li></ul><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><p>使用 sudo 允许一般用户使用 root 可执行的命令，只有在 /etc/sudoers 配置文件中添加的用户才能使用该指令。</p><h2 id="GNU"><a href="#GNU" class="headerlink" title="GNU"></a>GNU</h2><p>GNU 计划，又译为革奴计划，它的目标是创建一套完全自由的操作系统，称为 GNU，其内容软件完全以 GPL 方式发布。其中 GPL 全称为 GNU 通用公共许可协议，包含了以下内容：</p><ul><li>以任何目的运行此程序的自由；</li><li>再复制的自由；</li><li>改进此程序，并公开发布改进的自由。</li></ul><h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2><p>RPM 和 DPKG 为最常见的两类软件包管理工具。RPM 全称为 Redhat Package Manager，最早由 Red Hat 公司制定实施，随后被 GNU 开源操作系统接受并成为很多 Linux 系统 (RHEL) 的既定软件标准。与 RPM 进行竞争的是基于 Debian 操作系统 (UBUNTU) 的 DEB 软件包管理工具－ DPKG，全称为 Debian Package，功能方面与 RPM 相似。</p><p>YUM 基于 RPM 包管理工具，具有依赖管理功能，并具有软件升级的功能。</p><h2 id="常见发行版本"><a href="#常见发行版本" class="headerlink" title="常见发行版本"></a>常见发行版本</h2><p>Linux 发行版是 Linux 内核及各种应用软件的集成版本。</p><table><thead><tr><th>基于的包管理工具</th><th>商业发行版</th><th>社区发行版</th></tr></thead><tbody><tr><td>DPKG</td><td>Ubuntu</td><td>Debian</td></tr><tr><td>RPM</td><td>Red Hat</td><td>Fedora / CentOS</td></tr></tbody></table><h1 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h1><h2 id="磁盘的文件名"><a href="#磁盘的文件名" class="headerlink" title="磁盘的文件名"></a>磁盘的文件名</h2><p>Linux 中每个硬件都被当做一个文件。</p><p>常见磁盘的文件名：</p><ul><li>SCSI/SATA/USB 磁盘：/dev/sd[a-p]</li><li>IDE 磁盘：/dev/hd[a-d]</li></ul><p>其中文件名后面的序号的确定与磁盘插入的顺序有关，而与磁盘所插入的插槽位置无关。</p><h2 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h2><p>磁盘分区表主要有两种格式，一种是限制较多的 MBR 分区表，一种是较新且限制较少的 GPT 分区表。</p><h3 id="1-MBR"><a href="#1-MBR" class="headerlink" title="1. MBR"></a>1. MBR</h3><p>MBR 中，第一个扇区最重要，里面有：主要开机记录（Master boot record, MBR）及分区表（partition table），其中 MBR 占 446 bytes，partition table 占 64 bytes。</p><p>分区表只有 64 bytes，最多只能存储 4 个分区，这 4 个分区为主分区（Primary）和扩展分区（Extended）。其中扩展分区只有一个，它将其它空间用来记录分区表，可以记录更多的分区，因此通过扩展分区可以分出更多区分，这些分区称为逻辑分区。</p><p>Linux 也把分区当成文件，分区文件的命名方式为：磁盘文件名+编号，例如 /dev/sda1。注意，逻辑分区的编号从 5 开始。</p><h3 id="2-GPT"><a href="#2-GPT" class="headerlink" title="2. GPT"></a>2. GPT</h3><p>不同的磁盘有不同的扇区大小，例如 512 bytes 和最新磁盘的 4k。GPT 为了兼容所有磁盘，在定义扇区上使用逻辑区块地址（Logical Block Address, LBA）。</p><p>GPT 第 1 个区块记录了 MBR，紧接着是 33 个区块记录分区信息，并把最后的 33 个区块用于对分区信息进行备份。</p><p>GPT 没有扩展分区概念，都是主分区，最多可以分 128 个分区。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/a5c25452-6fa5-49e7-9322-823077442775.jpg" alt=""></p><h2 id="开机检测程序"><a href="#开机检测程序" class="headerlink" title="开机检测程序"></a>开机检测程序</h2><h3 id="1-BIOS"><a href="#1-BIOS" class="headerlink" title="1. BIOS"></a>1. BIOS</h3><p>BIOS 是开机的时候计算机执行的第一个程序，这个程序知道可以开机的磁盘，并读取磁盘第一个扇区的 MBR，由 MBR 执行其中的开机管理程序，这个开机管理程序的会加载操作系统的核心文件。</p><p>MBR 中的开机管理程序提供以下功能：选单、载入核心文件以及转交其它开机管理程序。转交这个功能可以用来实现了多重引导，只需要将另一个操作系统的开机管理程序安装在其它分区的启动扇区上，在启动 MBR 中的开机管理程序时，就可以选择启动当前的操作系统或者转交给其它开机管理程序从而启动另一个操作系统。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/f900f266-a323-42b2-bc43-218fdb8811a8.jpg" alt=""></p><p>安装多重引导，最好先安装 Windows 再安装 Linux。因为安装 Windows 时会覆盖掉 MBR，而 Linux 可以选择将开机管理程序安装在 MBR 或者其它分区的启动扇区，并且可以设置开机管理程序的选单。</p><h3 id="2-UEFI"><a href="#2-UEFI" class="headerlink" title="2. UEFI"></a>2. UEFI</h3><p>UEFI 相比于 BIOS 来说功能更为全面，也更为安全。</p><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p>挂载利用目录作为分区的进入点，也就是说，进入目录之后就可以读取分区的数据。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/249f3bb1-feee-4805-a259-a72699d638ca.jpg" alt=""></p><h1 id="文件权限与目录配置"><a href="#文件权限与目录配置" class="headerlink" title="文件权限与目录配置"></a>文件权限与目录配置</h1><h2 id="文件权限概念"><a href="#文件权限概念" class="headerlink" title="文件权限概念"></a>文件权限概念</h2><p>把用户分为三种：文件拥有者、群组以及其它人，对不同的用户有不同的文件权限。</p><p>使用 ls 查看一个文件时，会显示一个文件的信息，例如 drwxr-xr-x. 3 root root 17 May 6 00:14 .config，对这个信息的解释如下：</p><ul><li>drwxr-xr-x：文件类型以及权限，第 1 位为文件类型字段，后 9 位为文件权限字段。</li><li>3：链接数；</li><li>root：文件拥有者；</li><li>root：所属群组；</li><li>17：文件大小；</li><li>May 6 00:14：文件最后被修改的时间；</li><li>.config：文件名。</li></ul><p>常见的文件类型及其含义有：</p><ul><li>d：目录；</li><li>-：文件；</li><li>l：链接文件；</li></ul><p>9 位的文件权限字段中，每 3 个为一组，共 3 组，每一组分别代表对文件拥有者、所属群组以及其它人的文件权限。一组权限中的 3 位分别为 r、w、x 权限，表示可读、可写、可执行。</p><h2 id="文件属性以及权限的修改"><a href="#文件属性以及权限的修改" class="headerlink" title="文件属性以及权限的修改"></a>文件属性以及权限的修改</h2><h3 id="1-修改文件所属群组"><a href="#1-修改文件所属群组" class="headerlink" title="1. 修改文件所属群组"></a>1. 修改文件所属群组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># chgrp [-R] groupname dirname/filename</span><br><span class="line">-R：递归修改</span><br></pre></td></tr></table></figure><h3 id="2-修改文件拥有者"><a href="#2-修改文件拥有者" class="headerlink" title="2. 修改文件拥有者"></a>2. 修改文件拥有者</h3><p>不仅可以修改文件拥有者，也可以修改文件所属群组。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chown [-R] 用户名:群组名 dirname/filename</span><br></pre></td></tr></table></figure><h3 id="3-修改权限"><a href="#3-修改权限" class="headerlink" title="3. 修改权限"></a>3. 修改权限</h3><p>可以将一组权限用数字来表示，此时一组权限的 3 个位当做二进制数字的位，从左到右每个位的权值为 4、2、1，即每个权限对应的数字权值为 r：4、w：2、x：1。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod [-R] xyz dirname/filename</span><br></pre></td></tr></table></figure><p>范例：将 .bashrc 文件的权限修改为 -rwxr-xr–。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod 754 .bashrc</span><br></pre></td></tr></table></figure><p>也可以使用符号来设定权限。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># chmod [ugoa]  [+-=] [rwx] dirname/filename</span><br><span class="line">- u：拥有者</span><br><span class="line">- g：所属群组</span><br><span class="line">- o：其他人</span><br><span class="line">- a：所有人</span><br><span class="line">- +：添加权限</span><br><span class="line">- -：移除权限</span><br><span class="line">- =：设定权限</span><br></pre></td></tr></table></figure><p>范例：为 .bashrc 文件的所有用户添加写权限。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod a+w .bashrc</span><br></pre></td></tr></table></figure><h2 id="目录的权限"><a href="#目录的权限" class="headerlink" title="目录的权限"></a>目录的权限</h2><p>文件名不是存储在一个文件的内容中，而是存储在一个文件所在的目录中。因此，拥有文件的 w 权限并不能对文件名进行修改。</p><p>目录存储文件列表，一个目录的权限也就是对其文件列表的权限。因此，目录的 r 权限表示可以读取文件列表；w 权限表示可以修改文件列表，具体来说，就是添加删除文件，对文件名进行修改；x 权限可以让该目录成为工作目录，x 权限是 r 和 w 权限的基础，如果不能使一个目录成为工作目录，也就没办法读取文件列表以及对文件列表进行修改了。</p><h2 id="文件默认权限"><a href="#文件默认权限" class="headerlink" title="文件默认权限"></a>文件默认权限</h2><p>文件默认权限：文件默认没有可执行权限，因此为 666，也就是 -rw-rw-rw- 。<br>目录默认权限：目录必须要能够进入，也就是必须拥有可执行权限，因此为 777 ，也就是 drwxrwxrwx。</p><p>可以通过 umask 设置或者查看文件的默认权限，通常以掩码的形式来表示，例如 002 表示其它用户的权限去除了一个 2 的权限，也就是写权限，因此建立新文件时默认的权限为 -rw-rw-r– 。</p><h2 id="目录配置"><a href="#目录配置" class="headerlink" title="目录配置"></a>目录配置</h2><p>为了使不同 Linux 发行版本的目录结构保持一致性，Filesystem Hierarchy Standard (FHS) 规定了 Linux 的目录结构。最基础的三个目录如下：</p><ul><li>/ (root, 根目录)</li><li>/usr (unix software resource)：所有系统默认软件都会安装到这个目录；</li><li>/var (variable)：存放系统或程序运行过程中的数据文件。</li></ul><p>完整的目录树如下：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/27ace615-558f-4dfb-8ad4-7ac769c10118.jpg" alt=""></p><h1 id="文件与目录"><a href="#文件与目录" class="headerlink" title="文件与目录"></a>文件与目录</h1><h2 id="文件时间"><a href="#文件时间" class="headerlink" title="文件时间"></a>文件时间</h2><ol><li>modification time (mtime)：文件的内容更新就会更新；</li><li>status time (ctime)：文件的状态（权限、属性）更新就会更新；</li><li>access time (atime)：读取文件时就会更新。</li></ol><h2 id="文件与目录的基本操作"><a href="#文件与目录的基本操作" class="headerlink" title="文件与目录的基本操作"></a>文件与目录的基本操作</h2><h3 id="1-ls"><a href="#1-ls" class="headerlink" title="1. ls"></a>1. ls</h3><p>列出文件或者目录的信息，目录的信息就是其中包含的文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ls [-aAdfFhilnrRSt] file|dir</span><br><span class="line">-a ：列出全部的文件</span><br><span class="line">-d ：仅列出目录本身</span><br><span class="line">-l ：以长数据串行列出，包含文件的属性与权限等等数据</span><br></pre></td></tr></table></figure><h3 id="2-cp"><a href="#2-cp" class="headerlink" title="2. cp"></a>2. cp</h3><p>复制操作。</p><p>如果源文件有两个以上，则目的文件一定要是目录才行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cp [-adfilprsu] source destination</span><br><span class="line">-a ：相当于 -dr --preserve=all 的意思，至于 dr 请参考下列说明</span><br><span class="line">-d ：若来源文件为链接文件，则复制链接文件属性而非文件本身</span><br><span class="line">-i ：若目标文件已经存在时，在覆盖前会先询问</span><br><span class="line">-p ：连同文件的属性一起复制过去</span><br><span class="line">-r ：递归持续复制</span><br><span class="line">-u ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制</span><br><span class="line">--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了</span><br></pre></td></tr></table></figure><h3 id="3-rm"><a href="#3-rm" class="headerlink" title="3. rm"></a>3. rm</h3><p>移除操作。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># rm [-fir] 文件或目录</span><br><span class="line">-r ：递归删除</span><br></pre></td></tr></table></figure><h3 id="4-mv"><a href="#4-mv" class="headerlink" title="4. mv"></a>4. mv</h3><p>移动操作。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mv [-fiu] source destination</span><br><span class="line"># mv [options] source1 source2 source3 .... directory</span><br><span class="line">-f ： force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</span><br></pre></td></tr></table></figure><h2 id="获取文件内容"><a href="#获取文件内容" class="headerlink" title="获取文件内容"></a>获取文件内容</h2><h3 id="1-cat"><a href="#1-cat" class="headerlink" title="1. cat"></a>1. cat</h3><p>取得文件内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cat [-AbEnTv] filename</span><br><span class="line">-n ：打印出行号，连同空白行也会有行号，-b 不会</span><br></pre></td></tr></table></figure><h3 id="2-tac"><a href="#2-tac" class="headerlink" title="2. tac"></a>2. tac</h3><p>是 cat 的反向操作，从最后一行开始打印。</p><h3 id="3-more"><a href="#3-more" class="headerlink" title="3. more"></a>3. more</h3><p>可以一页一页查看文件内容，和文本编辑器类似。</p><h3 id="4-less"><a href="#4-less" class="headerlink" title="4. less"></a>4. less</h3><p>和 more 类似。</p><h3 id="5-head"><a href="#5-head" class="headerlink" title="5. head"></a>5. head</h3><p>可以取得文件前几行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># head [-n number] filename</span><br><span class="line">-n ：后面接数字，代表显示几行的意思</span><br></pre></td></tr></table></figure><h3 id="6-tail"><a href="#6-tail" class="headerlink" title="6. tail"></a>6. tail</h3><p>是 head 的反向操作，只是取得是后几行。</p><h3 id="7-od"><a href="#7-od" class="headerlink" title="7. od"></a>7. od</h3><p>可以以字符或者十六进制的形式显示二进制文件。</p><h3 id="8-touch"><a href="#8-touch" class="headerlink" title="8. touch"></a>8. touch</h3><p>修改文件时间或者建立新文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># touch [-acdmt] filename</span><br><span class="line">-a ： 更新 atime</span><br><span class="line">-c ： 更新 ctime，若该文件不存在则不建立新文件</span><br><span class="line">-m ： 更新 mtime</span><br><span class="line">-d ： 后面可以接欲更新的日期而不用当前的日期，也可以使用 --date="日期或时间"</span><br><span class="line">-t ：后面可以接欲更新的时间而不用当前的时间，格式为[YYYYMMDDhhmm]</span><br></pre></td></tr></table></figure><h2 id="指令与文件搜索"><a href="#指令与文件搜索" class="headerlink" title="指令与文件搜索"></a>指令与文件搜索</h2><h3 id="1-which"><a href="#1-which" class="headerlink" title="1. which"></a>1. which</h3><p>指令搜索。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># which [-a] command</span><br><span class="line">-a ：将所有指令列出，而不是只列第一个</span><br></pre></td></tr></table></figure><h3 id="2-whereis"><a href="#2-whereis" class="headerlink" title="2. whereis"></a>2. whereis</h3><p>whereis 搜索文件的速度比较快，因为它只搜索几个特定的目录。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># whereis [-bmsu] dirname/filename</span><br></pre></td></tr></table></figure><h3 id="3-locate"><a href="#3-locate" class="headerlink" title="3. locate"></a>3. locate</h3><p>locate 可以用关键字或者正则表达式进行搜索。</p><p>locate 使用 /var/lib/mlocate/ 这个数据库来进行搜索，它存储在内存中，并且每天更新一次，所以无法用 locate 搜索新建的文件。可以使用 updatedb 来立即更新数据库。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># locate [-ir] keyword</span><br><span class="line">-r：接正则表达式</span><br></pre></td></tr></table></figure><h3 id="4-find"><a href="#4-find" class="headerlink" title="4. find"></a>4. find</h3><p>find 可以使用文件的属性和权限进行搜索。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># find filename [option]</span><br></pre></td></tr></table></figure><h4 id="4-1-与时间有关的选项"><a href="#4-1-与时间有关的选项" class="headerlink" title="4.1 与时间有关的选项"></a>4.1 与时间有关的选项</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-mtime  n ：列出在 n 天前的那一天修改过内容的文件</span><br><span class="line">-mtime +n ：列出在 n 天之前(不含 n 天本身)修改过内容的文件</span><br><span class="line">-mtime -n ：列出在 n 天之内(含 n 天本身)修改过内容的文件</span><br><span class="line">-newer file ： 列出比 file 更新的文件</span><br></pre></td></tr></table></figure><p>+4、4 和 -4 的指示的时间范围如下：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/658fc5e7-79c0-4247-9445-d69bf194c539.png" alt=""></p><h4 id="4-2-与文件拥有者和所属群组有关的选项"><a href="#4-2-与文件拥有者和所属群组有关的选项" class="headerlink" title="4.2 与文件拥有者和所属群组有关的选项"></a>4.2 与文件拥有者和所属群组有关的选项</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-uid n</span><br><span class="line">-gid n</span><br><span class="line">-user name</span><br><span class="line">-group name</span><br><span class="line">-nouser ：搜索拥有者不存在 /etc/passwd 的文件</span><br><span class="line">-nogroup：搜索所属群组不存在于 /etc/group 的文件</span><br></pre></td></tr></table></figure><h4 id="4-3-与文件权限和名称有关的选项"><a href="#4-3-与文件权限和名称有关的选项" class="headerlink" title="4.3 与文件权限和名称有关的选项"></a>4.3 与文件权限和名称有关的选项</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-name filename</span><br><span class="line">-size [+-]SIZE：搜寻比 SIZE 还要大(+)或小(-)的文件。这个 SIZE 的规格有：c: 代表 byte，k: 代表 1024bytes。所以，要找比 50KB 还要大的文件，就是 -size +50k</span><br><span class="line">-type TYPE</span><br><span class="line">-perm mode  ：搜索权限等于 mode 的文件</span><br><span class="line">-perm -mode ：搜索权限包含 mode 的文件</span><br><span class="line">-perm /mode ：搜索权限包含任一 mode 的文件</span><br></pre></td></tr></table></figure><h1 id="磁盘与文件系统"><a href="#磁盘与文件系统" class="headerlink" title="磁盘与文件系统"></a>磁盘与文件系统</h1><h2 id="文件系统的组成"><a href="#文件系统的组成" class="headerlink" title="文件系统的组成"></a>文件系统的组成</h2><p>对分区进行格式化是为了在分区上建立文件系统。一个分区通常只能格式化为一个文件系统，但是磁盘阵列等技术可以将一个分区格式化为多个文件系统，因此只有文件系统能被挂载，而分区不能被挂载。</p><p>文件系统有以下三个结构：</p><ol><li>superblock：记录文件系统的整体信息，包括 inode 和 block 的总量、使用量、剩余量，以及文件系统的格式与相关信息等；</li><li>inode：一个文件占用一个 inode，记录文件的属性，同时记录此文件的内容所在的 block 号码；</li><li>block：记录文件的内容，文件太大时，会占用多个 block。</li></ol><p>当要读取一个文件的内容时，先在 inode 中去查找文件内容所在的所有 block，然后把所有 block 的内容读出来。</p><p>磁盘碎片是指一个文件内容所在的 block 过于分散。</p><p>Ext2 文件系统使用了上述的文件结构，并在此之上加入了 block 群组的概念，也就是将一个文件系统划分为多个 block 群组，方便管理。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/1974a836-aa6b-4fb8-bce1-6eb11969284a.jpg" alt=""></p><h2 id="inode"><a href="#inode" class="headerlink" title="inode"></a>inode</h2><p>Ext2 文件系统支持的 block 大小有 1k、2k 和 4k 三种，不同的 block 大小限制了单一文件的大小。而每个 inode 大小是固定为 128 bytes。</p><p>inode 中记录了文件内容所在的 block，但是每个 block 非常小，一个大文件随便都需要几十万的 block，而一个 inode 大小有限，无法直接引用这么多 block。因此引入了间接、双间接、三间接引用。间接引用是指，让 inode 记录的引用 block 块当成 inode 用来记录引用信息。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/89091427-7b2b-4923-aff6-44681319a8aa.jpg" alt=""></p><p>inode 具体包含以下信息：</p><ul><li>该文件的存取模式(read/write/excute)；</li><li>该文件的拥有者与群组(owner/group)；</li><li>该文件的容量；</li><li>该文件建立或状态改变的时间(ctime)；</li><li>最近一次的读取时间(atime)；</li><li>最近修改的时间(mtime)；</li><li>定义文件特性的旗标(flag)，如 SetUID…；</li><li>该文件真正内容的指向 (pointer)。</li></ul><h2 id="目录的-inode-与-block"><a href="#目录的-inode-与-block" class="headerlink" title="目录的 inode 与 block"></a>目录的 inode 与 block</h2><p>建立一个目录时，会分配一个 inode 与至少一个 block。block 记录的内容是目录下所有文件的 inode 编号以及文件名。可以看出文件的 inode 本身不记录文件名，文件名记录在目录中，因此新增文件、删除文件、更改文件名这些操作与目录的 w 权限有关。</p><h2 id="实体链接与符号链接"><a href="#实体链接与符号链接" class="headerlink" title="实体链接与符号链接"></a>实体链接与符号链接</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ln [-sf] source_filename dist_filename</span><br><span class="line">-s ：默认是 hard link，加 -s 为 symbolic link</span><br><span class="line">-f ：如果目标文件存在时，先删除目标文件</span><br></pre></td></tr></table></figure><h3 id="1-实体链接"><a href="#1-实体链接" class="headerlink" title="1. 实体链接"></a>1. 实体链接</h3><p>hard link 只是在某个目录下新增一个条目，使得新增的条目链接到文件的 inode 上。删除任意一个条目，文件还是存在，只要引用数量不为 0。</p><p>有以下限制：不能跨越 File System；不能对目录进行链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ln /etc/crontab .</span><br><span class="line"># ll -i /etc/crontab crontab</span><br><span class="line">34474855 -rw-r--r--. 2 root root 451 Jun 10 2014 crontab</span><br><span class="line">34474855 -rw-r--r--. 2 root root 451 Jun 10 2014 /etc/crontab</span><br></pre></td></tr></table></figure><h3 id="2-符号链接"><a href="#2-符号链接" class="headerlink" title="2. 符号链接"></a>2. 符号链接</h3><p>symbolic link 可以理解为 Windows 的快捷方式，通过建立一个独立的文件，这个文件的数据的读取指向链接的那个文件。当源文件被删除了，链接文件就打不开了。</p><p>symbolic link 可以为目录建立链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ll -i /etc/crontab /root/crontab2</span><br><span class="line">34474855 -rw-r--r--. 2 root root 451 Jun 10 2014 /etc/crontab</span><br><span class="line">53745909 lrwxrwxrwx. 1 root root 12 Jun 23 22:31 /root/crontab2 -&gt; /etc/crontab</span><br></pre></td></tr></table></figure><h1 id="压缩与打包"><a href="#压缩与打包" class="headerlink" title="压缩与打包"></a>压缩与打包</h1><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><p>Linux 底下有很多压缩文件的扩展名，常见的如下：</p><table><thead><tr><th>扩展名</th><th>压缩程序</th></tr></thead><tbody><tr><td>*.Z</td><td>compress</td></tr><tr><td>*.zip</td><td>zip</td></tr><tr><td>*.gz</td><td>gzip</td></tr><tr><td>*.bz2</td><td>bzip2</td></tr><tr><td>*.xz</td><td>xz</td></tr><tr><td>*.tar</td><td>tar 程序打包的数据，没有经过压缩</td></tr><tr><td>*.tar.gz</td><td>tar 程序打包的文件，经过 gzip 的压缩</td></tr><tr><td>*.tar.bz2</td><td>tar 程序打包的文件，经过 bzip2 的压缩</td></tr><tr><td>*.tar.xz</td><td>tar 程序打包的文件，经过 xz 的压缩</td></tr></tbody></table><h3 id="1-gzip"><a href="#1-gzip" class="headerlink" title="1. gzip"></a>1. gzip</h3><p>gzip 是 Linux 使用最广的压缩指令，可以解开 compress、zip 与 gzip 所压缩的文件。</p><p>经过 gzip 压缩过，源文件就不存在了。</p><p>有 9 个不同的压缩等级可以使用。</p><p>可以使用 zcat、zmore、zless 来读取压缩文件的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gzip [-cdtv#] filename</span><br><span class="line">-c ：将压缩的数据输出到屏幕上</span><br><span class="line">-d ：解压缩</span><br><span class="line">-t ：检验压缩文件是否出错</span><br><span class="line">-v ：显示压缩比等信息</span><br><span class="line">-# ： # 为数字的意思，代表压缩等级，数字越大压缩比越高，默认为6</span><br></pre></td></tr></table></figure><h3 id="2-bzip2"><a href="#2-bzip2" class="headerlink" title="2. bzip2"></a>2. bzip2</h3><p>提供比 gzip 更高的压缩比。</p><p>查看命令：bzcat、bzmore、bzless、bzgrep。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bzip2 [-cdkzv#] filename</span><br><span class="line">-k ：保留源文件</span><br></pre></td></tr></table></figure><h3 id="3-xz"><a href="#3-xz" class="headerlink" title="3. xz"></a>3. xz</h3><p>提供比 bzip2 更佳的压缩比。</p><p>可以看到，gzip、bzip2、xz 的压缩比不断优化。不过要注意，压缩比越高，压缩的时间也越长。</p><p>查看命令：xzcat、xzmore、xzless、xzgrep。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xz [-dtlkc#] filename</span><br></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>压缩指令只能对一个文件进行压缩，而打包能够将多个文件打包成一个大文件。tar 不仅可以用于打包，也可以使用 gip、bzip2、xz 将打包文件进行压缩。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ tar [-z|-j|-J] [cv] [-f 新建的tar文件] filename...  ==打包压缩</span><br><span class="line">$ tar [-z|-j|-J] [tv] [-f 已有的tar文件]              ==查看</span><br><span class="line">$ tar [-z|-j|-J] [xv] [-f 已有的tar文件] [-C 目录]    ==解压缩</span><br><span class="line">-z ：使用zip；</span><br><span class="line">-j ：使用bzip2；</span><br><span class="line">-J ：使用xz；</span><br><span class="line">-c ：新建打包文件；</span><br><span class="line">-t ：查看打包文件里面有哪些文件；</span><br><span class="line">-x ：解打包或解压缩的功能；</span><br><span class="line">-v ：在压缩/解压缩的过程中，显示正在处理的文件名；</span><br><span class="line">-f : filename：要处理的文件；</span><br><span class="line">-C 目录 ： 在特定目录解压缩。</span><br></pre></td></tr></table></figure><table><thead><tr><th>使用方式</th><th>命令</th></tr></thead><tbody><tr><td>打包压缩</td><td>tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称</td></tr><tr><td>查 看</td><td>tar -jtv -f filename.tar.bz2</td></tr><tr><td>解压缩</td><td>tar -jxv -f filename.tar.bz2 -C 要解压缩的目录</td></tr></tbody></table><h1 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h1><p>可以通过 Shell 请求内核提供服务，Bash 正是 Shell 的一种。</p><h2 id="Bash-特性"><a href="#Bash-特性" class="headerlink" title="Bash 特性"></a>Bash 特性</h2><p><strong>1. 命令历史</strong></p><p>记录使用过的命令。本次登录所执行的命令都会暂时存放到内存中， ~/.bash_history 文件中记录的是前一次登录所执行过的命令。</p><p><strong>2. 命令与文件补全</strong></p><p>快捷键：tab</p><p><strong>3. 命名别名</strong></p><p>例如 lm 是 ls -al 的别名。</p><p><strong>4. shell scripts</strong></p><p><strong>5. 通配符</strong></p><p>例如 ls -l /usr/bin/X* 列出 /usr/bin 下面所有以 X 开头的文件。</p><h2 id="变量操作"><a href="#变量操作" class="headerlink" title="变量操作"></a>变量操作</h2><ul><li>对一个变量赋值直接使用 = ；</li><li>对变量取用需要在变量前加上 \<img src="https://latex.codecogs.com/gif.latex?，也可以用\">{} 的形式；</li><li>输出变量使用 echo 命令。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ var=abc</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;var&#125;</span></span><br></pre></td></tr></table></figure><p>变量内容如果有空格，需要使用双引号或者单引号。双引号内的特殊字符可以保留原本特性，例如var=”lang is \&lt;img src=”<a href="https://latex.codecogs.com/gif.latex?LANG&quot;，则var的值为langiszh_TW.UTF-8；而单引号内的特殊字符就是特殊字符本身，例如var=&#39;langis\&quot;/&gt;LANG&#39;，则" target="_blank" rel="noopener">https://latex.codecogs.com/gif.latex?LANG&quot;，则var的值为langiszh_TW.UTF-8；而单引号内的特殊字符就是特殊字符本身，例如var=&#39;langis\&quot;/&gt;LANG&#39;，则</a> var 的值为 lang is \$LANG。</p><p>可以使用 `指令` 或者 \<img src="https://latex.codecogs.com/gif.latex?(指令)的方式将指令的执行结果赋值给变量。例如version=\">(uname -r)，则 version 的值为 3.10.0-229.el7.x86_64。</p><p>可以使用 export 命令将自定义变量转成环境变量，环境变量可以在子程序中使用，所谓子程序就是由当前 Bash 而产生的子 Bash。</p><p>Bash 的变量可以声明为数组和整数数字。注意数字类型没有浮点数。如果不进行声明，默认是字符串类型。变量的声明使用 declare 命令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ declare [-aixr] variable</span><br><span class="line">-a ： 定义为数组类型</span><br><span class="line">-i ： 定义为整数类型</span><br><span class="line">-x ： 定义为环境变量</span><br><span class="line">-r ： 定义为readonly类型</span><br></pre></td></tr></table></figure><p>使用 [ ] 来对数组进行操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ array[1]=a</span><br><span class="line">$ array[2]=b</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;array[1]&#125;</span></span><br></pre></td></tr></table></figure><h2 id="指令搜索顺序"><a href="#指令搜索顺序" class="headerlink" title="指令搜索顺序"></a>指令搜索顺序</h2><ol><li>以绝对或相对路径来执行指令，例如 /bin/ls 或者 ./ls ；</li><li>由别名找到该指令来执行；</li><li>由 Bash 内建的指令来执行；</li><li>按 \$PATH 变量指定的搜索路径的顺序找到第一个指令来执行。</li></ol><h2 id="数据流重定向"><a href="#数据流重定向" class="headerlink" title="数据流重定向"></a>数据流重定向</h2><p>重定向就是使用文件代替标准输入、标准输出和标准错误输出。</p><ol><li>标准输入(stdin) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;：代码为 0 ，使用 &lt; 或 &lt;&lt; ；</li><li>标准输出(stdout)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;：代码为 1 ，使用 &gt; 或 &gt;&gt; ；</li><li>标准错误输出(stderr)：代码为 2 ，使用 2&gt; 或 2&gt;&gt; ；</li></ol><p>其中，有一个箭头的表示以覆盖的方式重定向，而有两个箭头的表示以追加的方式重定向。</p><p>可以将不需要的标准输出以及标准错误输出重定向到 /dev/null，相当于扔进垃圾箱。</p><p>如果需要将标准输出以及标准错误输出同时重定向到一个文件，需要将某个输出转换为另一个输出，例如 2&gt;&amp;1 表示将标准错误输出转换为标准输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find /home -name .bashrc &gt; list 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h2 id="管线指令"><a href="#管线指令" class="headerlink" title="管线指令"></a>管线指令</h2><p>管线是将一个命令的标准输出作为另一个命令的标准输入，在数据需要经过多个步骤的处理之后才能得到我们想要的格式时就可以使用管线。在命令之间使用 | 分隔各个管线命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al /etc | less</span><br></pre></td></tr></table></figure><h3 id="1-提取指令：cut"><a href="#1-提取指令：cut" class="headerlink" title="1. 提取指令：cut"></a>1. 提取指令：cut</h3><p>提取过程一行一行地进行。</p><p>cut 对数据进行切分，取出想要的部分。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cut</span><br><span class="line">-d ：分隔符</span><br><span class="line">-f ：经过 -d 分隔后，使用 -f n 取出第 n 个区间</span><br><span class="line">-c ：以字符为单位取出区间</span><br></pre></td></tr></table></figure><p>范例 1：last 将显示的登入者的信息，要求仅显示用户名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ last</span><br><span class="line">root pts/1 192.168.201.101 Sat Feb 7 12:35 still logged in</span><br><span class="line">root pts/1 192.168.201.101 Fri Feb 6 12:13 - 18:46 (06:33)</span><br><span class="line">root pts/1 192.168.201.254 Thu Feb 5 22:37 - 23:53 (01:16)</span><br><span class="line"></span><br><span class="line">$ last | cut -d ' ' -f 1</span><br></pre></td></tr></table></figure><p>范例 2：将 export 输出的讯息，取得第 12 字符以后的所有字符串。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ export</span><br><span class="line">declare -x HISTCONTROL="ignoredups"</span><br><span class="line">declare -x HISTSIZE="1000"</span><br><span class="line">declare -x HOME="/home/dmtsai"</span><br><span class="line">declare -x HOSTNAME="study.centos.vbird"</span><br><span class="line">.....(其他省略).....</span><br><span class="line"></span><br><span class="line">$ export | cut -c 12</span><br></pre></td></tr></table></figure><h3 id="2-排序命令：sort、uniq"><a href="#2-排序命令：sort、uniq" class="headerlink" title="2. 排序命令：sort、uniq"></a>2. 排序命令：sort、uniq</h3><p><strong>sort</strong> 进行排序。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sort [-fbMnrtuk] [file or stdin]</span><br><span class="line">-f ：忽略大小写</span><br><span class="line">-b ：忽略最前面的空格</span><br><span class="line">-M ：以月份的名字来排序，例如 JAN，DEC</span><br><span class="line">-n ：使用数字</span><br><span class="line">-r ：反向排序</span><br><span class="line">-u ：相当于 unique，重复的内容只出现一次</span><br><span class="line">-t ：分隔符，默认为 tab</span><br><span class="line">-k ：指定排序的区间</span><br></pre></td></tr></table></figure><p>范例：/etc/passwd 内容是以 : 来分隔的，以第三栏来排序。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/passwd | sort -t ':' -k 3</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">dmtsai:x:1000:1000:dmtsai:/home/dmtsai:/bin/bash</span><br><span class="line">alex:x:1001:1002::/home/alex:/bin/bash</span><br><span class="line">arod:x:1002:1003::/home/arod:/bin/bash</span><br></pre></td></tr></table></figure><p><strong>uniq</strong> 可以将重复的数据只取一个。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ uniq [-ic]</span><br><span class="line">-i ：忽略大小写</span><br><span class="line">-c ：进行计数</span><br></pre></td></tr></table></figure><p>范例：取得每个人的登录总次数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ last | cut -d ' ' -f 1 | sort | uniq -c</span><br><span class="line">1</span><br><span class="line">6 (unknown</span><br><span class="line">47 dmtsai</span><br><span class="line">4 reboot</span><br><span class="line">7 root</span><br><span class="line">1 wtmp</span><br></pre></td></tr></table></figure><h3 id="3-双向输出重定向：tee"><a href="#3-双向输出重定向：tee" class="headerlink" title="3. 双向输出重定向：tee"></a>3. 双向输出重定向：tee</h3><p>输出重定向会将输出内容重定向到文件中，而 <strong>tee</strong> 不仅能够完成这个功能，还能保留屏幕上的输出。也就是说，使用 tee 指令，一个输出会同时传送到文件和屏幕上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tee [-a] file</span><br></pre></td></tr></table></figure><h3 id="4-字符转换指令：tr、col、expand、join、paste"><a href="#4-字符转换指令：tr、col、expand、join、paste" class="headerlink" title="4. 字符转换指令：tr、col、expand、join、paste"></a>4. 字符转换指令：tr、col、expand、join、paste</h3><p> <strong>tr</strong> 用来删除一行中的字符，或者对字符进行替换。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tr [-ds] SET1 ...</span><br><span class="line">-d ： 删除行中 SET1 这个字符串</span><br></pre></td></tr></table></figure><p>范例，将 last 输出的信息所有小写转换为大写。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ last | tr '[a-z]' '[A-Z]'</span><br></pre></td></tr></table></figure><p> <strong>col</strong> 将 tab 字符转为空格字符。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ col [-xb]</span><br><span class="line">-x ： 将 tab 键转换成对等的空格键</span><br></pre></td></tr></table></figure><p><strong>expand</strong> 将 tab 转换一定数量的空格，默认是 8 个。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ expand [-t] file</span><br><span class="line">-t ：tab 转为空格的数量</span><br></pre></td></tr></table></figure><p><strong>join</strong> 将有相同数据的那一行合并在一起。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ join [-ti12] file1 file2</span><br><span class="line">-t ：分隔符，默认为空格</span><br><span class="line">-i ：忽略大小写的差异</span><br><span class="line">-1 ：第一个文件所用的比较字段</span><br><span class="line">-2 ：第二个文件所用的比较字段</span><br></pre></td></tr></table></figure><p><strong>paste</strong> 直接将两行粘贴在一起。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ paste [-d] file1 file2</span><br><span class="line">-d ：分隔符，默认为 tab</span><br></pre></td></tr></table></figure><h3 id="5-分区指令：split"><a href="#5-分区指令：split" class="headerlink" title="5. 分区指令：split"></a>5. 分区指令：split</h3><p><strong>split</strong> 将一个文件划分成多个文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ split [-bl] file PREFIX</span><br><span class="line">-b ：以大小来进行分区，可加单位，例如 b, k, m 等</span><br><span class="line">-l ：以行数来进行分区。</span><br><span class="line">- PREFIX ：分区文件的前导名称</span><br></pre></td></tr></table></figure><h1 id="正规表示法与文件格式化处理"><a href="#正规表示法与文件格式化处理" class="headerlink" title="正规表示法与文件格式化处理"></a>正规表示法与文件格式化处理</h1><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>使用正则表示式把匹配的行提取出来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ grep [-acinv] [--color=auto] 搜寻字符串 filename</span><br><span class="line">-a ： 将 binary 文件以 text 文件的方式进行搜寻</span><br><span class="line">-c ： 计算找到个数</span><br><span class="line">-i ： 忽略大小写</span><br><span class="line">-n ： 输出行号</span><br><span class="line">-v ： 反向选择，亦即显示出没有 搜寻字符串 内容的那一行</span><br><span class="line">--color=auto ：找到的关键字加颜色显示</span><br></pre></td></tr></table></figure><p>范例：把含有 the 字符串的行提取出来（注意默认会有 –color=auto 选项，因此以下内容在 Linux 中有颜色显示 the 字符串）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ grep -n 'the' regular_express.txt</span><br><span class="line">8:I can't finish the test.</span><br><span class="line">12:the symbol '*' is represented as start.</span><br><span class="line">15:You are the best is mean you are the no. 1.</span><br><span class="line">16:The world Happy is the same with "glad".</span><br><span class="line">18:google is the best tools for search keyword</span><br></pre></td></tr></table></figure><p>因为 { 与 } 的符号在 shell 是有特殊意义的，因此必须要使用使用转义字符进行转义。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep -n 'go\&#123;2,5\&#125;g' regular_express.txt</span><br></pre></td></tr></table></figure><h2 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h2><p>用于格式化输出。</p><p>它不属于管道命令，在给 printf 传数据时需要使用 $( ) 形式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ printf '%10s %5i %5i %5i %8.2f \n' $(cat printf.txt)</span><br><span class="line">    DmTsai    80    60    92    77.33</span><br><span class="line">     VBird    75    55    80    70.00</span><br><span class="line">       Ken    60    90    70    73.33</span><br></pre></td></tr></table></figure><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ awk '条件类型1&#123;动作1&#125; 条件类型2&#123;动作2&#125; ...' filename</span><br></pre></td></tr></table></figure><p>awk 每次处理一行，处理的最小单位是字段，每个字段的命名方式为：\<img src="https://latex.codecogs.com/gif.latex?n，n为字段号，从1开始，\">0 表示一整行。</p><p>范例 1：取出登录用户的用户名和 ip</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ last -n 5</span><br><span class="line">dmtsai pts/0 192.168.1.100 Tue Jul 14 17:32 still logged in</span><br><span class="line">dmtsai pts/0 192.168.1.100 Thu Jul 9 23:36 - 02:58 (03:22)</span><br><span class="line">dmtsai pts/0 192.168.1.100 Thu Jul 9 17:23 - 23:36 (06:12)</span><br><span class="line">dmtsai pts/0 192.168.1.100 Thu Jul 9 08:02 - 08:17 (00:14)</span><br><span class="line">dmtsai tty1 Fri May 29 11:55 - 12:11 (00:15)</span><br><span class="line"></span><br><span class="line">$ last -n 5 | awk '&#123;print $1 "\t" $3&#125;</span><br></pre></td></tr></table></figure><p>awk 变量：</p><table><thead><tr><th>变量名称</th><th>代表意义</th></tr></thead><tbody><tr><td>NF</td><td>每一行拥有的字段总数</td></tr><tr><td>NR</td><td>目前所处理的是第几行数据</td></tr><tr><td>FS</td><td>目前的分隔字符，默认是空格键</td></tr></tbody></table><p>范例 2：输出正在处理的行号，并显示每一行有多少字段</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ last -n 5 | awk '&#123;print $1 "\t lines: " NR "\t columns: " NF&#125;'</span><br><span class="line">dmtsai lines: 1 columns: 10</span><br><span class="line">dmtsai lines: 2 columns: 10</span><br><span class="line">dmtsai lines: 3 columns: 10</span><br><span class="line">dmtsai lines: 4 columns: 10</span><br><span class="line">dmtsai lines: 5 columns: 9</span><br></pre></td></tr></table></figure><p>可以使用大于等于逻辑，其中等于使用 ==。</p><p>范例 3：/etc/passwd 文件第三个字段为 UID，对 UID 小于 10 的数据进行处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd | awk &apos;BEGIN &#123;FS=&quot;:&quot;&#125; $3 &lt; 10 &#123;print $1 &quot;\t &quot; $3&#125;&apos;</span><br><span class="line">root 0</span><br><span class="line">bin 1</span><br><span class="line">daemon 2</span><br></pre></td></tr></table></figure><h1 id="vim-三个模式"><a href="#vim-三个模式" class="headerlink" title="vim 三个模式"></a>vim 三个模式</h1><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/341c632a-1fc1-4068-9b9f-bf7ef68ebb4c.jpg" alt=""></p><p>在指令列模式下，有以下命令用于离开或者存储文件。</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>:w</td><td>写入磁盘</td></tr><tr><td>:w!</td><td>当文件为只读时，强制写入磁盘。到底能不能写入，与用户对该文件的权限有关</td></tr><tr><td>:q</td><td>离开</td></tr><tr><td>:q!</td><td>强制离开不保存</td></tr><tr><td>:wq</td><td>写入磁盘后离开</td></tr><tr><td>:wq!</td><td>强制写入磁盘后离开</td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>鸟哥. 鸟 哥 的 Linux 私 房 菜 基 础 篇 第 三 版[J]. 2009.</li><li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-rpmdpkg/index.html" target="_blank" rel="noopener">Linux 平台上的软件包管理</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0141.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Java面试笔记&lt;br&gt;
    
    </summary>
    
      <category term="Interview" scheme="http://www.iskei.cn/categories/Interview/"/>
    
    
      <category term="Interview" scheme="http://www.iskei.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库</title>
    <link href="http://www.iskei.cn/posts/37198.html"/>
    <id>http://www.iskei.cn/posts/37198.html</id>
    <published>2018-02-24T08:44:36.000Z</published>
    <updated>2018-04-18T09:00:50.154Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0142.jpg" alt="image"></p><p>Java面试笔记<br><a id="more"></a></p><h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><h2 id="1-InnoDB"><a href="#1-InnoDB" class="headerlink" title="1. InnoDB"></a>1. InnoDB</h2><p>InnoDB 是 MySQL 的默认事务型引擎，只有在需要 InnoDB 不支持的特性时，才考虑使用其它存储引擎。</p><p>采用 MVCC 来支持高并发，并且实现了四个标准的隔离级别，默认级别是可重复读。</p><p>表是基于聚簇索引建立的，它对主键的查询性能有很高的提升。</p><p>内部做了很多优化，包括从磁盘读取数据时采用的可预测性读，能够自动在内存中创建 hash 索引以加速读操作的自适应哈希索引，以及能够加速插入操作的插入缓冲区等。</p><p>通过一些机制和工具支持真正的热备份。</p><h2 id="2-MyISAM"><a href="#2-MyISAM" class="headerlink" title="2. MyISAM"></a>2. MyISAM</h2><p>MyISAM 提供了大量的特性，包括全文索引、压缩、空间函数（GIS）等。但 MyISAM 不支持事务和行级锁，而且奔溃后无法安全恢复。</p><p>只能对整张表加锁，而不是针对行。</p><p>可以手工或者自动执行检查和修复操作，但是和事务恢复以及奔溃恢复不同，可能导致一些数据丢失，而且修复操作是非常慢的。</p><p>可以包含动态或者静态的行。</p><p>如果指定了 DELAY_KEY_WRITE 选项，在每次修改执行完成时，不会立即将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘。这种方式可以极大的提升写入性能，但是在数据库或者主机奔溃时会造成索引损坏，需要执行修复操作。</p><p>如果表在创建并导入数据以后，不会再进行修改操作，那么这样的表适合采用 MyISAM 压缩表。</p><p>对于只读数据，或者表比较小、可以容忍修复操作，则依然可以继续使用 MyISAM。</p><p>MyISAM 设计简单，数据以紧密格式存储，所以在某些场景下性能很好。</p><h2 id="3-InnoDB-与-MyISAM-的比较"><a href="#3-InnoDB-与-MyISAM-的比较" class="headerlink" title="3. InnoDB 与 MyISAM 的比较"></a>3. InnoDB 与 MyISAM 的比较</h2><p><strong>事务</strong></p><p>InnoDB 是事务型的。</p><p><strong>备份</strong></p><p>InnoDB 支持在线热备份。</p><p><strong>奔溃恢复</strong></p><p>MyISAM 奔溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。</p><p><strong>并发</strong></p><p>MyISAM 只支持表级锁，而 InnoDB 还支持行级锁。</p><p><strong>其它特性</strong></p><p>MyISAM 支持全文索引，地理空间索引；</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="1-整型"><a href="#1-整型" class="headerlink" title="1. 整型"></a>1. 整型</h2><p>TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT 分别使用 8, 16, 24, 32,, 64 位存储空间，一般情况下越小的列越好。</p><p>INT(11) 中的数字只是规定了交互工具显示字符的个数，对于存储和计算来说是没有意义的。</p><h2 id="2-浮点数"><a href="#2-浮点数" class="headerlink" title="2. 浮点数"></a>2. 浮点数</h2><p>FLOAT 和 DOUBLE 为浮点类型，DECIMAL 为高精度小数类型。CPU 原生支持浮点运算，但是不支持 DECIMAl 类型的计算，因此 DECIMAL 的计算比浮点类型需要更高的代价。</p><p>FLOAT、DOUBLE 和 DECIMAL 都可以指定列宽，例如 DECIMAL(18, 9) 表示总共 18 位，取 9 位存储小数部分，剩下 9 位存储整数部分。</p><h2 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3. 字符串"></a>3. 字符串</h2><p>主要有 CHAR 和 VARCHAR 两种类型，一种是定长的，一种是变长的。</p><p>VARCHAR 这种变长类型能够节省空间，因为只需要存储必要的内容。但是在执行 UPDATE 时可能会使行变得比原来长，当超出一个页所能容纳的大小时，就要执行额外的操作，MyISAM 会将行拆成不同的片段存储，而 InnoDB 则需要分裂页来使行放进页内。</p><p>VARCHAR 会保留字符串末尾的空格，而 CHAR 会删除。</p><h2 id="4-时间和日期"><a href="#4-时间和日期" class="headerlink" title="4. 时间和日期"></a>4. 时间和日期</h2><p>MySQL 提供了两种相似的日期时间类型：DATATIME 和 TIMESTAMP。</p><p><strong>DATATIME</strong></p><p>能够保存从 1001 年到 9999 年的日期和时间，精度为秒，使用 8 字节的存储空间。</p><p>它与时区无关。</p><p>默认情况下，MySQL 以一种可排序的、无歧义的格式显示 DATATIME 值，例如“2008-01016 22:37:08”，这是 ANSI 标准定义的日期和时间表示方法。</p><p><strong>TIMESTAMP</strong></p><p>和 UNIX 时间戳相同，保存从 1970 年 1 月 1 日午夜（格林威治时间）以来的秒数，使用 4 个字节，只能表示从 1970 年 到 2038 年。</p><p>它和时区有关。</p><p>MySQL 提供了 FROM_UNIXTIME() 函数把 Unxi 时间戳转换为日期，并提供了 UNIX_TIMESTAMP() 函数把日期转换为 Unix 时间戳。</p><p>默认情况下，如果插入时没有指定 TIMESTAMP 列的值，会将这个值设置为当前时间。</p><p>应该尽量使用 TIMESTAMP，因为它比 DATETIME 空间效率更高。</p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。</p><p>索引能够轻易将查询性能提升几个数量级。</p><p>对于非常小的表、大部分情况下简单的全表扫描比建立索引更高效。对于中到大型的表，索引就非常有效。但是对于特大型的表，建立和使用索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。</p><h2 id="1-索引分类"><a href="#1-索引分类" class="headerlink" title="1. 索引分类"></a>1. 索引分类</h2><h3 id="1-1-B-Tree-索引"><a href="#1-1-B-Tree-索引" class="headerlink" title="1.1 B-Tree 索引"></a>1.1 B-Tree 索引</h3><p>B-Tree 索引是大多数 MySQL 存储引擎的默认索引类型。</p><p>因为不再需要进行全表扫描，只需要对树进行搜索即可，因此查找速度快很多。</p><p>可以指定多个列作为索引列，多个索引列共同组成键。B-Tree 索引适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。</p><p>除了用于查找，还可以用于排序和分组。</p><p>如果不是按照索引列的顺序进行查找，则无法使用索引。</p><h3 id="1-2-哈希索引"><a href="#1-2-哈希索引" class="headerlink" title="1.2 哈希索引"></a>1.2 哈希索引</h3><p>基于哈希表实现，优点是查找非常快。</p><p>在 MySQL 中只有 Memory 引擎显式支持哈希索引。</p><p>InnoDB 引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B-Tree 索引之上再创建一个哈希索引，这样就让 B-Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。</p><p>限制：哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行。不过，访问内存中的行的速度很快，所以大部分情况下这一点对性能影响并不明显；无法用于分组与排序；只支持精确查找，无法用于部分查找和范围查找；如果哈希冲突很多，查找速度会变得很慢。</p><h3 id="1-3-空间索引数据（R-Tree）"><a href="#1-3-空间索引数据（R-Tree）" class="headerlink" title="1.3. 空间索引数据（R-Tree）"></a>1.3. 空间索引数据（R-Tree）</h3><p>MyISAM 存储引擎支持空间索引，可以用于地理数据存储。</p><p>空间索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。</p><h3 id="1-4-全文索引"><a href="#1-4-全文索引" class="headerlink" title="1.4 全文索引"></a>1.4 全文索引</h3><p>MyISAM 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较索引中的值。</p><p>使用 MATCH AGAINST，而不是普通的 WHERE。</p><h2 id="2-索引的优点"><a href="#2-索引的优点" class="headerlink" title="2. 索引的优点"></a>2. 索引的优点</h2><ul><li><p>大大减少了服务器需要扫描的数据量；</p></li><li><p>帮助服务器避免进行排序和创建临时表；</p></li><li><p>将随机 I/O 变为顺序 I/O。</p></li></ul><h2 id="3-索引优化"><a href="#3-索引优化" class="headerlink" title="3. 索引优化"></a>3. 索引优化</h2><h3 id="3-1-独立的列"><a href="#3-1-独立的列" class="headerlink" title="3.1 独立的列"></a>3.1 独立的列</h3><p>在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数，否则无法使用索引。</p><p>例如下面的查询不能使用 actor_id 列的索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> actor_id <span class="keyword">FROM</span> sakila.actor <span class="keyword">WHERE</span> actor_id + <span class="number">1</span> = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="3-2-前缀索引"><a href="#3-2-前缀索引" class="headerlink" title="3.2 前缀索引"></a>3.2 前缀索引</h3><p>对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引，只索引开始的部分字符。</p><p>对于前缀长度的选取需要根据 <strong>索引选择性</strong> 来确定：不重复的索引值和记录总数的比值。选择性越高，查询效率也越高。最大值为 1 ，此时每个记录都有唯一的索引与其对应。</p><h3 id="3-3-多列索引"><a href="#3-3-多列索引" class="headerlink" title="3.3 多列索引"></a>3.3 多列索引</h3><p>在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。例如下面的语句中，最好把 actor_id 和 file_id 设置为多列索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> file_id, actor_ <span class="keyword">id</span> <span class="keyword">FROM</span> sakila.film_actor</span><br><span class="line"><span class="keyword">WhERE</span> actor_id = <span class="number">1</span> <span class="keyword">OR</span> film_id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="3-4-索引列的顺序"><a href="#3-4-索引列的顺序" class="headerlink" title="3.4 索引列的顺序"></a>3.4 索引列的顺序</h3><p>让选择性最强的索引列放在前面，例如下面显示的结果中 customer_id 的选择性比 staff_id 更高，因此最好把 customer_id 列放在多列索引的前面。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> staff_id)/<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> staff_id_selectivity,</span><br><span class="line"><span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> customer_id)/<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> customer_id_selectivity,</span><br><span class="line"><span class="keyword">COUNT</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> payment;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   staff_id_selectivity: 0.0001</span><br><span class="line">customer_id_selectivity: 0.0373</span><br><span class="line">               COUNT(*): 16049</span><br></pre></td></tr></table></figure><h3 id="3-5-聚簇索引"><a href="#3-5-聚簇索引" class="headerlink" title="3.5 聚簇索引"></a>3.5 聚簇索引</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/b9e9ae8c-e216-4c01-b267-a50dbeb98fa4.jpg" alt=""></p><p>聚簇索引并不是一种索引类型，而是一种数据存储方式。</p><p>术语“聚簇”表示数据行和相邻的键值紧密地存储在一起，InnoDB 的聚簇索引的数据行存放在 B-Tree 的叶子页中。</p><p>因为无法把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。</p><p><strong>优点</strong></p><ol><li>可以把相关数据保存在一起，减少 I/O 操作；</li><li>因为数据保存在 B-Tree 中，因此数据访问更快。</li></ol><p><strong>缺点</strong></p><ol><li>聚簇索引最大限度提高了 I/O 密集型应用的性能，但是如果数据全部放在内存，就没必要用聚簇索引。</li><li>插入速度严重依赖于插入顺序，按主键的顺序插入是最快的。</li><li>更新操作代价很高，因为每个被更新的行都会移动到新的位置。</li><li>当插入到某个已满的页中，存储引擎会将该页分裂成两个页面来容纳该行，页分裂会导致表占用更多的磁盘空间。</li><li>如果行比较稀疏，或者由于页分裂导致数据存储不连续时，聚簇索引可能导致全表扫描速度变慢。</li></ol><h3 id="3-6-覆盖索引"><a href="#3-6-覆盖索引" class="headerlink" title="3.6 覆盖索引"></a>3.6 覆盖索引</h3><p>索引包含所有需要查询的字段的值。</p><h2 id="4-B-Tree-和-B-Tree-原理"><a href="#4-B-Tree-和-B-Tree-原理" class="headerlink" title="4. B-Tree 和 B+Tree 原理"></a>4. B-Tree 和 B+Tree 原理</h2><h3 id="4-1-B-Tree"><a href="#4-1-B-Tree" class="headerlink" title="4. 1 B-Tree"></a>4. 1 B-Tree</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/5ed71283-a070-4b21-85ae-f2cbfd6ba6e1.jpg" alt=""></p><p>为了描述 B-Tree，首先定义一条数据记录为一个二元组 [key, data]，key 为记录的键，data 为数据记录除 key 外的数据。</p><p>B-Tree 是满足下列条件的数据结构：</p><ul><li>所有叶节点具有相同的深度，也就是说 B-Tree 是平衡的；</li><li>一个节点中的 key 从左到右非递减排列；</li><li>如果某个指针的左右相邻 key 分别是 key<sub>i</sub> 和 key<sub>i+1</sub>，且不为 null，则该指针指向节点的所有 key 大于 key<sub>i</sub> 且小于 key<sub>i+1</sub>。</li></ul><p>在 B-Tree 中按 key 检索数据的算法非常直观：首先从根节点进行二分查找，如果找到则返回对应节点的 data，否则对相应区间的指针指向的节点递归进行查找，直到找到节点或找到 null 指针，前者查找成功，后者查找失败。</p><p>由于插入删除新的数据记录会破坏 B-Tree 的性质，因此在插入删除时，需要对树进行一个分裂、合并、转移等操作以保持 B-Tree 性质。</p><h3 id="4-2-B-Tree"><a href="#4-2-B-Tree" class="headerlink" title="4.2 B+Tree"></a>4.2 B+Tree</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/63cd5b50-d6d8-4df6-8912-ef4a1dd5ba13.jpg" alt=""></p><p>与 B-Tree 相比，B+Tree 有以下不同点：</p><ul><li>每个节点的指针上限为 2d 而不是 2d+1；</li><li>内节点不存储 data，只存储 key，叶子节点不存储指针。</li></ul><h3 id="4-3-带有顺序访问指针的-B-Tree"><a href="#4-3-带有顺序访问指针的-B-Tree" class="headerlink" title="4.3 带有顺序访问指针的 B+Tree"></a>4.3 带有顺序访问指针的 B+Tree</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/1ee5f0a5-b8df-43b9-95ab-c516c54ec797.jpg" alt=""></p><p>一般在数据库系统或文件系统中使用的 B+Tree 结构都在经典 B+Tree 基础上进行了优化，在叶子节点增加了顺序访问指针，做这个优化的目的是为了提高区间访问的性能。</p><h3 id="4-4-为什么使用-B-Tree-和-B-Tree"><a href="#4-4-为什么使用-B-Tree-和-B-Tree" class="headerlink" title="4.4 为什么使用 B-Tree 和 B+Tree"></a>4.4 为什么使用 B-Tree 和 B+Tree</h3><p>红黑树等数据结构也可以用来实现索引，但是文件系统及数据库系统普遍采用 B-/+Tree 作为索引结构。</p><p>页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页得大小通常为 4k），主存和磁盘以页为单位交换数据。</p><p>一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。为了减少磁盘 I/O，磁盘往往不是严格按需读取，而是每次都会预读。这样做的理论依据是计算机科学中著名的局部性原理：当一个数据被用到时，其附近的数据也通常会马上被使用。数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次 I/O 就可以完全载入。B-Tree 中一次检索最多需要 h-1 次 I/O（根节点常驻内存），渐进复杂度为 O(h)=O(logdN)。一般实际应用中，出度 d 是非常大的数字，通常超过 100，因此 h 非常小（通常不超过 3）。而红黑树这种结构，h 明显要深的多。并且于逻辑上很近的节点（父子）物理上可能很远，无法利用局部性，效率明显比 B-Tree 差很多。</p><p>B+Tree 更适合外存索引，原因和内节点出度 d 有关。由于 B+Tree 内节点去掉了 data 域，因此可以拥有更大的出度，拥有更好的性能。</p><h1 id="查询性能优化"><a href="#查询性能优化" class="headerlink" title="查询性能优化"></a>查询性能优化</h1><h2 id="1-Explain"><a href="#1-Explain" class="headerlink" title="1. Explain"></a>1. Explain</h2><p>用来分析 SQL 语句，分析结果中比较重要的字段有：</p><ul><li><p>select_type : 查询类型，有简单查询、联合查询和子查询</p></li><li><p>key : 使用的索引</p></li><li><p>rows : 扫描的行数</p></li></ul><h2 id="2-减少返回的列"><a href="#2-减少返回的列" class="headerlink" title="2. 减少返回的列"></a>2. 减少返回的列</h2><p>慢查询主要是因为访问了过多数据，除了访问过多行之外，也包括访问过多列。</p><p>最好不要使用 SELECT * 语句，要根据需要选择查询的列。</p><h2 id="3-减少返回的行"><a href="#3-减少返回的行" class="headerlink" title="3. 减少返回的行"></a>3. 减少返回的行</h2><p>最好使用 LIMIT 语句来取出想要的那些行。</p><p>还可以建立索引来减少条件语句的全表扫描。例如对于下面的语句，不适用索引的情况下需要进行全表扫描，而使用索引只需要扫描几行记录即可，使用 Explain 语句可以通过观察 rows 字段来看出这种差异。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sakila.film_actor <span class="keyword">WHERE</span> film_id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="4-拆分大的-DELETE-或-INSERT-语句"><a href="#4-拆分大的-DELETE-或-INSERT-语句" class="headerlink" title="4. 拆分大的 DELETE 或 INSERT 语句"></a>4. 拆分大的 DELETE 或 INSERT 语句</h2><p>如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELEFT FROM messages WHERE <span class="keyword">create</span> &lt; <span class="keyword">DATE_SUB</span>(<span class="keyword">NOW</span>(), <span class="built_in">INTERVAL</span> <span class="number">3</span> <span class="keyword">MONTH</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rows_affected = 0</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    rows_affected = do_query(</span><br><span class="line">    <span class="string">"DELETE FROM messages WHERE create  &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000"</span>)</span><br><span class="line">&#125; <span class="keyword">while</span> rows_affected &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="分库与分表"><a href="#分库与分表" class="headerlink" title="分库与分表"></a>分库与分表</h1><p><strong>1. 分表与分区的不同</strong></p><p>分表，就是讲一张表分成多个小表，这些小表拥有不同的表名；而分区是将一张表的数据分为多个区块，这些区块可以存储在同一个磁盘上，也可以存储在不同的磁盘上，这种方式下表仍然只有一个。</p><p><strong>2. 使用分库与分表的原因</strong></p><p>随着时间和业务的发展，数据库中的表会越来越多，并且表中的数据量也会越来越大，那么读写操作的开销也会随着增大。</p><p><strong>3. 垂直切分</strong></p><p>将表按功能模块、关系密切程度划分出来，部署到不同的库上。例如，我们会建立商品数据库 payDB、用户数据库 userDB 等，分别用来存储项目与商品有关的表和与用户有关的表。</p><p><strong>4. 水平切分</strong></p><p>把表中的数据按照某种规则存储到多个结构相同的表中，例如按 id 的散列值、性别等进行划分，</p><p><strong>5. 垂直切分与水平切分的选择</strong></p><p>如果数据库中的表太多，并且项目各项业务逻辑清晰，那么垂直切分是首选。</p><p>如果数据库的表不多，但是单表的数据量很大，应该选择水平切分。</p><p><strong>6. 水平切分的实现方式</strong></p><p>最简单的是使用 merge 存储引擎。</p><p><strong>7. 分库与分表存在的问题</strong></p><p>(1) 事务问题</p><p>在执行分库分表之后，由于数据存储到了不同的库上，数据库事务管理出现了困难。如果依赖数据库本身的分布式事务管理功能去执行事务，将付出高昂的性能代价；如果由应用程序去协助控制，形成程序逻辑上的事务，又会造成编程方面的负担。</p><p>(2) 跨库跨表连接问题</p><p>在执行了分库分表之后，难以避免会将原本逻辑关联性很强的数据划分到不同的表、不同的库上。这时，表的连接操作将受到限制，我们无法连接位于不同分库的表，也无法连接分表粒度不同的表，导致原本只需要一次查询就能够完成的业务需要进行多次才能完成。</p><h1 id="故障转移和故障恢复"><a href="#故障转移和故障恢复" class="headerlink" title="故障转移和故障恢复"></a>故障转移和故障恢复</h1><p>故障转移也叫做切换，当主库出现故障时就切换到备库，使备库成为主库。故障恢复顾名思义就是从故障中恢复过来，并且保证数据的正确性。</p><h2 id="1-故障转移"><a href="#1-故障转移" class="headerlink" title="1. 故障转移"></a>1. 故障转移</h2><p><strong>1.1 提升备库或切换角色</strong></p><p>提升一台备库为主库，或者在一个主-主复制结构中调整主动和被动角色。</p><p><strong>1.2 虚拟 IP 地址和 IP 托管</strong></p><p>为 MySQL 实例指定一个逻辑 IP 地址，当 MySQL 实例失效时，可以将 IP 地址转移到另一台 MySQL 服务器上。</p><p><strong>1.3 中间件解决方案</strong></p><p>通过代理，可以路由流量到可以使用的服务器上。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/fabd5fa0-b75e-48d0-9e2c-31471945ceb9.jpg" alt=""></p><p><strong>1.4 在应用中处理故障转移</strong></p><p>将故障转移整合到应用中可能导致应用变得太过笨拙。</p><h2 id="2-故障恢复"><a href="#2-故障恢复" class="headerlink" title="2. 故障恢复"></a>2. 故障恢复</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>高性能 MySQL</li><li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL 索引背后的数据结构及算法原理 </a></li><li><a href="http://www.runoob.com/w3cnote/mysql-index.html" target="_blank" rel="noopener">MySQL 索引优化全攻略 </a></li><li><a href="https://www.jfox.info/20-tiao-mysql-xing-nen-you-hua-de-zui-jia-jing-yan.html" target="_blank" rel="noopener">20+ 条 MySQL 性能优化的最佳经验 </a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0142.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Java面试笔记&lt;br&gt;
    
    </summary>
    
      <category term="Interview" scheme="http://www.iskei.cn/categories/Interview/"/>
    
    
      <category term="Interview" scheme="http://www.iskei.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>SQL命令</title>
    <link href="http://www.iskei.cn/posts/16221.html"/>
    <id>http://www.iskei.cn/posts/16221.html</id>
    <published>2018-02-24T08:44:36.000Z</published>
    <updated>2018-04-18T09:00:50.154Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0143.jpg" alt="image"></p><p>Java面试笔记<br><a id="more"></a></p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>模式：定义了数据如何存储、存储什么样的数据以及数据如何分解等信息，数据库和表都有模式。</p><p>主键的值不允许修改，也不允许复用（不能使用已经删除的主键值赋给新数据行的主键）。</p><p>SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL，各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。</p><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。</p><p><strong>DISTINCT</strong></p><p>相同值只会出现一次。它作用于所有列，也就是说所有列的值都相同才算相同。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> col1, col2</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></table></figure><p><strong>LIMIT</strong></p><p>限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。</p><p>返回前 5 行的 SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>返回第 3 ~ 5 行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">2</span>, <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><strong>注释</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 注释</span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable <span class="comment">-- 注释</span></span><br><span class="line"><span class="comment">/* 注释1</span></span><br><span class="line"><span class="comment">   注释2 */</span></span><br></pre></td></tr></table></figure><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p><strong>ASC</strong>：升序（默认）<br><strong>DESC</strong>：降序</p><p>可以按多个列进行排序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> col1 <span class="keyword">DESC</span>, col2 <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><h1 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h1><p>在应用层也可以过滤数据，但是不在服务器端进行过滤的数据非常大，导致通过网络传输了很多多余的数据，从而浪费了网络带宽。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>下表显示了 WHERE 子句可用的操作符</p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>= &lt;  &gt;</td><td>等于 小于 大于</td></tr><tr><td>&lt;&gt; !=</td><td>不等于</td></tr><tr><td>&lt;= !&gt;</td><td>小于等于</td></tr><tr><td>&gt;= !&lt;</td><td>大于等于</td></tr><tr><td>BETWEEN</td><td>在两个值之间</td></tr><tr><td>IS NULL</td><td>为NULL值</td></tr></tbody></table><p>应该注意到，NULL 与 0 、空字符串都不同。</p><p><strong>AND OR</strong> 用于连接多个过滤条件。优先处理 AND，因此当一个过滤表达式涉及到多个 AND 和 OR 时，应当使用 () 来决定优先级。</p><p><strong>IN</strong> 操作符用于匹配一组值，其后也可以接一个 SELECT 子句，从而匹配子查询得到的一组值。</p><p><strong>NOT</strong> 操作符用于否定一个条件。</p><h1 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h1><p>通配符也是用在过滤语句中，只能用于文本字段。</p><ul><li><p><strong>%</strong> 匹配 &gt;=0 个任意字符，类似于 *；</p></li><li><p><strong>_</strong> 匹配 ==1 个任意字符，类似于 .；</p></li><li><p><strong>[ ]</strong> 可以匹配集合内的字符，用脱字符 ^ 可以对其进行否定</p></li></ul><p>使用 Like 来进行通配符匹配。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> <span class="keyword">LIKE</span> <span class="string">'[^AB]%'</span> <span class="comment">-- 不以AB开头的任意文本</span></span><br></pre></td></tr></table></figure><p>不要滥用通配符，通配符位于开头处匹配会非常慢。</p><h1 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h1><p>在数据库服务器上完成数据的转换和格式化的工作往往比客户端上快得多，并且转换和格式化后的数据量更少的话可以减少网络通信量。</p><p>计算字段通常需要使用 <strong>AS</strong> 来取别名，否则输出的时候字段名为计算表达式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1*col2 <span class="keyword">AS</span> <span class="keyword">alias</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br></pre></td></tr></table></figure><p><strong>Concat()</strong> 用于连接两个字段。许多数据库会使用空格把一个值填充为列宽，因此连接的结果会出现一些不必要的空格，使用 <strong>TRIM()</strong> 可以去除首尾空格。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">Concat</span>(<span class="keyword">TRIM</span>(col1), <span class="string">' ('</span>, <span class="keyword">TRIM</span>(col2), <span class="string">')'</span>)</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>各个 DBMS 的函数都是不相同的，因此不可移植。</p><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>LEFT() RIGHT()</td><td>左边或者右边的字符</td></tr><tr><td>LOWER() UPPER()</td><td>转换为小写或者大写</td></tr><tr><td>LTRIM() RTIM()</td><td>去除左边或者右边的空格</td></tr><tr><td>LENGTH()</td><td>长度</td></tr><tr><td>SUNDEX()</td><td>转换为语音值</td></tr></tbody></table><p>其中，<strong>SOUNDEX()</strong> 是将一个字符串转换为描述其语音表示的字母数字模式的算法，它是根据发音而不是字母比较。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">SOUNDEX</span>(col1) = <span class="keyword">SOUNDEX</span>(<span class="string">'apple'</span>)</span><br></pre></td></tr></table></figure><h2 id="日期和时间处理"><a href="#日期和时间处理" class="headerlink" title="日期和时间处理"></a>日期和时间处理</h2><p>日期格式：YYYY-MM-DD</p><p>时间格式：HH:MM:SS</p><table><thead><tr><th>函 数</th><th>说 明</th></tr></thead><tbody><tr><td>AddDate()</td><td>增加一个日期（天、周等）</td></tr><tr><td>AddTime()</td><td>增加一个时间（时、分等）</td></tr><tr><td>CurDate()</td><td>返回当前日期</td></tr><tr><td>CurTime()</td><td>返回当前时间</td></tr><tr><td>Date()</td><td>返回日期时间的日期部分</td></tr><tr><td>DateDiff()</td><td>计算两个日期之差</td></tr><tr><td>Date_Add()</td><td>高度灵活的日期运算函数</td></tr><tr><td>Date_Format()</td><td>返回一个格式化的日期或时间串</td></tr><tr><td>Day()</td><td>返回一个日期的天数部分</td></tr><tr><td>DayOfWeek()</td><td>对于一个日期，返回对应的星期几</td></tr><tr><td>Hour()</td><td>返回一个时间的小时部分</td></tr><tr><td>Minute()</td><td>返回一个时间的分钟部分</td></tr><tr><td>Month()</td><td>返回一个日期的月份部分</td></tr><tr><td>Now()</td><td>返回当前日期和时间</td></tr><tr><td>Second()</td><td>返回一个时间的秒部分</td></tr><tr><td>Time()</td><td>返回一个日期时间的时间部分</td></tr><tr><td>Year()</td><td>返回一个日期的年份部分</td></tr></tbody></table><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT NOW();</span><br><span class="line">        -&gt; '2017-06-28 14:01:52'</span><br></pre></td></tr></table></figure><h2 id="数值处理"><a href="#数值处理" class="headerlink" title="数值处理"></a>数值处理</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>SIN()</td><td>正弦</td></tr><tr><td>COS()</td><td>余弦</td></tr><tr><td>TAN()</td><td>正切</td></tr><tr><td>ABS()</td><td>绝对值</td></tr><tr><td>SQRT()</td><td>平方根</td></tr><tr><td>MOD()</td><td>余数</td></tr><tr><td>EXP()</td><td>指数</td></tr><tr><td>PI()</td><td>圆周率</td></tr><tr><td>RAND()</td><td>随机数</td></tr></tbody></table><h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><table><thead><tr><th>函 数</th><th>说 明</th></tr></thead><tbody><tr><td>AVG()</td><td>返回某列的平均值</td></tr><tr><td>COUNT()</td><td>返回某列的行数</td></tr><tr><td>MAX()</td><td>返回某列的最大值</td></tr><tr><td>MIN()</td><td>返回某列的最小值</td></tr><tr><td>SUM()</td><td>返回某列值之和</td></tr></tbody></table><p>AVG() 会忽略 NULL 行。</p><p>DISTINCT 关键字会只汇总不同的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(<span class="keyword">DISTINCT</span> col1) <span class="keyword">AS</span> avg_col</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br></pre></td></tr></table></figure><h1 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h1><p>分组就是把相同的数据放在同一组中。</p><p>可以对每组数据使用汇总函数进行处理，例如求每组数的平均值等。</p><p>按 col 排序并分组数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">col</span>;</span><br></pre></td></tr></table></figure><p>WHERE 过滤行，HAVING 过滤分组，行过滤应当先与分组过滤；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> &gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>GROUP BY 的排序结果为分组字段，而 ORDER BY 也可以以聚集字段来进行排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">num</span>;</span><br></pre></td></tr></table></figure><p>分组规定：</p><ol><li>GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前；</li><li>除了汇总计算语句之外，SELECT 语句中的每一列都必须在 GROUP BY 子句中给出；</li><li>NULL 的行会单独分为一组；</li><li>大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型。</li></ol><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>子查询中只能返回一个列。</p><p>可以将子查询的结果作为 WHRER 语句的过滤条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM mytable1</span><br><span class="line">WHERE col1 IN (SELECT col2</span><br><span class="line">                 FROM mytable2);</span><br></pre></td></tr></table></figure><p>下面的语句可以检索出客户的订单数量。子查询语句会对检索出的每个客户执行一次：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*)</span><br><span class="line">                   <span class="keyword">FROM</span> Orders</span><br><span class="line">                   <span class="keyword">WHERE</span> Orders.cust_id = Customers.cust_id)</span><br><span class="line">                   <span class="keyword">AS</span> orders_num</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name;</span><br></pre></td></tr></table></figure><h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>连接用于连接多个表，使用 JOIN 关键字，并且条件语句使用 ON。</p><p>连接可以替换子查询，并且比子查询的效率一般会更快。</p><p>可以用 AS 给列名、计算字段和表名取别名，给表名取别名是为了简化 SQL 语句以及连接相同表。</p><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>内连接又称等值连接，使用 INNER JOIN 关键字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select a, b, c</span><br><span class="line">from A inner join B</span><br><span class="line">on A.key = B.key</span><br></pre></td></tr></table></figure><p>可以不明确使用 INNER JOIN，而使用普通查询并在 WHERE 中将两个表中要连接的列用等值方法连接起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select a, b, c</span><br><span class="line">from A, B</span><br><span class="line">where A.key = B.key</span><br></pre></td></tr></table></figure><p>在没有条件语句的情况下返回笛卡尔积。</p><h2 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h2><p>自连接可以看成内连接的一种，只是连接的表是自身而已。</p><p>一张员工表，包含员工姓名和员工所属部门，要找出与 Jim 处在同一部门的所有员工姓名。</p><p><strong>子查询版本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select name</span><br><span class="line">from employee</span><br><span class="line">where department = (</span><br><span class="line">      select department</span><br><span class="line">      from employee</span><br><span class="line">      where name = &quot;Jim&quot;);</span><br></pre></td></tr></table></figure><p><strong>自连接版本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select name</span><br><span class="line">from employee as e1, employee as e2</span><br><span class="line">where e1.department = e2.department</span><br><span class="line">      and e1.name = &quot;Jim&quot;;</span><br></pre></td></tr></table></figure><p>连接一般比子查询的效率高。</p><h2 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h2><p>自然连接是把同名列通过等值测试连接起来的，同名列可以有多个。</p><p>内连接和自然连接的区别：内连接提供连接的列，而自然连接自动连接所有同名列；内连接属于自然连接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from employee natural join department;</span><br></pre></td></tr></table></figure><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>外连接保留了没有关联的那些行。分为左外连接，右外连接以及全外连接，左外连接就是保留左表的所有行。</p><p>检索所有顾客的订单信息，包括还没有订单信息的顾客。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select Customers.cust_id, Orders.order_num</span><br><span class="line">   from Customers left outer join Orders</span><br><span class="line">   on Customers.cust_id = Orders.curt_id</span><br></pre></td></tr></table></figure><p>如果需要统计顾客的订单数，使用聚集函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select Customers.cust_id,</span><br><span class="line">       COUNT(Orders.order_num) as num_ord</span><br><span class="line">from Customers left outer join Orders</span><br><span class="line">on Customers.cust_id = Orders.curt_id</span><br><span class="line">group by Customers.cust_id</span><br></pre></td></tr></table></figure><h1 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h1><p>使用 <strong>UNION</strong> 来连接两个查询，每个查询必须包含相同的列、表达式或者聚集函数。</p><p>默认会去除相同行，如果需要保留相同行，使用 UNION ALL 。</p><p>只能包含一个 ORDER BY 子句，并且必须位于语句的最后。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> =<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><p><strong>普通插入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable(col1, col2)</span><br><span class="line"><span class="keyword">VALUES</span>(val1, val2);</span><br></pre></td></tr></table></figure><p><strong>插入检索出来的数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable1(col1, col2)</span><br><span class="line"><span class="keyword">SELECT</span> col1, col2</span><br><span class="line"><span class="keyword">FROM</span> mytable2;</span><br></pre></td></tr></table></figure><p><strong>将一个表的内容复制到一个新表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newtable <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></table></figure><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> mytable</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">col</span> = val</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>TRUNCATE TABLE</strong> 可以清空表，也就是删除所有行。</p><p>使用更新和删除操作时一定要用 WHERE 子句，不然会把整张表的数据都破坏。可以先用 SELECT 语句进行测试，防止错误删除。</p><h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  col1 <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">  col2 <span class="built_in">VARCHAR</span>(<span class="number">45</span>) <span class="literal">NULL</span>,</span><br><span class="line">  col3 <span class="built_in">DATE</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>));</span><br></pre></td></tr></table></figure><h1 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h1><p><strong>添加列</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">col</span> <span class="built_in">CHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p><strong>删除列</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> <span class="keyword">col</span>;</span><br></pre></td></tr></table></figure><p><strong>删除表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> mytable;</span><br></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作。对视图的操作和对普通表的操作一样。</p><p>视图具有如下好处：</p><ol><li>简化复杂的 SQL 操作，比如复杂的联结；</li><li>只使用实际表的一部分数据；</li><li>通过只给用户访问视图的权限，保证数据的安全性；</li><li>更改数据格式和表示。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myview <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">Concat</span>(col1, col2) <span class="keyword">AS</span> concat_col, col3*col4 <span class="keyword">AS</span> count_col</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col5 = val;</span><br></pre></td></tr></table></figure><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>存储过程可以看成是对一系列 SQL 操作的批处理；</p><p><strong>使用存储过程的好处</strong></p><ol><li>把实现封装在了存储过程中，不仅简单，也保证了安全性；</li><li>可以复用代码；</li><li>由于是预先编译，因此具有很高的性能。</li></ol><p><strong>创建存储过程</strong></p><p>命令行中创建存储过程需要自定义分隔符，因为命令行是以 ; 为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误。</p><p>包含 in、out 和 inout 三种参数。</p><p>给变量赋值都需要用 select into 语句。</p><p>每次只能给一个变量赋值，不支持集合的操作。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> myprocedure( <span class="keyword">out</span> ret <span class="built_in">int</span> )</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">declare</span> y <span class="built_in">int</span>;</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">sum</span>(col1)</span><br><span class="line">        <span class="keyword">from</span> mytable</span><br><span class="line">        <span class="keyword">into</span> y;</span><br><span class="line">        <span class="keyword">select</span> y*y <span class="keyword">into</span> ret;</span><br><span class="line">    <span class="keyword">end</span> //</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> myprocedure(@ret);</span><br><span class="line"><span class="keyword">select</span> @ret;</span><br></pre></td></tr></table></figure><h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1><p>在存储过程中使用游标可以对一个结果集进行移动遍历。</p><p>游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。</p><p><strong>使用游标的四个步骤：</strong></p><ol><li>声明游标，这个过程没有实际检索出数据；</li><li>打开游标；</li><li>取出数据；</li><li>关闭游标；</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> myprocedure(<span class="keyword">out</span> ret <span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">declare</span> done <span class="built_in">boolean</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">declare</span> mycursor <span class="keyword">cursor</span> <span class="keyword">for</span></span><br><span class="line">        <span class="keyword">select</span> col1 <span class="keyword">from</span> mytable;</span><br><span class="line">        # 定义了一个continue handler，当 sqlstate '02000' 这个条件出现时，会执行 set done = 1</span><br><span class="line">        <span class="keyword">declare</span> continue <span class="keyword">handler</span> <span class="keyword">for</span> <span class="keyword">sqlstate</span> <span class="string">'02000'</span> <span class="keyword">set</span> done = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        open mycursor;</span><br><span class="line"></span><br><span class="line">        repeat</span><br><span class="line">            fetch mycursor into ret;</span><br><span class="line">            <span class="keyword">select</span> ret;</span><br><span class="line">        until done <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line"></span><br><span class="line">        close mycursor;</span><br><span class="line">    <span class="keyword">end</span> //</span><br><span class="line"> delimiter ;</span><br></pre></td></tr></table></figure><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>触发器会在某个表执行以下语句时而自动执行：DELETE、INSERT、UPDATE</p><p>触发器必须指定在语句执行之前还是之后自动执行，之前执行使用 BEFORE 关键字，之后执行使用 AFTER 关键字。BEFORE 用于数据验证和净化。</p><p>INSERT 触发器包含一个名为 NEW 的虚拟表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> mytrigger <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> mytable</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">SELECT</span> NEW.col;</span><br></pre></td></tr></table></figure><p>DELETE 触发器包含一个名为 OLD 的虚拟表，并且是只读的。</p><p>UPDATE 触发器包含一个名为 NEW 和一个名为 OLD 的虚拟表，其中 NEW 是可以被修改地，而 OLD 是只读的。</p><p>可以使用触发器来进行审计跟踪，把修改记录到另外一张表中。</p><p>MySQL 不允许在触发器中使用 CALL 语句 ，也就是不能调用存储过程。</p><h1 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h1><p><strong>基本术语</strong></p><ol><li>事务（transaction）指一组 SQL 语句；</li><li>回退（rollback）指撤销指定 SQL 语句的过程；</li><li>提交（commit）指将未存储的 SQL 语句结果写入数据库表；</li><li>保留点（savepoint）指事务处理中设置的临时占位符（placeholder），你可以对它发布回退（与回退整个事务处理不同）。</li></ol><p>不能回退 SELECT 语句，回退 SELECT 语句也没意义；也不能回退 CRETE 和 DROP 语句。</p><p>MySQL 的事务提交默认是隐式提交，也就是每执行一条语句就会提交一次。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。</p><p>通过设置 autocommit 为 0 可以取消自动提交，直到 autocommit 被设置为 1 才会提交；autocommit 标记是针对每个连接而不是针对服务器的。</p><p>如果没有设置保留点，ROLLBACK 会回退到 START TRANSACTION 语句处；如果设置了保留点，并且在 ROLLBACK 中指定该保留点，则会回退到该保留点。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span></span><br><span class="line">// ...</span><br><span class="line"><span class="keyword">SAVEPOINT</span> delete1</span><br><span class="line">// ...</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> delete1</span><br><span class="line">// ...</span><br><span class="line"><span class="keyword">COMMIT</span></span><br></pre></td></tr></table></figure><h1 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h1><p><strong>基本术语</strong></p><ol><li>字符集为字母和符号的集合；</li><li>编码为某个字符集成员的内部表示；</li><li>校对字符指定如何比较，主要用于排序和分组。</li></ol><p>除了给表指定字符集和校对外，也可以给列指定：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(<span class="keyword">col</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> latin <span class="keyword">COLLATE</span> latin1_general_ci )</span><br><span class="line"><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> hebrew <span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure><p>可以在排序、分组时指定校对：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">col</span> <span class="keyword">COLLATE</span> latin1_general_ci;</span><br></pre></td></tr></table></figure><h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><p>MySQL 的账户信息保存在 mysql 这个数据库中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p><strong>创建账户</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> myuser <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'mypassword'</span>;</span><br></pre></td></tr></table></figure><p>新创建的账户没有任何权限。</p><p><strong>修改账户名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RENAME</span> myuser <span class="keyword">TO</span> newuser;</span><br></pre></td></tr></table></figure><p><strong>删除账户</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> myuser;</span><br></pre></td></tr></table></figure><p><strong>查看权限</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> myuser;</span><br></pre></td></tr></table></figure><p><img src="http://ovi3ob9p4.bkt.clouddn.com/Interview/c73aa08e-a987-43c9-92be-adea4a884c25.png" alt=""></p><p>账户用 username@host 的形式定义，username@% 使用的是默认主机名。</p><p><strong>授予权限</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> mydatabase.* <span class="keyword">TO</span> myuser;</span><br></pre></td></tr></table></figure><p><strong>删除权限</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> mydatabase.* <span class="keyword">FROM</span> myuser;</span><br></pre></td></tr></table></figure><p>GRANT 和 REVOKE 可在几个层次上控制访问权限：</p><ul><li>整个服务器，使用 GRANT ALL和 REVOKE ALL；</li><li>整个数据库，使用 ON database.*；</li><li>特定的表，使用 ON database.table；</li><li>特定的列；</li><li>特定的存储过程。</li></ul><p><strong>更改密码</strong></p><p>必须使用 Password() 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> PASSWROD <span class="keyword">FOR</span> myuser = <span class="keyword">Password</span>(<span class="string">'newpassword'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0143.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Java面试笔记&lt;br&gt;
    
    </summary>
    
      <category term="Interview" scheme="http://www.iskei.cn/categories/Interview/"/>
    
    
      <category term="Interview" scheme="http://www.iskei.cn/tags/Interview/"/>
    
  </entry>
  
</feed>
