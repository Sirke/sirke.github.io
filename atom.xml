<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keis Note</title>
  
  <subtitle>Java developer&#39;s professional blog.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.iskei.cn/"/>
  <updated>2018-02-22T02:15:40.029Z</updated>
  <id>http://www.iskei.cn/</id>
  
  <author>
    <name>IIsKei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>10 种最常见的 Javascript 错误</title>
    <link href="http://www.iskei.cn/posts/33823.html"/>
    <id>http://www.iskei.cn/posts/33823.html</id>
    <published>2018-02-09T13:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.029Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0119.jpg" alt="image"></p><p>我们查看了数千个项目的数据库，发现了 JavaScript 中频度最高的 10 种错误。我们会告诉你什么原因导致了这些错误，以及如何防止这些错误发生。如果你能够避免落入这些 “陷阱”，你将会成为一个更好的开发者。<br><a id="more"></a></p><blockquote><p>原文：<a href="https://rollbar.com/blog/top-10-javascript-errors/" target="_blank" rel="noopener">https://rollbar.com/blog/top-10-javascript-errors/</a></p></blockquote><p>数据才是王道，我们收集并分析了出现频次排前 10 的 JavaScript 错误。 Rollbar 会收集每个项目的所有错误，并总结每个错误发生的次数。我们通过根据 “指纹”（rollbar 用到的一种算法，详见：<a href="https://rollbar.com/docs/grouping-algorithm/）对错误进行分组。基本上，如果第二个错误只是第一个错误的重复，我们会把两个错误分到同一组。这会给用户一个很好的概括，而不是像在日志文件中看到的那样直接一大堆让人感觉到十分压迫的" target="_blank" rel="noopener">https://rollbar.com/docs/grouping-algorithm/）对错误进行分组。基本上，如果第二个错误只是第一个错误的重复，我们会把两个错误分到同一组。这会给用户一个很好的概括，而不是像在日志文件中看到的那样直接一大堆让人感觉到十分压迫的</a> dump。</p><p>我们专注于最有可能影响您和您的用户的错误。为此，我们通过研究各种不同公司的项目集来对于错误进行排列。如果我们只查看每个错误发生的总次数，那么客户量大的的项目产生的错误可能会压倒其他错误，导致实际收集到的是与大多数读者无关的错误数据集。</p><h3 id="JavaScript-错误-Top-10："><a href="#JavaScript-错误-Top-10：" class="headerlink" title=" JavaScript 错误 Top 10："></a><strong> JavaScript 错误 Top 10：</strong></h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/js/js001.jpg" alt="img"></p><p>为了便于阅读，我们将每个错误描述都缩短了。接下来，让我们深入到每一个错误，来确定什么会导致它，以及如何避免创建它。</p><h3 id="1-Uncaught-TypeError-Cannot-read-property"><a href="#1-Uncaught-TypeError-Cannot-read-property" class="headerlink" title="1. Uncaught TypeError: Cannot read property"></a><strong>1. Uncaught TypeError: Cannot read property</strong></h3><p>如果你是一个 JavaScript 开发人员，可能你看到这个错误的次数比你敢承认的要多（LOL…）。当你读取一个未定义的对象的属性或调用其方法时，这个错误会在 Chrome 中出现。 您可以很容易的在 Chrome 开发者控制台中进行测试（尝试）。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/js/js002.jpg" alt="img"></p><p>发生这种情况的原因很多，但常见的一种是在渲染 UI 组件时对于状态的初始化操作不当。</p><p>我们来看一个在真实应用程序中发生的例子：我们选择 React，但该情况也同样适用于 Angular、Vue 或任何其他框架。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quiz</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    axios.get(<span class="string">'/thedata'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;<span class="attr">items</span>: res.data&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.items.map(<span class="function"><span class="params">item</span> =&gt;</span></span><br><span class="line">          &lt;li key=&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        )&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/u</span>l&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有两件重要的事情要实现：</p><ol><li>组件的状态（例如 this.state）从 undefined 开始。</li><li>当异步获取数据时，不管它是在构造函数componentWillMount还是componentDidMount中获取的，组件在数据加载之前至少会呈现一次，当 Quiz 第一次呈现时，this.state.items 是未定义的。 这又意味着 ItemList 将 items 定义为 undefined，并且在控制台中出现错误 - “Uncaught TypeError: Cannot read property ‘map’ of undefined”。</li></ol><p>这很容易解决。最简单的方法：在构造函数中用合理的默认值来初始化 state。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quiz</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Added this:</span></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="comment">// Assign state itself, and a default value for items</span></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      items: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    axios.get(<span class="string">'/thedata'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;<span class="attr">items</span>: res.data&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.items.map(<span class="function"><span class="params">item</span> =&gt;</span></span><br><span class="line">          &lt;li key=&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        )&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/u</span>l&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在你的应用程序中的具体代码可能是不同的，但我们希望我们已经给你足够的线索，以解决或避免在你的应用程序中出现的这个问题。如果还没有，请继续阅读，因为我们将在下面覆盖更多相关错误的示例。</p><h3 id="2-TypeError-‘undefined’-is-not-an-object"><a href="#2-TypeError-‘undefined’-is-not-an-object" class="headerlink" title="2. TypeError: ‘undefined’ is not an object"></a><strong>2. TypeError: ‘undefined’ is not an object</strong></h3><p>这是在 Safari 中读取属性或调用未定义对象上的方法时发生的错误。您可以在 Safari Developer Console 中轻松测试。这与 1 中提到的 Chrome 的错误基本相同，但 Safari 使用了不同的错误消息提示语。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/js/js003.jpg" alt="img"></p><h3 id="3-TypeError-null-is-not-an-object"><a href="#3-TypeError-null-is-not-an-object" class="headerlink" title="3. TypeError: null is not an object"></a><strong>3. TypeError: null is not an object</strong></h3><p>这是在 Safari 中读取属性或调用空对象上的方法时发生的错误。 您可以在 Safari Developer Console 中轻松测试。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/js/js004.jpg" alt="img"></p><p>有趣的是，在 JavaScript 中，null 和 undefined 是不一样的，这就是为什么我们看到两个不同的错误信息。undefined 通常是一个尚未分配的变量，而 null 表示该值为空。 要验证它们不相等，请尝试使用严格的相等运算符 ===：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/js/js005.jpg" alt="img"></p><p>在现实世界的例子中，这种错误可能发生的一种场景是：如果在加载元素之前尝试在 JavaScript 中使用元素。 因为 DOM API 对于空白的对象引用返回值为 null。</p><p>任何执行和处理 DOM 元素的 JS 代码都应该在创建 DOM 元素之后执行。 JS 代码按照 HTML 中的规定从上到下进行解释。 所以，如果 DOM 元素之前有一个标签，脚本标签内的 JS 代码将在浏览器解析 HTML 页面时执行。 如果在加载脚本之前尚未创建 DOM 元素，则会出现此错误。</p><p>在这个例子中，我们可以通过添加一个事件监听器来解决这个问题，这个监听器会在页面准备好的时候通知我们。 一旦 addEventListener被触发，init() 方法就可以使用 DOM 元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myButton = <span class="built_in">document</span>.getElementById(<span class="string">"myButton"</span>);</span><br><span class="line">    <span class="keyword">var</span> myTextfield = <span class="built_in">document</span>.getElementById(<span class="string">"myTextfield"</span>);</span><br><span class="line">    myButton.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> userName = myTextfield.value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'readystatechange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.readyState === <span class="string">"complete"</span>) &#123;</span><br><span class="line">      init();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;form&gt;</span></span><br><span class="line"><span class="regexp">  &lt;input type="text" id="myTextfield" placeholder="Type your name" /</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">"button"</span> id=<span class="string">"myButton"</span> value=<span class="string">"Go"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-unknown-Script-error"><a href="#4-unknown-Script-error" class="headerlink" title="4. (unknown): Script error"></a><strong>4. (unknown): Script error</strong></h3><p>当未捕获的 JavaScript 错误（通过window.onerror处理程序引发的错误，而不是捕获在try-catch中）被浏览器的跨域策略限制时，会产生这类的脚本错误。 例如，如果您将您的 JavaScript 代码托管在 CDN 上，则任何未被捕获的错误将被报告为“脚本错误” 而不是包含有用的堆栈信息。这是一种浏览器安全措施，旨在防止跨域传递数据，否则将不允许进行通信。</p><p>要获得真正的错误消息，请执行以下操作：</p><ol><li>发送 ‘Access-Control-Allow-Origin’ 头部</li></ol><p>将 Access-Control-Allow-Origin 标头设置为 * 表示可以从任何域正确访问资源。 如有必要，您可以将域替换为您的域：例如，Access-Control-Allow-Origin：www.example.com。 但是，处理多个域会变得棘手，如果你使用 CDN，可能由此产生更多的缓存问题会让你感觉到这种努力并不值得。 在这里看到更多。</p><p>这里有一些关于如何在各种环境中设置这个头文件的例子：</p><p>Apache</p><p>在 JavaScript 文件所在的文件夹中，使用以下内容创建一个 .htaccess 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header add Access-Control-Allow-Origin &quot;*&quot;</span><br></pre></td></tr></table></figure><p>Nginx</p><p>将 add_header 指令添加到提供 JavaScript 文件的位置块中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; location ~ ^/assets/ &#123;</span><br><span class="line">&gt;</span><br><span class="line">&gt;     add_header Access-Control-Allow-Origin *;</span><br><span class="line">&gt; &#125;</span><br></pre></td></tr></table></figure><p>HAProxy</p><p>将以下内容添加到您为 JavaScript 文件提供资源服务的后端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; rspadd Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure><ol><li>在 &lt;script 中设置 crossorigin=”anonymous”</li></ol><p>在您的 HTML 代码中，对于您设置了Access-Control-Allow-Origin header 的每个脚本，在 script 标签上设置crossorigin =“anonymous”。在脚本标记中添加 crossorigin 属性之前，请确保验证上述 header 正确发送。 在 Firefox 中，如果存在crossorigin属性，但Access-Control-Allow-Origin头不存在，则脚本将不会执行。</p><h3 id="5-TypeError-Object-doesn’t-support-property"><a href="#5-TypeError-Object-doesn’t-support-property" class="headerlink" title="5. TypeError: Object doesn’t support property"></a><strong>5. TypeError: Object doesn’t support property</strong></h3><p>这是您在调用未定义的方法时发生在 IE 中的错误。 您可以在 IE 开发者控制台中进行测试。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/js/js006.jpg" alt="img"></p><p>这相当于 Chrome 中的 “TypeError：”undefined“ is not a function” 错误。 是的，对于相同的逻辑错误，不同的浏览器可能具有不同的错误消息。</p><p>对于使用 JavaScript 命名空间的 Web 应用程序，这是一个 IE l浏览器的常见的问题。 在这种情况下，99.9％ 的原因是 IE 无法将当前名称空间内的方法绑定到 this 关键字。 例如：如果你 JS 中有一个命名空间 Rollbar 以及方法 isAwesome 。 通常，如果您在 Rollbar 命名空间内，则可以使用以下语法调用isAwesome方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; this.isAwesome();</span><br></pre></td></tr></table></figure><p>Chrome，Firefox 和 Opera 会欣然接受这个语法。 另一方面 IE，不会。 因此，使用 JS 命名空间时最安全的选择是始终以实际名称空间作为前缀。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Rollbar.isAwesome();</span><br></pre></td></tr></table></figure><h3 id="6-TypeError-‘undefined’-is-not-a-function"><a href="#6-TypeError-‘undefined’-is-not-a-function" class="headerlink" title="6. TypeError: ‘undefined’ is not a function"></a><strong>6. TypeError: ‘undefined’ is not a function</strong></h3><p>当您调用未定义的函数时，这是 Chrome 中产生的错误。 您可以在 Chrome 开发人员控制台和 Mozilla Firefox 开发人员控制台中进行测试。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/js/js007.jpg" alt="img"></p><p>随着 JavaScript 编码技术和设计模式在过去几年中变得越来越复杂，回调和关闭中的自引用范围也相应增加，这是这种/那种混淆的相当常见的来源。</p><p>考虑这个代码片段：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.clearLocalStorage();</span><br><span class="line">  <span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.clearBoard();    <span class="comment">// what is "this"?</span></span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行上面的代码会导致以下错误：“Uncaught TypeError：undefined is not a function”。 你得到上述错误的原因是，当你调用setTimeout()时，实际上是调用window.setTimeout()。 因此，在窗口对象的上下文中定义了一个传递给setTimeout()的匿名函数，该函数没有clearBoard()方法。</p><p>一个传统的，旧浏览器兼容的解决方案是简单地将您的 this 保存在一个变量，然后可以由闭包继承。 例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunction</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.clearLocalStorage();</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;   <span class="comment">// save reference to 'this', while it's still this!</span></span><br><span class="line">  <span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    self.clearBoard();  </span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>或者，在较新的浏览器中，可以使用bind()方法传递适当的引用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunction</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.clearLocalStorage();</span><br><span class="line">  <span class="keyword">this</span>.timer = setTimeout(<span class="keyword">this</span>.reset.bind(<span class="keyword">this</span>), <span class="number">0</span>);  <span class="comment">// bind to 'this'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.clearBoard();    <span class="comment">//back in the context of the right 'this'!</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-Uncaught-RangeError-Maximum-call-stack"><a href="#7-Uncaught-RangeError-Maximum-call-stack" class="headerlink" title="7. Uncaught RangeError: Maximum call stack"></a><strong>7. Uncaught RangeError: Maximum call stack</strong></h3><p>这是 Chrome 在一些情况下会发生的错误。 一个是当你调用一个不终止的递归函数。您可以在 Chrome 开发者控制台中进行测试。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/js/js007.jpg" alt="img"></p><p>此外，如果您将值传递给超出范围的函数，也可能会发生这种情况。 许多函数只接受其输入值的特定范围的数字。 例如：Number.toExponential(digits) 和 Number.toFixed(digits) 接受 0 到 20 的数字，Number.toPrecision(digits) 接受 1 到 21 的数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4294967295</span>);  <span class="comment">//OK</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">-1</span>); <span class="comment">//range error</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">2.555555</span>;</span><br><span class="line"><span class="built_in">document</span>.writeln(num.toExponential(<span class="number">4</span>));  <span class="comment">//OK</span></span><br><span class="line"><span class="built_in">document</span>.writeln(num.toExponential(<span class="number">-2</span>)); <span class="comment">//range error!</span></span><br><span class="line">num = <span class="number">2.9999</span>;</span><br><span class="line"><span class="built_in">document</span>.writeln(num.toFixed(<span class="number">2</span>));   <span class="comment">//OK</span></span><br><span class="line"><span class="built_in">document</span>.writeln(num.toFixed(<span class="number">25</span>));  <span class="comment">//range error!</span></span><br><span class="line">num = <span class="number">2.3456</span>;</span><br><span class="line"><span class="built_in">document</span>.writeln(num.toPrecision(<span class="number">1</span>));   <span class="comment">//OK</span></span><br><span class="line"><span class="built_in">document</span>.writeln(num.toPrecision(<span class="number">22</span>));  <span class="comment">//range error!</span></span><br></pre></td></tr></table></figure><h3 id="8-TypeError-Cannot-read-property-‘length’"><a href="#8-TypeError-Cannot-read-property-‘length’" class="headerlink" title="8. TypeError: Cannot read property ‘length’"></a><strong>8. TypeError: Cannot read property ‘length’</strong></h3><p>这是 Chrome 中发生的错误，因为读取未定义变量的长度属性。 您可以在 Chrome 开发者控制台中进行测试。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/js/js008.jpg" alt="img"></p><p>您通常会在数组中找到定义的长度，但是如果数组未初始化或者变量名称在另一个上下文中隐藏，则可能会遇到此错误。让我们用下面的例子来理解这个错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testArray = [<span class="string">"Test"</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunction</span>(<span class="params">testArray</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; testArray.length; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(testArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">testFunction();</span><br></pre></td></tr></table></figure><p>当你用参数声明一个函数时，这些参数变成了函数作用域内的本地参数。这意味着即使你函数外有名为 testArray 的变量，在一个函数中具有相同名字的参数也会被视为本地参数。</p><p>您有两种方法可以解决您的问题：</p><ol><li>删除函数声明语句中的参数（事实上你想访问那些声明在函数之外的变量，所以你不需要函数的参数）：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testArray = [<span class="string">"Test"</span>];</span><br><span class="line"><span class="comment">/* Precondition: defined testArray outside of a function */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunction</span>(<span class="params"><span class="regexp">/* No params */</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; testArray.length; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(testArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">testFunction();</span><br></pre></td></tr></table></figure><ol><li>用声明的数组调用该函数：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testArray = [<span class="string">"Test"</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunction</span>(<span class="params">testArray</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; testArray.length; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(testArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">testFunction(testArray);</span><br></pre></td></tr></table></figure><h3 id="9-Uncaught-TypeError-Cannot-set-property"><a href="#9-Uncaught-TypeError-Cannot-set-property" class="headerlink" title="9. Uncaught TypeError: Cannot set property"></a><strong>9. Uncaught TypeError: Cannot set property</strong></h3><p>当我们尝试访问一个未定义的变量时，它总是返回 undefined，我们不能获取或设置任何未定义的属性。 在这种情况下，应用程序将抛出 “Uncaught TypeError: Cannot set property”。</p><p>例如，在 Chrome 浏览器中：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/js/js009.jpg" alt="img"></p><p>如果测试对象不存在，错误将会抛出 “Uncaught TypeErrorUncaught TypeError: Cannot set property”。</p><p><strong>10. ReferenceError: event is not defined</strong></p><p>当您尝试访问未定义的变量或超出当前范围的变量时，会引发此错误。 您可以在 Chrome 浏览器中轻松测试。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/js/js010.jpg" alt="img"></p><p>如果在使用事件处理系统时遇到此错误，请确保使用传入的事件对象作为参数。像 IE 这样的旧浏览器提供了一个全局变量事件，但并不是所有浏览器都支持。像 jQuery 这样的库试图规范化这种行为。尽管如此，最好使用传入事件处理函数的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = event.which || event.keyCode;</span><br><span class="line">    <span class="keyword">if</span>(event.keyCode===<span class="number">13</span>)&#123;</span><br><span class="line">       alert(event.keyCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a><strong>结论</strong></h3><p>我们希望你学到了新的东西，可以避免将来的错误，或者本指南帮助你解决了头痛的问题。</p><p>尽管如此，即使有最佳实践，生产中也会出现意想不到的错误。能够查看影响用户的错误，并拥有快速解决问题的好工具，这一点非常重要。推荐 Rollbar。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0119.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们查看了数千个项目的数据库，发现了 JavaScript 中频度最高的 10 种错误。我们会告诉你什么原因导致了这些错误，以及如何防止这些错误发生。如果你能够避免落入这些 “陷阱”，你将会成为一个更好的开发者。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.iskei.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.iskei.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（Design pattern）简介</title>
    <link href="http://www.iskei.cn/posts/5502.html"/>
    <id>http://www.iskei.cn/posts/5502.html</id>
    <published>2018-02-08T14:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.025Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0118.jpg" alt="image"></p><p>根据设计模式的参考书 <strong>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）</strong> 中所提到的，总共有 23 种设计模式。<br><a id="more"></a></p><h2 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h2><p>这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。当然，我们还会讨论另一类设计模式：J2EE 设计模式。</p><table><thead><tr><th>序号</th><th>模式 &amp; 描述</th><th>包括</th></tr></thead><tbody><tr><td>1</td><td><strong>创建型模式</strong>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</td><td>工厂模式（Factory Pattern）抽象工厂模式（Abstract Factory Pattern）单例模式（Singleton Pattern）建造者模式（Builder Pattern）原型模式（Prototype Pattern）</td></tr><tr><td>2</td><td><strong>结构型模式</strong>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</td><td>适配器模式（Adapter Pattern）桥接模式（Bridge Pattern）过滤器模式（Filter、Criteria Pattern）组合模式（Composite Pattern）装饰器模式（Decorator Pattern）外观模式（Facade Pattern）享元模式（Flyweight Pattern）代理模式（Proxy Pattern）</td></tr><tr><td>3</td><td><strong>行为型模式</strong>这些设计模式特别关注对象之间的通信。</td><td>责任链模式（Chain of Responsibility Pattern）命令模式（Command Pattern）解释器模式（Interpreter Pattern）迭代器模式（Iterator Pattern）中介者模式（Mediator Pattern）备忘录模式（Memento Pattern）观察者模式（Observer Pattern）状态模式（State Pattern）空对象模式（Null Object Pattern）策略模式（Strategy Pattern）模板模式（Template Pattern）访问者模式（Visitor Pattern）</td></tr><tr><td>4</td><td><strong>J2EE 模式</strong>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。</td><td>MVC 模式（MVC Pattern）业务代表模式（Business Delegate Pattern）组合实体模式（Composite Entity Pattern）数据访问对象模式（Data Access Object Pattern）前端控制器模式（Front Controller Pattern）拦截过滤器模式（Intercepting Filter Pattern）服务定位器模式（Service Locator Pattern）传输对象模式（Transfer Object Pattern）</td></tr></tbody></table><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><p><strong>意图：</strong>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p><p><strong>主要解决：</strong>主要解决接口选择的问题。</p><p><strong>何时使用：</strong>我们明确地计划不同条件下创建不同实例时。</p><p><strong>如何解决：</strong>让其子类实现工厂接口，返回的也是一个抽象的产品。</p><p><strong>关键代码：</strong>创建过程在其子类执行。</p><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p><p><strong>意图：</strong>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><p><strong>主要解决：</strong>主要解决接口选择的问题。</p><p><strong>何时使用：</strong>系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。</p><p><strong>如何解决：</strong>在一个产品族里面，定义多个产品。</p><p><strong>关键代码：</strong>在一个工厂里聚合多个同类产品。</p><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>注意：</strong></p><ul><li>1、单例类只能有一个实例。</li><li>2、单例类必须自己创建自己的唯一实例。</li><li>3、单例类必须给所有其他对象提供这一实例。</li></ul><p><strong>意图：</strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><strong>主要解决：</strong>一个全局使用的类频繁地创建与销毁。</p><p><strong>何时使用：</strong>当您想控制实例数目，节省系统资源的时候。</p><p><strong>如何解决：</strong>判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p><p><strong>关键代码：</strong>构造函数是私有的。</p><h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p><p><strong>意图：</strong>将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p><p><strong>主要解决：</strong>主要解决在软件系统中，有时候面临着”一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</p><p><strong>何时使用：</strong>一些基本部件不会变，而其组合经常变化的时候。</p><p><strong>如何解决：</strong>将变与不变分离开。</p><p><strong>关键代码：</strong>建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。</p><h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p><p><strong>意图：</strong>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><p><strong>主要解决：</strong>在运行期建立和删除原型。</p><p><strong>何时使用：</strong> 1、当一个系统应该独立于它的产品创建，构成和表示时。 2、当要实例化的类是在运行时刻指定时，例如，通过动态装载。 3、为了避免创建一个与产品类层次平行的工厂类层次时。 4、当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。</p><p><strong>如何解决：</strong>利用已有的一个原型对象，快速地生成和原型对象一样的实例。</p><p><strong>关键代码：</strong> 1、实现克隆操作，在 JAVA 继承 Cloneable，重写 clone()，在 .NET 中可以使用 Object 类的 MemberwiseClone() 方法来实现对象的浅拷贝或通过序列化的方式来实现深拷贝。 2、原型模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些”易变类”拥有稳定的接口。</p><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</p><p>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。</p><p>我们通过下面的实例来演示适配器模式的使用。其中，音频播放器设备只能播放 mp3 文件，通过使用一个更高级的音频播放器来播放 vlc 和 mp4 文件。</p><p><strong>意图：</strong>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><p><strong>主要解决：</strong>主要解决在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的。</p><p><strong>何时使用：</strong> 1、系统需要使用现有的类，而此类的接口不符合系统的需要。 2、想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。 3、通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。）</p><p><strong>如何解决：</strong>继承或依赖（推荐）。</p><p><strong>关键代码：</strong>适配器继承或依赖已有的对象，实现想要的目标接口。</p><h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</p><p>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p><p>我们通过下面的实例来演示桥接模式（Bridge Pattern）的用法。其中，可以使用相同的抽象类方法但是不同的桥接实现类，来画出不同颜色的圆。</p><p><strong>意图：</strong>将抽象部分与实现部分分离，使它们都可以独立的变化。</p><p><strong>主要解决：</strong>在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。</p><p><strong>何时使用：</strong>实现系统可能有多个角度分类，每一种角度都可能变化。</p><p><strong>如何解决：</strong>把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。</p><p><strong>关键代码：</strong>抽象类依赖实现类。</p><h1 id="过滤器模式"><a href="#过滤器模式" class="headerlink" title="过滤器模式"></a>过滤器模式</h1><p>过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。</p><h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><p>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><p>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。</p><p>我们通过下面的实例来演示组合模式的用法。实例演示了一个组织中员工的层次结构。</p><p><strong>意图：</strong>将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p><p><strong>主要解决：</strong>它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</p><p><strong>何时使用：</strong> 1、您想表示对象的部分-整体层次结构（树形结构）。 2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><p><strong>如何解决：</strong>树枝和叶子实现统一接口，树枝内部组合该接口。</p><p><strong>关键代码：</strong>树枝内部组合该接口，并且含有内部属性 List，里面放 Component。</p><h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p><p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p><p>我们通过下面的实例来演示装饰器模式的用法。其中，我们将把一个形状装饰上不同的颜色，同时又不改变形状类。</p><p><strong>意图：</strong>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p><p><strong>主要解决：</strong>一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</p><p><strong>何时使用：</strong>在不想增加很多子类的情况下扩展类。</p><p><strong>如何解决：</strong>将具体功能职责划分，同时继承装饰者模式。</p><p><strong>关键代码：</strong> 1、Component 类充当抽象角色，不应该具体实现。 2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。</p><h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><p>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。</p><p>这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p><p><strong>意图：</strong>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><p><strong>主要解决：</strong>降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。</p><p><strong>何时使用：</strong> 1、客户端不需要知道系统内部的复杂联系，整个系统只需提供一个”接待员”即可。 2、定义系统的入口。</p><p><strong>如何解决：</strong>客户端不与系统耦合，外观类与系统耦合。</p><p><strong>关键代码：</strong>在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。</p><h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p><p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。我们将通过创建 5 个对象来画出 20 个分布于不同位置的圆来演示这种模式。由于只有 5 种可用的颜色，所以 color 属性被用来检查现有的 <em>Circle</em> 对象。</p><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。</p><p>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p><p><strong>意图：</strong>为其他对象提供一种代理以控制对这个对象的访问。</p><p><strong>主要解决：</strong>在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p><p><strong>何时使用：</strong>想在访问一个类时做一些控制。</p><p><strong>如何解决：</strong>增加中间层。</p><p><strong>关键代码：</strong>实现与被代理类组合。</p><h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><p>顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。</p><p>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p><p><strong>意图：</strong>避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p><p><strong>主要解决：</strong>职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。</p><p><strong>何时使用：</strong>在处理消息的时候以过滤很多道。</p><p><strong>如何解决：</strong>拦截的类都实现统一接口。</p><p><strong>关键代码：</strong>Handler 里面聚合它自己，在 HanleRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。</p><h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><p>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p><p><strong>意图：</strong>将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。</p><p><strong>主要解决：</strong>在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</p><p><strong>何时使用：</strong>在某些场合，比如要对行为进行”记录、撤销/重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将”行为请求者”与”行为实现者”解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。</p><p><strong>如何解决：</strong>通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。</p><p><strong>关键代码：</strong>定义三个角色：1、received 真正的命令执行对象 2、Command 3、invoker 使用命令对象的入口</p><h1 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h1><p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p><p><strong>意图：</strong>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p><p><strong>主要解决：</strong>对于一些固定文法构建一个解释句子的解释器。</p><p><strong>何时使用：</strong>如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</p><p><strong>如何解决：</strong>构件语法树，定义终结符与非终结符。</p><p><strong>关键代码：</strong>构件环境类，包含解释器之外的一些全局信息，一般是 HashMap。</p><h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><p>迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。</p><p>迭代器模式属于行为型模式。</p><p><strong>意图：</strong>提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。</p><p><strong>主要解决：</strong>不同的方式来遍历整个整合对象。</p><p><strong>何时使用：</strong>遍历一个聚合对象。</p><p><strong>如何解决：</strong>把在元素之间游走的责任交给迭代器，而不是聚合对象。</p><p><strong>关键代码：</strong>定义接口：hasNext, next。</p><p><strong>应用实例：</strong>JAVA 中的 iterator。</p><h1 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h1><p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。</p><p><strong>意图：</strong>用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p><strong>主要解决：</strong>对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。</p><p><strong>何时使用：</strong>多个类相互耦合，形成了网状结构。</p><p><strong>如何解决：</strong>将上述网状结构分离为星型结构。</p><p><strong>关键代码：</strong>对象 Colleague 之间的通信封装到一个类中单独处理。</p><h1 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h1><p>备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。</p><p><strong>意图：</strong>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</p><p><strong>主要解决：</strong>所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。</p><p><strong>何时使用：</strong>很多时候我们总是需要记录一个对象的内部状态，这样做的目的就是为了允许用户取消不确定或者错误的操作，能够恢复到他原先的状态，使得他有”后悔药”可吃。</p><p><strong>如何解决：</strong>通过一个备忘录类专门存储对象状态。</p><p><strong>关键代码：</strong>客户不与备忘录类耦合，与备忘录管理类耦合。</p><p><strong>应用实例：</strong> 1、后悔药。 2、打游戏时的存档。 3、Windows 里的 ctri + z。 4、IE 中的后退。 4、数据库的事务管理。</p><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。</p><p><strong>意图：</strong>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><p><strong>主要解决：</strong>一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p><p><strong>何时使用：</strong>一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。</p><p><strong>如何解决：</strong>使用面向对象技术，可以将这种依赖关系弱化。</p><p><strong>关键代码：</strong>在抽象类里有一个 ArrayList 存放观察者们。</p><p><strong>应用实例：</strong> 1、拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。 2、西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。</p><h1 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h1><p>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。</p><p>在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。</p><p><strong>意图：</strong>允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。</p><p><strong>主要解决：</strong>对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。</p><p><strong>何时使用：</strong>代码中包含大量与对象状态有关的条件语句。</p><p><strong>如何解决：</strong>将各种具体的状态类抽象出来。</p><p><strong>关键代码：</strong>通常命令模式的接口中只有一个方法。而状态模式的接口中有一个或者多个方法。而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。也就是说，状态模式一般和对象的状态有关。实现类的方法有不同的功能，覆盖接口中的方法。状态模式和命令模式一样，也可以用于消除 if…else 等条件选择语句。</p><p><strong>应用实例：</strong> 1、打篮球的时候运动员可以有正常状态、不正常状态和超常状态。 2、曾侯乙编钟中，’钟是抽象接口’,’钟A’等是具体状态，’曾侯乙编钟’是具体环境（Context）。</p><h1 id="空对象模式"><a href="#空对象模式" class="headerlink" title="空对象模式"></a>空对象模式</h1><p>在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。</p><p>在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。</p><h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p><p>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p><p><strong>意图：</strong>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p><p><strong>主要解决：</strong>在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。</p><p><strong>何时使用：</strong>一个系统有许多许多类，而区分它们的只是他们直接的行为。</p><p><strong>如何解决：</strong>将这些算法封装成一个一个的类，任意地替换。</p><p><strong>关键代码：</strong>实现同一个接口。</p><p><strong>应用实例：</strong> 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 3、JAVA AWT 中的 LayoutManager。</p><h1 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h1><p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p><p><strong>意图：</strong>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p><strong>主要解决：</strong>一些方法通用，却在每一个子类都重新写了这一方法。</p><p><strong>何时使用：</strong>有一些通用的方法。</p><p><strong>如何解决：</strong>将这些通用算法抽象出来。</p><p><strong>关键代码：</strong>在抽象类实现，其他步骤在子类实现。</p><p><strong>应用实例：</strong> 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。</p><h1 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h1><p>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。</p><p><strong>意图：</strong>主要将数据结构与数据操作分离。</p><p><strong>主要解决：</strong>稳定的数据结构和易变的操作耦合问题。</p><p><strong>何时使用：</strong>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，使用访问者模式将这些封装到类中。</p><p><strong>如何解决：</strong>在被访问的类里面加一个对外提供接待访问者的接口。</p><p><strong>关键代码：</strong>在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。</p><p><strong>应用实例：</strong>您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。</p><h1 id="MVC-模式"><a href="#MVC-模式" class="headerlink" title="MVC 模式"></a>MVC 模式</h1><p>MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。</p><ul><li><strong>Model（模型）</strong> - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</li><li><strong>View（视图）</strong> - 视图代表模型包含的数据的可视化。</li><li><strong>Controller（控制器）</strong> - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</li></ul><h1 id="业务代表模式"><a href="#业务代表模式" class="headerlink" title="业务代表模式"></a>业务代表模式</h1><p>业务代表模式（Business Delegate Pattern）用于对表示层和业务层解耦。它基本上是用来减少通信或对表示层代码中的业务层代码的远程查询功能。在业务层中我们有以下实体。</p><ul><li><strong>客户端（Client）</strong> - 表示层代码可以是 JSP、servlet 或 UI java 代码。</li><li><strong>业务代表（Business Delegate）</strong> - 一个为客户端实体提供的入口类，它提供了对业务服务方法的访问。</li><li><strong>查询服务（LookUp Service）</strong> - 查找服务对象负责获取相关的业务实现，并提供业务对象对业务代表对象的访问。</li><li><strong>业务服务（Business Service）</strong> - 业务服务接口。实现了该业务服务的实体类，提供了实际的业务实现逻辑。</li></ul><h1 id="组合实体模式"><a href="#组合实体模式" class="headerlink" title="组合实体模式"></a>组合实体模式</h1><p>组合实体模式（Composite Entity Pattern）用在 EJB 持久化机制中。一个组合实体是一个 EJB 实体 bean，代表了对象的图解。当更新一个组合实体时，内部依赖对象 beans 会自动更新，因为它们是由 EJB 实体 bean 管理的。以下是组合实体 bean 的参与者。</p><ul><li><strong>组合实体（Composite Entity）</strong> - 它是主要的实体 bean。它可以是粗粒的，或者可以包含一个粗粒度对象，用于持续生命周期。</li><li><strong>粗粒度对象（Coarse-Grained Object）</strong> - 该对象包含依赖对象。它有自己的生命周期，也能管理依赖对象的生命周期。</li><li><strong>依赖对象（Dependent Object）</strong> - 依赖对象是一个持续生命周期依赖于粗粒度对象的对象。</li><li><strong>策略（Strategies）</strong> - 策略表示如何实现组合实体。</li></ul><h1 id="数据访问对象模式"><a href="#数据访问对象模式" class="headerlink" title="数据访问对象模式"></a>数据访问对象模式</h1><p>数据访问对象模式（Data Access Object Pattern）或 DAO 模式用于把低级的数据访问 API 或操作从高级的业务服务中分离出来。以下是数据访问对象模式的参与者。</p><ul><li><strong>数据访问对象接口（Data Access Object Interface）</strong> - 该接口定义了在一个模型对象上要执行的标准操作。</li><li><strong>数据访问对象实体类（Data Access Object concrete class）</strong> - 该类实现了上述的接口。该类负责从数据源获取数据，数据源可以是数据库，也可以是 xml，或者是其他的存储机制。</li><li><strong>模型对象/数值对象（Model Object/Value Object）</strong> - 该对象是简单的 POJO，包含了 get/set 方法来存储通过使用 DAO 类检索到的数据。</li></ul><h1 id="前端控制器模式"><a href="#前端控制器模式" class="headerlink" title="前端控制器模式"></a>前端控制器模式</h1><p>前端控制器模式（Front Controller Pattern）是用来提供一个集中的请求处理机制，所有的请求都将由一个单一的处理程序处理。该处理程序可以做认证/授权/记录日志，或者跟踪请求，然后把请求传给相应的处理程序。以下是这种设计模式的实体。</p><ul><li><strong>前端控制器（Front Controller）</strong> - 处理应用程序所有类型请求的单个处理程序，应用程序可以是基于 web 的应用程序，也可以是基于桌面的应用程序。</li><li><strong>调度器（Dispatcher）</strong> - 前端控制器可能使用一个调度器对象来调度请求到相应的具体处理程序。</li><li><strong>视图（View）</strong> - 视图是为请求而创建的对象。</li></ul><h1 id="拦截过滤器模式"><a href="#拦截过滤器模式" class="headerlink" title="拦截过滤器模式"></a>拦截过滤器模式</h1><p>拦截过滤器模式（Intercepting Filter Pattern）用于对应用程序的请求或响应做一些预处理/后处理。定义过滤器，并在把请求传给实际目标应用程序之前应用在请求上。过滤器可以做认证/授权/记录日志，或者跟踪请求，然后把请求传给相应的处理程序。以下是这种设计模式的实体。</p><ul><li><strong>过滤器（Filter）</strong> - 过滤器在请求处理程序执行请求之前或之后，执行某些任务。</li><li><strong>过滤器链（Filter Chain）</strong> - 过滤器链带有多个过滤器，并在 Target 上按照定义的顺序执行这些过滤器。</li><li><strong>Target</strong> - Target 对象是请求处理程序。</li><li><strong>过滤管理器（Filter Manager）</strong> - 过滤管理器管理过滤器和过滤器链。</li><li><strong>客户端（Client）</strong> - Client 是向 Target 对象发送请求的对象。</li></ul><h1 id="服务定位器模式"><a href="#服务定位器模式" class="headerlink" title="服务定位器模式"></a>服务定位器模式</h1><p>服务定位器模式（Service Locator Pattern）用在我们想使用 JNDI 查询定位各种服务的时候。考虑到为某个服务查找 JNDI 的代价很高，服务定位器模式充分利用了缓存技术。在首次请求某个服务时，服务定位器在 JNDI 中查找服务，并缓存该服务对象。当再次请求相同的服务时，服务定位器会在它的缓存中查找，这样可以在很大程度上提高应用程序的性能。以下是这种设计模式的实体。</p><ul><li><strong>服务（Service）</strong> - 实际处理请求的服务。对这种服务的引用可以在 JNDI 服务器中查找到。</li><li><strong>Context / 初始的 Context</strong> - JNDI Context 带有对要查找的服务的引用。</li><li><strong>服务定位器（Service Locator）</strong> - 服务定位器是通过 JNDI 查找和缓存服务来获取服务的单点接触。</li><li><strong>缓存（Cache）</strong> - 缓存存储服务的引用，以便复用它们。</li><li><strong>客户端（Client）</strong> - Client 是通过 ServiceLocator 调用服务的对象。</li></ul><h1 id="传输对象模式"><a href="#传输对象模式" class="headerlink" title="传输对象模式"></a>传输对象模式</h1><p>传输对象模式（Transfer Object Pattern）用于从客户端向服务器一次性传递带有多个属性的数据。传输对象也被称为数值对象。传输对象是一个具有 getter/setter 方法的简单的 POJO 类，它是可序列化的，所以它可以通过网络传输。它没有任何的行为。服务器端的业务类通常从数据库读取数据，然后填充 POJO，并把它发送到客户端或按值传递它。对于客户端，传输对象是只读的。客户端可以创建自己的传输对象，并把它传递给服务器，以便一次性更新数据库中的数值。以下是这种设计模式的实体。</p><ul><li><strong>业务对象（Business Object）</strong> - 为传输对象填充数据的业务服务。</li><li><strong>传输对象（Transfer Object）</strong> - 简单的 POJO，只有设置/获取属性的方法。</li><li><strong>客户端（Client）</strong> - 客户端可以发送请求或者发送传输对象到业务对象。</li></ul><h1 id="设计模式相关的网站"><a href="#设计模式相关的网站" class="headerlink" title="设计模式相关的网站"></a>设计模式相关的网站</h1><ul><li><a href="http://en.wikipedia.org/wiki/Design_pattern_(computer_science" target="_blank" rel="noopener">Wiki Page for Design Patterns</a>) - 以一种非常通用的方式检查设计模式。</li><li><a href="http://en.wikibooks.org/wiki/Java_Programming/Design_Patterns" target="_blank" rel="noopener">Java Programming/Design Patterns</a> - 一篇关于设计模式的好文章。</li><li><a href="http://java.sun.com/docs/books/tutorial/index.html" target="_blank" rel="noopener">The JavaTM Tutorials</a> - 该 Java 教程是为那些想用 Java 编程语言创建应用程序的编程人员提供的实用指南。</li><li><a href="http://java.sun.com/j2se/1.4.2/docs/index.html" target="_blank" rel="noopener">JavaTM 2 SDK, Standard Edition </a>- JavaTM 2 SDK, Standard Edition 的官网。</li><li><a href="http://exciton.cs.rice.edu/javaresources/DesignPatterns/" target="_blank" rel="noopener">Java DesignPatterns</a> - 关于设计模式的短文。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0118.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;根据设计模式的参考书 &lt;strong&gt;Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）&lt;/strong&gt; 中所提到的，总共有 23 种设计模式。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.iskei.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.iskei.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（Design pattern）之一</title>
    <link href="http://www.iskei.cn/posts/13897.html"/>
    <id>http://www.iskei.cn/posts/13897.html</id>
    <published>2018-02-08T14:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.025Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0117.jpg" alt="image"></p><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。<br><a id="more"></a></p><h1 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h1><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p><h2 id="什么是-GOF（四人帮，全拼-Gang-of-Four）？"><a href="#什么是-GOF（四人帮，全拼-Gang-of-Four）？" class="headerlink" title="什么是 GOF（四人帮，全拼 Gang of Four）？"></a>什么是 GOF（四人帮，全拼 Gang of Four）？</h2><p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 <strong>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）</strong> 的书，该书首次提到了软件开发中设计模式的概念。</p><p>四位作者合称 <strong>GOF（四人帮，全拼 Gang of Four）</strong>。他们所提出的设计模式主要是基于以下的面向对象设计原则。</p><ul><li>对接口编程而不是对实现编程。</li><li>优先使用对象组合而不是继承。</li></ul><h2 id="设计模式的使用"><a href="#设计模式的使用" class="headerlink" title="设计模式的使用"></a>设计模式的使用</h2><p>设计模式在软件开发中的两个主要用途。</p><h3 id="开发人员的共同平台"><a href="#开发人员的共同平台" class="headerlink" title="开发人员的共同平台"></a>开发人员的共同平台</h3><p>设计模式提供了一个标准的术语系统，且具体到特定的情景。例如，单例设计模式意味着使用单个对象，这样所有熟悉单例设计模式的开发人员都能使用单个对象，并且可以通过这种方式告诉对方，程序使用的是单例模式。</p><h3 id="最佳的实践"><a href="#最佳的实践" class="headerlink" title="最佳的实践"></a>最佳的实践</h3><p>设计模式已经经历了很长一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。</p><h2 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h2><p>根据设计模式的参考书 <strong>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）</strong> 中所提到的，总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。当然，我们还会讨论另一类设计模式：J2EE 设计模式。</p><table><thead><tr><th>序号</th><th>模式 &amp; 描述</th><th>包括</th></tr></thead><tbody><tr><td>1</td><td><strong>创建型模式</strong>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</td><td>工厂模式（Factory Pattern）、抽象工厂模式（Abstract Factory Pattern）、单例模式（Singleton Pattern）、建造者模式（Builder Pattern）、原型模式（Prototype Pattern）</td></tr><tr><td>2</td><td><strong>结构型模式</strong>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</td><td>适配器模式（Adapter Pattern）、桥接模式（Bridge Pattern）、过滤器模式（Filter、Criteria Pattern）、组合模式（Composite Pattern）装饰器模式、（Decorator Pattern）、外观模式（Facade Pattern）、享元模式（Flyweight Pattern）、代理模式（Proxy Pattern）</td></tr><tr><td>3</td><td><strong>行为型模式</strong>这些设计模式特别关注对象之间的通信。</td><td>责任链模式（Chain of Responsibility Pattern）、命令模式（Command Pattern）、解释器模式（Interpreter Pattern）、迭代器模式（Iterator Pattern）、中介者模式（Mediator Pattern）、备忘录模式（Memento Pattern）、观察者模式（Observer Pattern）、状态模式（State Pattern）、空对象模式（Null Object Pattern）、策略模式（Strategy Pattern）、模板模式（Template Pattern）、访问者模式（Visitor Pattern）</td></tr><tr><td>4</td><td><strong>J2EE 模式</strong>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。</td><td>MVC 模式（MVC Pattern）、业务代表模式（Business Delegate Pattern）、组合实体模式（Composite Entity Pattern）、数据访问对象模式（Data Access Object Pattern）、前端控制器模式（Front Controller Pattern）、拦截过滤器模式（Intercepting Filter Pattern）、服务定位器模式（Service Locator Pattern）、传输对象模式（Transfer Object Pattern）</td></tr></tbody></table><p>下面用一个图片来整体描述一下设计模式之间的关系：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/design/design-pattern001.jpg" alt="design"></p><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><p><strong>1、开闭原则（Open Close Principle）</strong></p><p>开闭原则的意思是：<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p><p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p><p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p><p><strong>5、迪米特法则，又称最少知道原则（Demeter Principle）</strong></p><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p><h3 id="笔记："><a href="#笔记：" class="headerlink" title="笔记："></a>笔记：</h3><blockquote><ol><li><p>开闭原则：实现热插拔，提高扩展性。</p></li><li><p>里氏代换原则：实现抽象的规范，实现子父类互相替换；</p></li><li><p>依赖倒转原则：针对接口编程，实现开闭原则的基础；</p></li><li><p>接口隔离原则：降低耦合度，接口单独设计，互相隔离；</p></li><li><p>迪米特法则，又称不知道原则：功能模块尽量独立；</p></li><li><p>合成复用原则：尽量使用聚合，组合，而不是继承；</p><p>​</p></li></ol><p>Java就是要搞对象啊</p><ol><li>创建型模式–&gt;对象怎么来</li><li>结构型模式–&gt;对象和谁有关</li><li>行为型模式–&gt;对象与对象在干嘛</li><li>J2EE 模式–&gt;对象合起来要干嘛（表现层,文中表示层个人感觉用的不准确）java是面向对象的语言,所以要搞好对象,模式（套路）就是用来更加好的搞对象滴。</li></ol></blockquote><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p><p><strong>主要解决：</strong>主要解决接口选择的问题。</p><p><strong>何时使用：</strong>我们明确地计划不同条件下创建不同实例时。</p><p><strong>如何解决：</strong>让其子类实现工厂接口，返回的也是一个抽象的产品。</p><p><strong>关键代码：</strong>创建过程在其子类执行。</p><p><strong>应用实例：</strong> </p><ol><li>您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现</li><li>Hibernate 换数据库只需换方言和驱动就可以。</li></ol><p><strong>优点：</strong> </p><ol><li>一个调用者想创建一个对象，只要知道其名称就可以了。 </li><li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 </li><li>屏蔽产品的具体实现，调用者只关心产品的接口。</li></ol><p><strong>缺点：</strong></p><p>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p><p><strong>使用场景：</strong></p><ol><li>日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。 </li><li>数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。 </li><li>设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。</li></ol><p><strong>注意事项：</strong>作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们将创建一个 <em>Shape</em> 接口和实现 <em>Shape</em> 接口的实体类。下一步是定义工厂类 <em>ShapeFactory</em>。</p><p><em>FactoryPatternDemo</em>，我们的演示类使用 <em>ShapeFactory</em> 来获取 <em>Shape</em> 对象。它将向 <em>ShapeFactory</em> 传递信息（<em>CIRCLE / RECTANGLE / SQUARE</em>），以便获取它所需对象的类型。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/design/design-pattern002.jpg" alt="design"></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建一个接口。</p><p><em>Shape.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>创建实现接口的实体类。</p><p><em>Rectangle.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> System.out.println(<span class="string">"Inside Square::draw() method."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Circle.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Circle::draw() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Square.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Square::draw() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>创建一个工厂，生成基于给定信息的实体类的对象。</p><p><em>ShapeFactory.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (shapeType==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">"CIRCLE"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">"RECTANGLE"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">"SQUARE"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h3><p>使用该工厂，通过传递类型信息来获取实体类的对象。</p><p><em>FactoryPatternDemo.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryPatternDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ShapeFactory shapeFactory = <span class="keyword">new</span> ShapeFactory();</span><br><span class="line"><span class="comment">// 获取 CIRCLE 的对象，并调用它的 draw 方法</span></span><br><span class="line">Shape shape1 = shapeFactory.getShape(<span class="string">"CIRCLE"</span>);</span><br><span class="line"><span class="comment">// 调用 Circle 的 draw 方法</span></span><br><span class="line">shape1.draw();</span><br><span class="line"><span class="comment">// 获取 rectangle 的对象，并调用它的 draw 方法</span></span><br><span class="line">Shape shape2 = shapeFactory.getShape(<span class="string">"RECTANGLE"</span>);</span><br><span class="line"><span class="comment">// 调用 rectangle 的 draw 方法</span></span><br><span class="line">shape2.draw();</span><br><span class="line"><span class="comment">// 获取 square 的对象，并调用它的 draw 方法</span></span><br><span class="line">Shape shape3 = shapeFactory.getShape(<span class="string">"SQUARE"</span>);</span><br><span class="line"><span class="comment">// 调用 square 的 draw 方法</span></span><br><span class="line">shape3.draw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤 5"></a>步骤 5</h3><p>验证输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Inside Circle::draw() method.</span><br><span class="line">Inside Rectangle::draw() method.</span><br><span class="line">Inside Square::draw() method.</span><br></pre></td></tr></table></figure><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记:"></a>笔记:</h3><ol><li><p>使用反射机制可以解决每次增加一个产品时，都需要增加一个对象实现工厂的缺点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getClass</span><span class="params">(Class&lt;?extends Shape&gt; clazz)</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = Class.forName(clazz.getName()).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的使用采用强制转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rectangle rect = (Rectangle) ShapeFactory.getClass(Rectangle.class);</span><br><span class="line">rect.draw();</span><br><span class="line">Square square = (Square) ShapeFactory.getClass(Square.class);</span><br><span class="line">square.draw();</span><br></pre></td></tr></table></figure><p>这样就只需要一个对象实现工厂</p></li><li><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getClass</span><span class="params">(Class&lt;? extends T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        T obj = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = (T) Class.forName(clazz.getName()).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>省略类型强制转换，支持多态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Rectangle rect = ShapeFactory.getClass(Rectangle.class);</span><br><span class="line">rect.draw();</span><br><span class="line"></span><br><span class="line">Shape square = ShapeFactory.getClass(Square.class);</span><br><span class="line">square.draw();</span><br></pre></td></tr></table></figure></li></ol><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><p><strong>主要解决：</strong>主要解决接口选择的问题。</p><p><strong>何时使用：</strong>系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。</p><p><strong>如何解决：</strong>在一个产品族里面，定义多个产品。</p><p><strong>关键代码：</strong>在一个工厂里聚合多个同类产品。</p><p><strong>应用实例：</strong>工作了，为了参加一些聚会，肯定有两套或多套衣服吧，比如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些也都是成套的，即一系列具体产品。假设一种情况（现实中是不存在的，要不然，没法进入共产主义了，但有利于说明抽象工厂模式），在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一系列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 OO 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。</p><p><strong>优点：</strong>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p><p><strong>缺点：</strong>产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。</p><p><strong>使用场景：</strong> </p><ol><li>QQ 换皮肤，一整套一起换。 </li><li>生成不同操作系统的程序。</li></ol><p><strong>注意事项：</strong>产品族难扩展，产品等级易扩展。</p><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><p>我们将创建 <em>Shape</em> 和 <em>Color</em> 接口和实现这些接口的实体类。下一步是创建抽象工厂类 <em>AbstractFactory</em>。接着定义工厂类 <em>ShapeFactory</em> 和 <em>ColorFactory</em>，这两个工厂类都是扩展了 <em>AbstractFactory</em>。然后创建一个工厂创造器/生成器类 <em>FactoryProducer</em>。</p><p><em>AbstractFactoryPatternDemo</em>，我们的演示类使用 <em>FactoryProducer</em> 来获取 <em>AbstractFactory</em> 对象。它将向 <em>AbstractFactory</em> 传递形状信息 <em>Shape</em>（<em>CIRCLE / RECTANGLE / SQUARE</em>），以便获取它所需对象的类型。同时它还向 <em>AbstractFactory</em> 传递颜色信息 <em>Color</em>（<em>RED / GREEN / BLUE</em>），以便获取它所需对象的类型。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/design/design-pattern003.jpg" alt="design"></p><h3 id="步骤-1-1"><a href="#步骤-1-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>为形状创建一个接口。</p><p><em>Shape.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-2-1"><a href="#步骤-2-1" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>创建实现接口的实体类。</p><p><em>Rectangle.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Rectangle::draw() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Square.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Square::draw() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Circle.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Circle::draw() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-3-1"><a href="#步骤-3-1" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>为颜色创建一个接口。</p><p><em>Color.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4"></a>步骤4</h3><p>创建实现接口的实体类。</p><p><em>Red.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Red::fill() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Green.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Green</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Green::fill() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Blue.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blue</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Blue::fill() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-5-1"><a href="#步骤-5-1" class="headerlink" title="步骤 5"></a>步骤 5</h3><p>为 Color 和 Shape 对象创建抽象类来获取工厂。</p><p><em>AbstractFactory.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Color <span class="title">getColor</span><span class="params">(String color)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Shape <span class="title">getShape</span><span class="params">(String shape)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤 6"></a>步骤 6</h3><p>创建扩展了 AbstractFactory 的工厂类，基于给定的信息生成实体类的对象。</p><p><em>ShapeFactory.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Color <span class="title">getColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Shape <span class="title">getShape</span><span class="params">(String shapeType)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(shapeType == <span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"CIRCLE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"RECTANGLE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"SQUARE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>ColorFactory.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Color <span class="title">getColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (color == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (color.equalsIgnoreCase(<span class="string">"RED"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Red();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (color.equalsIgnoreCase(<span class="string">"GREEN"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Green();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (color.equalsIgnoreCase(<span class="string">"BLUE"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Blue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Shape <span class="title">getShape</span><span class="params">(String shapeType)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-7"><a href="#步骤-7" class="headerlink" title="步骤 7"></a>步骤 7</h3><p>创建一个工厂创造器/生成器类，通过传递形状或颜色信息来获取工厂。</p><p><em>FactoryProducer.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryProducer</span>  </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">getFactory</span><span class="params">(String choice)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (choice.equalsIgnoreCase(<span class="string">"SHAPE"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ShapeFactory();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (choice.equalsIgnoreCase(<span class="string">"COLOR"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ColorFactory();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-8"><a href="#步骤-8" class="headerlink" title="步骤 8"></a>步骤 8</h3><p>使用 FactoryProducer 来获取 AbstractFactory，通过传递类型信息来获取实体类的对象。</p><p><em>AbstractFactoryPatternDemo.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取形状工厂</span></span><br><span class="line">      AbstractFactory shapeFactory = FactoryProducer.getFactory(<span class="string">"SHAPE"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取形状为 Circle 的对象</span></span><br><span class="line">      Shape shape1 = shapeFactory.getShape(<span class="string">"CIRCLE"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//调用 Circle 的 draw 方法</span></span><br><span class="line">      shape1.draw();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取形状为 Rectangle 的对象</span></span><br><span class="line">      Shape shape2 = shapeFactory.getShape(<span class="string">"RECTANGLE"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//调用 Rectangle 的 draw 方法</span></span><br><span class="line">      shape2.draw();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//获取形状为 Square 的对象</span></span><br><span class="line">      Shape shape3 = shapeFactory.getShape(<span class="string">"SQUARE"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//调用 Square 的 draw 方法</span></span><br><span class="line">      shape3.draw();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取颜色工厂</span></span><br><span class="line">      AbstractFactory colorFactory = FactoryProducer.getFactory(<span class="string">"COLOR"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取颜色为 Red 的对象</span></span><br><span class="line">      Color color1 = colorFactory.getColor(<span class="string">"RED"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//调用 Red 的 fill 方法</span></span><br><span class="line">      color1.fill();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取颜色为 Green 的对象</span></span><br><span class="line">      Color color2 = colorFactory.getColor(<span class="string">"Green"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//调用 Green 的 fill 方法</span></span><br><span class="line">      color2.fill();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取颜色为 Blue 的对象</span></span><br><span class="line">      Color color3 = colorFactory.getColor(<span class="string">"BLUE"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//调用 Blue 的 fill 方法</span></span><br><span class="line">      color3.fill();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-9"><a href="#步骤-9" class="headerlink" title="步骤 9"></a>步骤 9</h3><p>验证输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Inside Circle::draw() method.</span><br><span class="line">Inside Rectangle::draw() method.</span><br><span class="line">Inside Square::draw() method.</span><br><span class="line">Inside Red::fill() method.</span><br><span class="line">Inside Green::fill() method.</span><br><span class="line">Inside Blue::fill() method.</span><br></pre></td></tr></table></figure><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>注意：</strong></p><ul><li>1、单例类只能有一个实例。</li><li>2、单例类必须自己创建自己的唯一实例。</li><li>3、单例类必须给所有其他对象提供这一实例。</li></ul><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><strong>主要解决：</strong>一个全局使用的类频繁地创建与销毁。</p><p><strong>何时使用：</strong>当您想控制实例数目，节省系统资源的时候。</p><p><strong>如何解决：</strong>判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p><p><strong>关键代码：</strong>构造函数是私有的。</p><p><strong>应用实例：</strong> </p><ol><li>一个党只能有一个主席。 </li><li>Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。 </li><li>一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。</li></ol><p><strong>优点：</strong></p><pre><code>1. 在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2. 避免对资源的多重占用（比如写文件操作）。</code></pre><p><strong>缺点：</strong>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><p><strong>使用场景：</strong> </p><ol><li>要求生产唯一序列号。 </li><li>WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 </li><li>创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</li></ol><p><strong>注意事项：</strong>getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</p><h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><p>我们将创建一个 <em>SingleObject</em> 类。<em>SingleObject</em> 类有它的私有构造函数和本身的一个静态实例。</p><p><em>SingleObject</em> 类提供了一个静态方法，供外界获取它的静态实例。<em>SingletonPatternDemo</em>，我们的演示类使用 <em>SingleObject</em> 类来获取 <em>SingleObject</em> 对象。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/design/design-pattern004.jpg" alt="design"></p><h3 id="步骤-1-2"><a href="#步骤-1-2" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建一个 Singleton 类。</p><p><em>SingleObject.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建 SingleObject 的一个对象</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SingleObject instance = <span class="keyword">new</span> SingleObject();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//让构造函数为 private，这样该类就不会被实例化</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">SingleObject</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于对象的实例化   大家想到的通常是直接new，除了这个，还有些单实例模式，层次间调用等等</p><p>getInstance的使用:</p><p>在主函数开始时调用，返回一个实例化对象，此对象是static的，在内存中保留着它的引用，即内存中有一块区域专门用来存放静态方法和变量，可以直接使用，调用多次返回同一个对象。</p><p>getInstance 和 new的区别；<br>大部分类都可以用new，new就是通过生产一个新的实例对象，或者在栈上声明一个对象，每部分的调用都是用的一个新的对象</p><p>getInstance在单例模式(保证一个类仅有一个实例，并提供一个访问它的全局访问点)的类中常见，用来生成唯一的实例，getInstance往往是static的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInstance</span> </span>&#123; </span><br><span class="line">&gt; <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">1</span>; </span><br><span class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TestInstance <span class="title">getInstance</span><span class="params">()</span> </span>&#123; </span><br><span class="line">&gt;   System.out.println(i++); </span><br><span class="line">&gt;   <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">&gt; &#125; </span><br><span class="line">&gt; &#125; </span><br><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGetInstance</span> </span>&#123; </span><br><span class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">&gt;   TestInstance ins1 = TestInstance.getInstance(); </span><br><span class="line">&gt;   TestInstance ins2 = TestInstance.getInstance(); </span><br><span class="line">&gt; &#125; </span><br><span class="line">&gt; &#125; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>使用实例，在定义的新类当中加入getInstance()方法，返回值即为该类的一个对象，此方法常常应用在Java的单例模式当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAuthConstant</span> </span>&#123;  </span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> OAuthConstant <span class="title">getInstance</span><span class="params">()</span></span>&#123;  </span><br><span class="line">&gt;         <span class="keyword">if</span>(instance == <span class="keyword">null</span>)  </span><br><span class="line">&gt;             instance = <span class="keyword">new</span> OAuthConstant();  </span><br><span class="line">&gt;         <span class="keyword">return</span> instance;  </span><br><span class="line">&gt;     &#125;  </span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>//主函数当中使用此类的getInstance()函数，即可得到系统当前已经实例化的该类对象，若当前系统还没有实例化过这个类的对象，则调用此类的构造函数  </p><p>//实例化一个对象，并返回  </p><p>OAuthConstant.getInstance();  </p><ol><li>对象使用之前通过getInstance得到而不需要自己定义，用完之后不需要delete；</li><li>new 一定要生成一个新对象，分配内存；getInstance() 则不一定要再次创建，它可以把一个已存在的引用给你使用，这在效能上优于new；</li><li>new创建后只能当次使用，而getInstance()可以跨栈区域使用，或者远程跨区域使用。所以getInstance()通常是创建static静态实例方法的。</li><li>对于抽象类，是只能用getInstance()方法,是不能new出来的，</li></ol><p>总结：</p><p>getInstance这个方法在单例模式用的甚多，为了避免对内存造成浪费，直到需要实例化该类的时候才将其实例化，所以用getInstance来获取该对象，至于其他时候，也就是为了简便而已，为了不让程序在实例化对象的时候，不用每次都用new关键字，索性提供一个instance方法，不必一执行这个类就初始化，这样做到不浪费系统资源！单例模式 可以防止 数据的冲突，节省内存空间。</p></blockquote><h3 id="步骤-2-2"><a href="#步骤-2-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>从 singleton 类获取唯一的对象。</p><p><em>SingletonPatternDemo.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//不合法的构造函数</span></span><br><span class="line">      <span class="comment">//编译时错误：构造函数 SingleObject() 是不可见的</span></span><br><span class="line">      <span class="comment">//SingleObject object = new SingleObject();</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">      SingleObject object = SingleObject.getInstance();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//显示消息</span></span><br><span class="line">      object.showMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-3-2"><a href="#步骤-3-2" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>验证输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h2 id="单例模式的几种实现方式"><a href="#单例模式的几种实现方式" class="headerlink" title="单例模式的几种实现方式"></a>单例模式的几种实现方式</h2><p>单例模式的实现有多种方式，如下所示：</p><h3 id="1、懒汉式，线程不安全"><a href="#1、懒汉式，线程不安全" class="headerlink" title="1、懒汉式，线程不安全"></a>1、懒汉式，线程不安全</h3><p><strong>是否 Lazy 初始化：</strong>是</p><p><strong>是否多线程安全：</strong>否</p><p><strong>实现难度：</strong>易</p><p><strong>描述：</strong>这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。<br>这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。</p><p><strong>代码实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接下来介绍的几种实现方式都支持多线程，但是在性能上有所差异。</strong></p><h3 id="2、懒汉式，线程安全"><a href="#2、懒汉式，线程安全" class="headerlink" title="2、懒汉式，线程安全"></a>2、懒汉式，线程安全</h3><p><strong>是否 Lazy 初始化：</strong>是</p><p><strong>是否多线程安全：</strong>是</p><p><strong>实现难度：</strong>易</p><p><strong>描述：</strong>这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。<br>优点：第一次调用才初始化，避免内存浪费。<br>缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。<br>getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。</p><p><strong>代码实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、饿汉式"><a href="#3、饿汉式" class="headerlink" title="3、饿汉式"></a>3、饿汉式</h3><p><strong>是否 Lazy 初始化：</strong>否</p><p><strong>是否多线程安全：</strong>是</p><p><strong>实现难度：</strong>易</p><p><strong>描述：</strong>这种方式比较常用，但容易产生垃圾对象。<br>优点：没有加锁，执行效率会提高。<br>缺点：类加载时就初始化，浪费内存。<br>它基于 classloder 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。</p><p><strong>代码实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、双检锁-双重校验锁（DCL，即-double-checked-locking）"><a href="#4、双检锁-双重校验锁（DCL，即-double-checked-locking）" class="headerlink" title="4、双检锁/双重校验锁（DCL，即 double-checked locking）"></a>4、双检锁/双重校验锁（DCL，即 double-checked locking）</h3><p><strong>JDK 版本：</strong>JDK1.5 起</p><p><strong>是否 Lazy 初始化：</strong>是</p><p><strong>是否多线程安全：</strong>是</p><p><strong>实现难度：</strong>较复杂</p><p><strong>描述：</strong>这种方式采用双锁机制，安全且在多线程情况下能保持高性能。<br>getInstance() 的性能对应用程序很关键。</p><p><strong>代码实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、登记式-静态内部类"><a href="#5、登记式-静态内部类" class="headerlink" title="5、登记式/静态内部类"></a>5、登记式/静态内部类</h3><p><strong>是否 Lazy 初始化：</strong>是</p><p><strong>是否多线程安全：</strong>是</p><p><strong>实现难度：</strong>一般</p><p><strong>描述：</strong>这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。<br>这种方式同样利用了 classloder 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。想象一下，如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。</p><p><strong>代码实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、枚举"><a href="#6、枚举" class="headerlink" title="6、枚举"></a>6、枚举</h3><p><strong>JDK 版本：</strong>JDK1.5 起</p><p><strong>是否 Lazy 初始化：</strong>否</p><p><strong>是否多线程安全：</strong>是</p><p><strong>实现难度：</strong>易</p><p><strong>描述：</strong>这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。<br>这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。<br>不能通过 reflection attack 来调用私有构造方法。</p><p><strong>代码实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>经验之谈：</strong>一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</p><h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p><p><strong>主要解决：</strong>主要解决在软件系统中，有时候面临着”一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</p><p><strong>何时使用：</strong>一些基本部件不会变，而其组合经常变化的时候。</p><p><strong>如何解决：</strong>将变与不变分离开。</p><p><strong>关键代码：</strong>建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。</p><p><strong>应用实例：</strong> </p><ol><li>去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的”套餐”。 </li><li>JAVA 中的 StringBuilder。</li></ol><p><strong>优点：</strong> </p><ol><li>建造者独立，易扩展。 </li><li>便于控制细节风险。</li></ol><p><strong>缺点：</strong> </p><ol><li>产品必须有共同点，范围有限制。 </li><li>如内部变化复杂，会有很多的建造类。</li></ol><p><strong>使用场景：</strong> </p><ol><li>需要生成的对象具有复杂的内部结构。 </li><li>需要生成的对象内部属性本身相互依赖。</li></ol><p><strong>注意事项：</strong>与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p><h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><p>我们假设一个快餐店的商业案例，其中，一个典型的套餐可以是一个汉堡（Burger）和一杯冷饮（Cold drink）。汉堡（Burger）可以是素食汉堡（Veg Burger）或鸡肉汉堡（Chicken Burger），它们是包在纸盒中。冷饮（Cold drink）可以是可口可乐（coke）或百事可乐（pepsi），它们是装在瓶子中。</p><p>我们将创建一个表示食物条目（比如汉堡和冷饮）的 <em>Item</em> 接口和实现 <em>Item</em> 接口的实体类，以及一个表示食物包装的 <em>Packing</em> 接口和实现 <em>Packing</em> 接口的实体类，汉堡是包在纸盒中，冷饮是装在瓶子中。</p><p>然后我们创建一个 <em>Meal</em> 类，带有 <em>Item</em> 的 <em>ArrayList</em> 和一个通过结合 <em>Item</em> 来创建不同类型的 <em>Meal</em> 对象的 <em>MealBuilder</em>。<em>BuilderPatternDemo</em>，我们的演示类使用 <em>MealBuilder</em> 来创建一个 <em>Meal</em>。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/design/design-pattern005.jpg" alt="design"></p><h3 id="步骤-1-3"><a href="#步骤-1-3" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建一个表示食物条目和食物包装的接口。</p><p><em>Item.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Packing <span class="title">packing</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span></span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Packing.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Packing</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">pack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-2-3"><a href="#步骤-2-3" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>创建实现 Packing 接口的实体类。</p><p><em>Wrapper.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> <span class="keyword">implements</span> <span class="title">Packing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">pack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Wrapper"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Bottle.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bottle</span> <span class="keyword">implements</span> <span class="title">Packing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">pack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Bottle"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-3-3"><a href="#步骤-3-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>创建实现 Item 接口的抽象类，该类提供了默认的功能。</p><p><em>Burger.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Burger</span> <span class="keyword">implements</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Packing <span class="title">packing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Wrapper();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>ColdDrink.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ColdDrink</span> <span class="keyword">implements</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Packing <span class="title">packing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Bottle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-4-1"><a href="#步骤-4-1" class="headerlink" title="步骤 4"></a>步骤 4</h3><p>创建扩展了 Burger 和 ColdDrink 的实体类。</p><p><em>VegBurger.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VegBurger</span> <span class="keyword">extends</span> <span class="title">Burger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">25.0f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Veg Burger"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>ChickenBurger.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChickenBurger</span> <span class="keyword">extends</span> <span class="title">Burger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">50.5f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Chicken Burger"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Coke.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coke</span> <span class="keyword">extends</span> <span class="title">ColdDrink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">30.0f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Coke"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Pepsi.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pepsi</span> <span class="keyword">extends</span> <span class="title">ColdDrink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">35.0f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Pepsi"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-5-2"><a href="#步骤-5-2" class="headerlink" title="步骤 5"></a>步骤 5</h3><p>创建一个 Meal 类，带有上面定义的 Item 对象。</p><p><em>Meal.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Meal</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Item&gt; items = <span class="keyword">new</span> ArrayList&lt;Item&gt;();    </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">      items.add(item);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getCost</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">float</span> cost = <span class="number">0.0f</span>;</span><br><span class="line">      <span class="keyword">for</span> (Item item : items) &#123;</span><br><span class="line">         cost += item.price();</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">return</span> cost;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showItems</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Item item : items) &#123;</span><br><span class="line">         System.out.print(<span class="string">"Item : "</span>+item.name());</span><br><span class="line">         System.out.print(<span class="string">", Packing : "</span>+item.packing().pack());</span><br><span class="line">         System.out.println(<span class="string">", Price : "</span>+item.price());</span><br><span class="line">      &#125;        </span><br><span class="line">   &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-6-1"><a href="#步骤-6-1" class="headerlink" title="步骤 6"></a>步骤 6</h3><p>创建一个 MealBuilder 类，实际的 builder 类负责创建 Meal 对象。</p><p><em>MealBuilder.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MealBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Meal <span class="title">prepareVegMeal</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      Meal meal = <span class="keyword">new</span> Meal();</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> VegBurger());</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> Coke());</span><br><span class="line">      <span class="keyword">return</span> meal;</span><br><span class="line">   &#125;   </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Meal <span class="title">prepareNonVegMeal</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      Meal meal = <span class="keyword">new</span> Meal();</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> ChickenBurger());</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> Pepsi());</span><br><span class="line">      <span class="keyword">return</span> meal;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-7-1"><a href="#步骤-7-1" class="headerlink" title="步骤 7"></a>步骤 7</h3><p>BuiderPatternDemo 使用 MealBuider 来演示建造者模式（Builder Pattern）。</p><p><em>BuilderPatternDemo.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      MealBuilder mealBuilder = <span class="keyword">new</span> MealBuilder();</span><br><span class="line"></span><br><span class="line">      Meal vegMeal = mealBuilder.prepareVegMeal();</span><br><span class="line">      System.out.println(<span class="string">"Veg Meal"</span>);</span><br><span class="line">      vegMeal.showItems();</span><br><span class="line">      System.out.println(<span class="string">"Total Cost: "</span> +vegMeal.getCost());</span><br><span class="line"></span><br><span class="line">      Meal nonVegMeal = mealBuilder.prepareNonVegMeal();</span><br><span class="line">      System.out.println(<span class="string">"\n\nNon-Veg Meal"</span>);</span><br><span class="line">      nonVegMeal.showItems();</span><br><span class="line">      System.out.println(<span class="string">"Total Cost: "</span> +nonVegMeal.getCost());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-8-1"><a href="#步骤-8-1" class="headerlink" title="步骤 8"></a>步骤 8</h3><p>验证输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Veg Meal</span><br><span class="line">Item : Veg Burger, Packing : Wrapper, Price : <span class="number">25.0</span></span><br><span class="line">Item : Coke, Packing : Bottle, Price : <span class="number">30.0</span></span><br><span class="line">Total Cost: <span class="number">55.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Non-Veg Meal</span><br><span class="line">Item : Chicken Burger, Packing : Wrapper, Price : <span class="number">50.5</span></span><br><span class="line">Item : Pepsi, Packing : Bottle, Price : <span class="number">35.0</span></span><br><span class="line">Total Cost: <span class="number">85.5</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0117.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.iskei.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.iskei.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（Design pattern）导学</title>
    <link href="http://www.iskei.cn/posts/56017.html"/>
    <id>http://www.iskei.cn/posts/56017.html</id>
    <published>2018-02-07T14:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.025Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0116.jpg" alt="image"></p><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。<br><a id="more"></a></p><ul><li><strong>基础知识</strong></li></ul><p>  <strong>设计模式概述</strong></p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7417668" target="_blank" rel="noopener">从招式与内功谈起——设计模式概述（一）</a>：设计模式从何而来？</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7420863" target="_blank" rel="noopener">从招式与内功谈起——设计模式概述（二）</a>：设计模式是什么？</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7420866" target="_blank" rel="noopener">从招式与内功谈起——设计模式概述（三）</a>：设计模式有什么用？附：个人观点</p><p>  <strong>面向对象设计原则</strong></p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7536532" target="_blank" rel="noopener">面向对象设计原则概述</a></p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7536542" target="_blank" rel="noopener">面向对象设计原则之单一职责原则</a></p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7537584" target="_blank" rel="noopener">面向对象设计原则之开闭原则</a></p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7540445" target="_blank" rel="noopener">面向对象设计原则之里氏代换原则</a></p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7562783" target="_blank" rel="noopener">面向对象设计原则之依赖倒转原则</a></p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7562842" target="_blank" rel="noopener">面向对象设计原则之接口隔离原则</a></p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7563441" target="_blank" rel="noopener">面向对象设计原则之合成复用原则</a></p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7563445" target="_blank" rel="noopener">面向对象设计原则之迪米特法则</a></p><p>  <strong>六个创建型模式</strong></p><p>  简单工厂模式-Simple Factory Pattern【学习难度：★★☆☆☆，使用频率：★★★☆☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9300337" target="_blank" rel="noopener">工厂三兄弟之简单工厂模式（一）</a>：图表库的设计</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9300549" target="_blank" rel="noopener">工厂三兄弟之简单工厂模式（二）</a>：简单工厂模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9300657" target="_blank" rel="noopener">工厂三兄弟之简单工厂模式（三）</a>：图表库的简单工厂模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9300731" target="_blank" rel="noopener">工厂三兄弟之简单工厂模式（四）</a>：图表库解决方案的改进，简单工厂模式的简化，简单工厂模式总结</p><p>  工厂方法模式-Factory Method Pattern【学习难度：★★☆☆☆，使用频率：★★★★★】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9306457" target="_blank" rel="noopener">工厂三兄弟之工厂方法模式（一）</a>：日志记录器的设计</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9306745" target="_blank" rel="noopener">工厂三兄弟之工厂方法模式（二）</a>：工厂方法模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9307137" target="_blank" rel="noopener">工厂三兄弟之工厂方法模式（三）</a>：日志记录器的工厂方法模式解决方案，反射与配置文件</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9307561" target="_blank" rel="noopener">工厂三兄弟之工厂方法模式（四）</a>：重载的工厂方法，工厂方法的隐藏，工厂方法模式总结</p><p>  抽象工厂模式-Abstract  Factory Pattern【学习难度：★★★★☆，使用频率：★★★★★】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9319181" target="_blank" rel="noopener">工厂三兄弟之抽象工厂模式（一）</a>：界面皮肤库的初始设计</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9319323" target="_blank" rel="noopener">工厂三兄弟之抽象工厂模式（二）</a>：产品等级结构与产品族</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9319423" target="_blank" rel="noopener">工厂三兄弟之抽象工厂模式（三）</a>：抽象工厂模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9319481" target="_blank" rel="noopener">工厂三兄弟之抽象工厂模式（四）</a>：界面皮肤库的抽象工厂模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9319571" target="_blank" rel="noopener">工厂三兄弟之抽象工厂模式（五）</a>：“开闭原则”的倾斜性，抽象工厂模式总结</p><p>  单例模式-Singleton Pattern【学习难度：★☆☆☆☆，使用频率：★★★★☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7420883" target="_blank" rel="noopener">确保对象的唯一性——单例模式 （一）</a>：单例模式的动机，单例模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7420885" target="_blank" rel="noopener">确保对象的唯一性——单例模式 （二）</a>：负载均衡器的设计与实现</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7420886" target="_blank" rel="noopener">确保对象的唯一性——单例模式 （三）</a>：饿汉式单例与懒汉式单例的讨论</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7420888" target="_blank" rel="noopener">确保对象的唯一性——单例模式 （四）</a>：一种更好的单例实现方法（静态内部类）</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7420889" target="_blank" rel="noopener">确保对象的唯一性——单例模式 （五）</a>：单例模式总结</p><p>  原型模式-Prototype Pattern【学习难度：★★★☆☆，使用频率：★★★☆☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7424559" target="_blank" rel="noopener">对象的克隆——原型模式（一）</a>：大同小异的工作周报，原型模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7424594" target="_blank" rel="noopener">对象的克隆——原型模式（二）</a>：工作周报的原型模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7424620" target="_blank" rel="noopener">对象的克隆——原型模式（三）</a>：带附件的周报【浅克隆，深克隆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7424623" target="_blank" rel="noopener">对象的克隆——原型模式（四）</a>：原型管理器的引入和实现，原型模式总结</p><p>  建造者模式-Builder Pattern【学习难度：★★★★☆，使用频率：★★☆☆☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7426015" target="_blank" rel="noopener">复杂对象的组装与创建——建造者模式（一）</a>：游戏角色设计，建造者模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7426323" target="_blank" rel="noopener">复杂对象的组装与创建——建造者模式（二）</a>：游戏角色设计的建造者模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7426855" target="_blank" rel="noopener">复杂对象的组装与创建——建造者模式（三）</a>：关于Director的进一步讨论，建造者模式总结</p><p>  <strong>七个结构型模式</strong></p><p>  适配器模式-Adapter Pattern【学习难度：★★☆☆☆，使用频率：★★★★☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8624325" target="_blank" rel="noopener">不兼容结构的协调——适配器模式（一）</a>：没有源码的算法库，适配器模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8624412" target="_blank" rel="noopener">不兼容结构的协调——适配器模式（二）</a>：没有源码的算法库的适配器模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8624428" target="_blank" rel="noopener">不兼容结构的协调——适配器模式（三）</a>：类适配器，双向适配器</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8624633" target="_blank" rel="noopener">不兼容结构的协调——适配器模式（四）</a>：缺省适配器，适配器模式总结</p><p>  <strong>桥接模式-Bridge Pattern【学习难度：</strong>★★★☆☆<strong>，使用频率：**</strong>★★★☆☆<strong>**】</strong></p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7464183" target="_blank" rel="noopener">处理多维度变化——桥接模式（一）</a>：跨平台图像浏览系统</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7464195" target="_blank" rel="noopener">处理多维度变化——桥接模式（二）</a>：桥接模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7464204" target="_blank" rel="noopener">处理多维度变化——桥接模式（三）</a>：跨平台图像浏览系统的桥接模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7464208" target="_blank" rel="noopener">处理多维度变化——桥接模式（四）</a>：适配器模式与桥接模式的联用，桥接模式总结</p><hr><p>  组合模式-Composite Pattern【学习难度：★★★☆☆，使用频率：★★★★☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7956898" target="_blank" rel="noopener">树形结构的处理——组合模式（一）</a>：设计杀毒软件的框架结构</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7956908" target="_blank" rel="noopener">树形结构的处理——组合模式（二）</a>：组合模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7956931" target="_blank" rel="noopener">树形结构的处理——组合模式（三）</a>：杀毒软件的框架结构的组合模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7956937" target="_blank" rel="noopener">树形结构的处理——组合模式（四）</a>：透明组合模式与安全组合模式</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7956962" target="_blank" rel="noopener">树形结构的处理——组合模式（五）</a>：公司组织结构，组合模式总结</p><hr><p>  装饰模式-Decorator Pattern【学习难度：★★★☆☆，使用频率：★★★☆☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7424685" target="_blank" rel="noopener">扩展系统功能——装饰模式（一）</a>：图形界面构件库的设计</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7425849" target="_blank" rel="noopener">扩展系统功能——装饰模式（二）</a>：装饰模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7425861" target="_blank" rel="noopener">扩展系统功能——装饰模式（三）</a>：图形界面构件库的装饰模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7425873" target="_blank" rel="noopener">扩展系统功能——装饰模式（四）</a>：透明装饰模式与半透明装饰模式，装饰模式注意事项，装饰模式总结</p><hr><p>  外观模式-Facade Pattern【学习难度：★☆☆☆☆，使用频率：★★★★★】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8258121" target="_blank" rel="noopener">深入浅出外观模式（一）</a>：外观模式概述，外观模式结构与实现</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8259705" target="_blank" rel="noopener">深入浅出外观模式（二）</a>：外观模式应用实例（文件加密模块）</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8259789" target="_blank" rel="noopener">深入浅出外观模式（三）</a>：抽象外观类，外观模式效果与适用场景</p><hr><p>  享元模式-Flyweight Pattern【学习难度：★★★★☆，使用频率：★☆☆☆☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7667781" target="_blank" rel="noopener">实现对象的复用——享元模式（一）</a>：围棋棋子的设计，享元模式概述（上）</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7667810" target="_blank" rel="noopener">实现对象的复用——享元模式（二）</a>：享元模式概述（下）</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7667839" target="_blank" rel="noopener">实现对象的复用——享元模式（三）</a>：围棋棋子的享元模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7667860" target="_blank" rel="noopener">实现对象的复用——享元模式（四）</a>：带外部状态的围棋棋子解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7667901" target="_blank" rel="noopener">实现对象的复用——享元模式（五）</a>：单纯享元模式和复合享元模式，关于享元模式的几点补充，享元模式总结</p><hr><p>  代理模式-Proxy Pattern【学习难度：★★★☆☆，使用频率：★★★★☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8227953" target="_blank" rel="noopener">代理模式（一）</a>：代理模式概述，代理模式结构与实现</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8228042" target="_blank" rel="noopener">代理模式（二）</a>：代理模式应用实例（收费商务信息查询系统）</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8228132" target="_blank" rel="noopener">代理模式（三）</a>：远程代理，虚拟代理，缓冲代理</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8228156" target="_blank" rel="noopener">代理模式（四）</a>：代理模式效果与适用场景</p><p>  <strong>十一个行为型模式</strong></p><p>  职责链模式-Chain of Responsibility Pattern【学习难度：★★★☆☆，使用频率：★★☆☆☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7420891" target="_blank" rel="noopener">请求的链式处理——职责链模式（一）</a>：采购单的分级审批</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7420893" target="_blank" rel="noopener">请求的链式处理——职责链模式（二）</a>：职责链模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7420898" target="_blank" rel="noopener">请求的链式处理——职责链模式（三）</a>：采购单分级审批的职责链模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7420902" target="_blank" rel="noopener">请求的链式处理——职责链模式（四）</a>：纯与不纯的职责链模式，职责链模式总结</p><hr><p>  命令模式-Command Pattern【学习难度：★★★<strong>☆☆**</strong>，使用频率：<strong><strong>★★★★☆</strong></strong>】**</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8796736" target="_blank" rel="noopener">请求发送者与接收者解耦——命令模式（一）</a>：自定义功能键，命令模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8806049" target="_blank" rel="noopener">请求发送者与接收者解耦——命令模式（二）</a>：自定义功能键的命令模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8806239" target="_blank" rel="noopener">请求发送者与接收者解耦——命令模式（三）</a>：命令队列的实现</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8806509" target="_blank" rel="noopener">请求发送者与接收者解耦——命令模式（四）</a>：撤销操作的简单实现</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8806643" target="_blank" rel="noopener">请求发送者与接收者解耦——命令模式（五）</a>：请求日志</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8806677" target="_blank" rel="noopener">请求发送者与接收者解耦——命令模式（六）</a>：宏命令，命令模式总结</p><p>  解释器模式-Interpreter Pattern【学习难度：★★★★★，使用频率：★☆☆☆☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7713567" target="_blank" rel="noopener">自定义语言的实现——解释器模式（一）</a>：机器人控制程序</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7713578" target="_blank" rel="noopener">自定义语言的实现——解释器模式（二）</a>：文法规则和抽象语法树</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7713589" target="_blank" rel="noopener">自定义语言的实现——解释器模式（三）</a>：解释器模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7713593" target="_blank" rel="noopener">自定义语言的实现——解释器模式（四）</a>：机器人控制程序的解释器模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7713602" target="_blank" rel="noopener">自定义语言的实现——解释器模式（五）</a>：再谈Context的作用</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7713615" target="_blank" rel="noopener">自定义语言的实现——解释器模式（六）</a>：解释器模式总结</p><hr><p>  迭代器模式-Iterator Pattern【学习难度：★★★☆☆，使用频率：★★★★★】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9992005" target="_blank" rel="noopener">遍历聚合对象中的元素——迭代器模式（一）</a>：销售管理系统中数据的遍历</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9992243" target="_blank" rel="noopener">遍历聚合对象中的元素——迭代器模式（二）</a>：迭代器模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9992679" target="_blank" rel="noopener">遍历聚合对象中的元素——迭代器模式（三）</a>：销售管理系统中数据的遍历的迭代器模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9992731" target="_blank" rel="noopener">遍历聚合对象中的元素——迭代器模式（四）</a>：使用内部类实现迭代器</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9992799" target="_blank" rel="noopener">遍历聚合对象中的元素——迭代器模式（五）</a>：JDK内置迭代器的使用</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/9992931" target="_blank" rel="noopener">遍历聚合对象中的元素——迭代器模式（六）</a>：迭代器模式总结</p><p>  中介者模式-Mediator Pattern【学习难度：★★★☆☆，使用频率：★★☆☆☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8482952" target="_blank" rel="noopener">协调多个对象之间的交互——中介者模式（一）</a>：客户信息管理窗口的初始设计</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8483005" target="_blank" rel="noopener">协调多个对象之间的交互——中介者模式（二）</a>：中介者模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8483031" target="_blank" rel="noopener">协调多个对象之间的交互——中介者模式（三）</a>：客户信息管理窗口的中介者模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8483081" target="_blank" rel="noopener">协调多个对象之间的交互——中介者模式（四）</a>：中介者与同事类的扩展</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8483151" target="_blank" rel="noopener">协调多个对象之间的交互——中介者模式（五）</a>：中介者模式总结</p><p>  备忘录模式-Memento Pattern【学习难度：★★☆☆☆，使用频率：★★☆☆☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7526740" target="_blank" rel="noopener">撤销功能的实现——备忘录模式（一）</a>：可悔棋的中国象棋</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7526747" target="_blank" rel="noopener">撤销功能的实现——备忘录模式（二）</a>：备忘录模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7526755" target="_blank" rel="noopener">撤销功能的实现——备忘录模式（三）</a>：中国象棋的备忘录模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7526756" target="_blank" rel="noopener">撤销功能的实现——备忘录模式（四）</a>：实现多次撤销</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7526759" target="_blank" rel="noopener">撤销功能的实现——备忘录模式（五）</a>：再谈备忘录的封装，备忘录模式总结</p><hr><p>  观察者模式-Observer Pattern【学习难度：★★★☆☆，使用频率：★★★★★】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7720232" target="_blank" rel="noopener">对象间的联动——观察者模式（一）</a>：多人联机对战游戏的设计</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7720382" target="_blank" rel="noopener">对象间的联动——观察者模式（二）</a>：观察者模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7720490" target="_blank" rel="noopener">对象间的联动——观察者模式（三）</a>：多人联机对战游戏的观察者模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7720507" target="_blank" rel="noopener">对象间的联动——观察者模式（四）</a>：JDK对观察者模式的支持</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7720522" target="_blank" rel="noopener">对象间的联动——观察者模式（五）</a>：观察者模式与Java事件处理</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7720537" target="_blank" rel="noopener">对象间的联动——观察者模式（六）</a>：观察者模式与MVC，观察者模式总结</p><p>  状态模式-State Pattern【学习难度：★★★☆☆，使用频率：★★★☆☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8522982" target="_blank" rel="noopener">处理对象的多种状态及其相互转换——状态模式（一）</a>：银行系统中的账户类设计</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8523062" target="_blank" rel="noopener">处理对象的多种状态及其相互转换——状态模式（二）</a>：状态模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8523083" target="_blank" rel="noopener">处理对象的多种状态及其相互转换——状态模式（三）</a>：账户类的状态模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8523105" target="_blank" rel="noopener">处理对象的多种状态及其相互转换——状态模式（四）</a>：共享状态的实现</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8523130" target="_blank" rel="noopener">处理对象的多种状态及其相互转换——状态模式（五）</a>：使用环境类实现状态转换</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8523162" target="_blank" rel="noopener">处理对象的多种状态及其相互转换——状态模式（六）</a>：状态模式总结</p><p>  策略模式-Strategy Pattern【学习难度：★☆☆☆☆，使用频率：★★★★☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7818983" target="_blank" rel="noopener">算法的封装与切换——策略模式（一）</a>：电影票打折方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7819136" target="_blank" rel="noopener">算法的封装与切换——策略模式（二）</a>：策略模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7819216" target="_blank" rel="noopener">算法的封装与切换——策略模式（三）</a>：电影票打折方案的策略模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7819266" target="_blank" rel="noopener">算法的封装与切换——策略模式（四）</a>：策略模式的两个典型应用，策略模式总结</p><p>  模板方法模式-Template Method Pattern【学习难度：★★☆☆☆，使用频率：★★★☆☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8299794" target="_blank" rel="noopener">模板方法模式深度解析（一）</a>：模板方法模式概述，模板方法模式结构与实现</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8299863" target="_blank" rel="noopener">模板方法模式深度解析（二）</a>：模板方法模式应用实例（银行利息计算模块）</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8299927" target="_blank" rel="noopener">模板方法模式深度解析（三）</a>：钩子方法的使用，模板方法模式效果与适用场景</p><p>  访问者模式-Visitor Pattern【学习难度：★★★★☆，使用频率：★☆☆☆☆】</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7433523" target="_blank" rel="noopener">操作复杂对象结构——访问者模式（一）</a>：OA系统中员工数据汇总</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7433567" target="_blank" rel="noopener">操作复杂对象结构——访问者模式（二）</a>：访问者模式概述</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7433576" target="_blank" rel="noopener">操作复杂对象结构——访问者模式（三）</a>：OA系统中员工数据汇总的访问者模式解决方案</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7433591" target="_blank" rel="noopener">操作复杂对象结构——访问者模式（四）</a>：访问者模式与组合模式联用，访问者模式总结</p><hr><p>  <strong>设计模式趣味学习（复习）</strong></p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7707380" target="_blank" rel="noopener">设计模式与足球（一）</a>：创建型模式</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7707497" target="_blank" rel="noopener">设计模式与足球（二）</a>：结构型模式</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7707605" target="_blank" rel="noopener">设计模式与足球（三）</a>：行为型模式（上）</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/7708208" target="_blank" rel="noopener">设计模式与足球（四）</a>：行为型模式（下）</p><hr><p>  设计模式综合应用实例</p><p>  多人联机射击游戏</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8262987" target="_blank" rel="noopener">多人联机射击游戏中的设计模式应用（一）</a>：抽象工厂模式，建造者模式，工厂方法模式，迭代器模式，命令模式</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8263025" target="_blank" rel="noopener">多人联机射击游戏中的设计模式应用（二）</a>：观察者模式，单例模式，状态模式，适配器模式</p><p>  数据库同步系统</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8671196" target="_blank" rel="noopener">设计模式综合实例分析之数据库同步系统（一）</a>：数据库同步系统概述，建造者模式，简单工厂模式</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8671578" target="_blank" rel="noopener">设计模式综合实例分析之数据库同步系统（二）</a>：享元模式，单例模式，观察者模式，模板方法模式</p><p>  <a href="http://blog.csdn.net/lovelion/article/details/8671653" target="_blank" rel="noopener">设计模式综合实例分析之数据库同步系统（三）</a>：策略模式，组合模式，命令模式，职责链模式</p><p>  <strong>【作者：刘伟  </strong><a href="http://blog.csdn.net/lovelion" target="_blank" rel="noopener"><strong>http://blog.csdn.net/lovelion</strong></a><strong>】</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0116.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.iskei.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.iskei.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>产品设计-产品架构和业务逻辑</title>
    <link href="http://www.iskei.cn/posts/36961.html"/>
    <id>http://www.iskei.cn/posts/36961.html</id>
    <published>2018-02-07T10:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.033Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0115.jpg" alt="image"></p><p>在分析产品的时候，快速理解产品架构；产品细节设计时，能围绕核心业务逻辑展开；能独立开始搭建产品架构和业务逻辑<br><a id="more"></a></p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>在分析产品的时候，快速理解产品架构</li><li>产品细节设计时，能围绕核心业务逻辑展开</li><li>能独立开始搭建产品架构和业务逻辑</li></ul><h1 id="1-了解产品架构、业务逻辑和业务流程"><a href="#1-了解产品架构、业务逻辑和业务流程" class="headerlink" title="1.了解产品架构、业务逻辑和业务流程"></a>1.了解产品架构、业务逻辑和业务流程</h1><h2 id="1-1-如何理解流程化产品设计"><a href="#1-1-如何理解流程化产品设计" class="headerlink" title="1.1 如何理解流程化产品设计"></a>1.1 如何理解流程化产品设计</h2><ul><li><p>设计产品，就是设计流程</p></li><li><p>流程不是独立存在的，而是在一个整体体系下发生的</p></li><li><p>体系=产品架构+业务逻辑+业务流程</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cp/chanpin1.png" alt="img"></p><p>Fig 1.1 流程.png</p></li></ul><h3 id="1-1-1产品架构-设计图-目标"><a href="#1-1-1产品架构-设计图-目标" class="headerlink" title="1.1.1产品架构=设计图=目标"></a>1.1.1产品架构=设计图=目标</h3><ul><li>未来一段时间你希望完成的蓝图</li></ul><h3 id="1-1-2业务逻辑-框架设计图-功能模块"><a href="#1-1-2业务逻辑-框架设计图-功能模块" class="headerlink" title="1.1.2业务逻辑=框架设计图=功能模块"></a>1.1.2业务逻辑=框架设计图=功能模块</h3><ul><li>用户要解决问题需要走过的路径</li><li>不同的模块之间的关联性</li></ul><h3 id="1-1-3业务流程-施工图-实施方法"><a href="#1-1-3业务流程-施工图-实施方法" class="headerlink" title="1.1.3业务流程=施工图=实施方法"></a>1.1.3业务流程=施工图=实施方法</h3><p>如：</p><ul><li>注册流程图</li><li>下单流程图</li><li>支付流程图</li></ul><blockquote><p>小结：做产品如盖楼，不断逐级解构，剥橘子般一片片分离的过程</p></blockquote><h1 id="2-搭建产品架构"><a href="#2-搭建产品架构" class="headerlink" title="2.搭建产品架构"></a>2.搭建产品架构</h1><h2 id="2-1为什么做产品要先理解产品架构"><a href="#2-1为什么做产品要先理解产品架构" class="headerlink" title="2.1为什么做产品要先理解产品架构"></a>2.1为什么做产品要先理解产品架构</h2><ul><li>深入了解一个产品的运作逻辑</li><li>看产品的时候，不再只看界面与交互，而是背后的逻辑</li><li>指导产品设计和运营</li><li>进可观星：评估产品的生命力</li><li>退可照妖：识别忽悠型产品</li></ul><h3 id="2-1-1-为什么做产品要先理解产品架构？"><a href="#2-1-1-为什么做产品要先理解产品架构？" class="headerlink" title="2.1.1 为什么做产品要先理解产品架构？"></a>2.1.1 为什么做产品要先理解产品架构？</h3><p>  <img src="http://ovi3ob9p4.bkt.clouddn.com/cp/chanpin2.png" alt="img"></p><p>Fig 1.2三节课官网产品架构.png</p><h3 id="2-1-2-从产品的角度理解产品"><a href="#2-1-2-从产品的角度理解产品" class="headerlink" title="2.1.2 从产品的角度理解产品"></a>2.1.2 从产品的角度理解产品</h3><p>  <img src="http://ovi3ob9p4.bkt.clouddn.com/cp/chanpin3.png" alt="img"></p><p>Fig 1.3 17APP产品架构.png</p><h3 id="2-1-3-识别忽悠型产品"><a href="#2-1-3-识别忽悠型产品" class="headerlink" title="2.1.3 识别忽悠型产品"></a>2.1.3 识别忽悠型产品</h3><h2 id="2-2-产品架构的关键点是什么？"><a href="#2-2-产品架构的关键点是什么？" class="headerlink" title="2.2 产品架构的关键点是什么？"></a>2.2 产品架构的关键点是什么？</h2><ul><li><p>最关注人、信息、渠道和流转过程</p></li><li><p>内容从哪里来，到哪里去</p></li><li><p>用户从哪里来，到哪里去</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cp/chanpin4.png" alt="img"></p><p>Fig 1.4 关键点.png</p></li></ul><h2 id="2-3-有哪些人（角色）参与产品"><a href="#2-3-有哪些人（角色）参与产品" class="headerlink" title="2.3 有哪些人（角色）参与产品"></a>2.3 有哪些人（角色）参与产品</h2><ul><li>分别有哪些人先后会做什么动作？</li><li>不同的角色，会做什么事？</li><li>人和人之间的关系是什么？</li></ul><h2 id="2-4-会产生什么信息？"><a href="#2-4-会产生什么信息？" class="headerlink" title="2.4 会产生什么信息？"></a>2.4 会产生什么信息？</h2><ul><li><p>有哪些信息产生</p></li><li><p>信息由谁产生的？</p></li><li><p>信息与信息之间的关系是什么？</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cp/chanpin5.png" alt="img"></p><p>Fig 1.6 信息与信息之间的关系.png</p></li></ul><h2 id="2-5-流转过程与渠道"><a href="#2-5-流转过程与渠道" class="headerlink" title="2.5 流转过程与渠道"></a>2.5 流转过程与渠道</h2><p>  <img src="http://ovi3ob9p4.bkt.clouddn.com/cp/chanpin6.png" alt="img"></p><p>Fig 1.7 流程过程与渠道.png</p><blockquote><p>小结：产品架构可以调研相关产品获得，如果已经被市场验证的，没必要搞独创。</p></blockquote><h1 id="3-搭建产品业务逻辑"><a href="#3-搭建产品业务逻辑" class="headerlink" title="3.搭建产品业务逻辑"></a>3.搭建产品业务逻辑</h1><h2 id="3-1为什么要理解业务逻辑？"><a href="#3-1为什么要理解业务逻辑？" class="headerlink" title="3.1为什么要理解业务逻辑？"></a>3.1为什么要理解业务逻辑？</h2><ul><li><p>业务逻辑是功能模块设计，关键功能与参与者流程</p></li><li><p>业务逻辑有助于统一各参与者的角色与分工</p></li><li><p>有助于产品业务流程的设计</p><p> <img src="http://ovi3ob9p4.bkt.clouddn.com/cp/chanpin7.png" alt="img"></p><p>Fig 1.8 业务逻辑.png</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cp/chanpin8.png" alt="img"></p><p>Fig 1.9 三节课官网开课业务逻辑.png</p></li></ul><h2 id="3-3-如何开始业务逻辑设计？"><a href="#3-3-如何开始业务逻辑设计？" class="headerlink" title="3.3 如何开始业务逻辑设计？"></a>3.3 如何开始业务逻辑设计？</h2><ul><li><p>有哪些功能模块</p></li><li><p>有哪些页面</p></li><li><p>不同模块之间是如何关联的</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/cp/chanpin9.png" alt="img"></p><p>Fig 1.10过程.png</p></li></ul><h2 id="3-4-以内容为主线、明确数据流向"><a href="#3-4-以内容为主线、明确数据流向" class="headerlink" title="3.4 以内容为主线、明确数据流向"></a>3.4 以内容为主线、明确数据流向</h2><ul><li>关键数据是什么？</li><li>数据从哪里来？到哪里去？需要经过哪些系统？</li></ul><h2 id="3-5-以用户为主线，明确行为"><a href="#3-5-以用户为主线，明确行为" class="headerlink" title="3.5 以用户为主线，明确行为"></a>3.5 以用户为主线，明确行为</h2><ul><li>重要的角色是什么？辅助的角色是什么？</li><li>不同的角色的行为分别是什么？</li><li>用户从哪里来，到哪里去？会经过哪些系统，用到哪些功能？</li></ul><h2 id="3-6-以渠道（终端）为界面，区分类型"><a href="#3-6-以渠道（终端）为界面，区分类型" class="headerlink" title="3.6 以渠道（终端）为界面，区分类型"></a>3.6 以渠道（终端）为界面，区分类型</h2><ul><li>有哪些渠道（终端）？</li><li>这些终端是如何展现内容的？</li><li>用户在不同终端的操作行为有哪些不同？</li></ul><h2 id="3-7-把以上模块串联起来"><a href="#3-7-把以上模块串联起来" class="headerlink" title="3.7 把以上模块串联起来"></a>3.7 把以上模块串联起来</h2><ul><li>用户、系统、终端等之间是如何关联的？</li><li>先通顺再细化</li><li>先能用再美化</li></ul><blockquote><p>小结：业务逻辑是指导产品经理的工作方向的，明确需求解决什么环节的问题。</p></blockquote><h1 id="4-设计产品业务流程图"><a href="#4-设计产品业务流程图" class="headerlink" title="4.设计产品业务流程图"></a>4.设计产品业务流程图</h1><h2 id="4-1业务流程图"><a href="#4-1业务流程图" class="headerlink" title="4.1业务流程图"></a>4.1业务流程图</h2><p>关注后续《业务流程设计》的课程</p><h2 id="4-2-产品架构、业务逻辑、业务流程"><a href="#4-2-产品架构、业务逻辑、业务流程" class="headerlink" title="4.2 产品架构、业务逻辑、业务流程"></a>4.2 产品架构、业务逻辑、业务流程</h2><p>  <img src="http://ovi3ob9p4.bkt.clouddn.com/cp/chanpin10.png" alt="img"></p><p>Fig 1.11 三种图.png</p><blockquote><p>小结：业务流程是业务逻辑中模块的细化，是每个需求文档中必备的内容</p></blockquote><hr><blockquote><p>总结：</p></blockquote><p>1.如何理解产品架构、业务逻辑和业务流程</p><ul><li>产品架构-&gt;业务逻辑-&gt;业务流程</li></ul><p>2.如何开展搭建产品架构</p><ul><li>以用户为中心，人与人，人与信息，信息与信息之间的关系</li></ul><p>3.如何开始搭建业务逻辑</p><ul><li>内容主线-&gt;用户主线-&gt;终端-&gt;关联起来</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0115.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;在分析产品的时候，快速理解产品架构；产品细节设计时，能围绕核心业务逻辑展开；能独立开始搭建产品架构和业务逻辑&lt;br&gt;
    
    </summary>
    
      <category term="Document" scheme="http://www.iskei.cn/categories/Document/"/>
    
    
      <category term="Document" scheme="http://www.iskei.cn/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>细说软件产品和业务、业务过程(流程)、业务逻辑</title>
    <link href="http://www.iskei.cn/posts/16499.html"/>
    <id>http://www.iskei.cn/posts/16499.html</id>
    <published>2018-02-07T07:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.033Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0114.jpg" alt="image"></p><p>作为一名程序猿，需要懂产品，不懂产品的程序猿不是好程序猿猴。而业务逻辑是软件产品的支柱，所以，要懂产品，就必须懂业务逻辑。<br><a id="more"></a></p><p>介绍业务逻辑之前，先介绍下相关的一些概念。</p><h4 id="什么叫业务？"><a href="#什么叫业务？" class="headerlink" title="什么叫业务？"></a>什么叫业务？</h4><p>从企业的角度来讲，业务是企业运用科学方法和生产工艺生产出可交付用户使用的产品与服务，并以此为企业带来利益的行为。</p><p>举例：</p><p>对服装企业来说，业务一般是生产服装；对银行企业来说，业务可以是办理贷款；对软件公司来说，业务可以是开发某种类型的软件，比如开发防火墙软件；对医院来说，业务可以是提供医疗服务。</p><h4 id="什么叫业务过程？"><a href="#什么叫业务过程？" class="headerlink" title="什么叫业务过程？"></a>什么叫业务过程？</h4><p>“业务流程”和“业务过程”是两个经常出现的词，含义相似，但有轻微区别，这里暂且不做区分，都统一叫做业务过程。</p><ol><li><p>1）业务过程开始于客户需求，终止于客户需求的满足，为客户创造价值。</p></li><li><p>2）业务过程是为了产生产品或服务而设计的一系列步骤，一些过程的结果可能是由组织外的客户所接受的产品或服务，称为主要过程；另一些过程的产出不为外部客户所见，但是有效管理所必须的，称为支持过程。</p></li></ol><p>举例：</p><p>业务过程，对于服装工厂来说，可以是产出可穿戴衣物的一系列活动；对医院来说，可以是提供医疗服务的一系列活动；对软件公司来说，可以是开发出满足客户需求的软件产品的一系列活动。</p><p>软件产品和业务过程</p><p>软件产品具有它的特殊性，通常情况下，企业提供的软件产品、服务，主要用于外部组织、用户实现其业务过程。</p><p>举例：</p><p>假设有两家公司,A公司和B公司。A公司的业务是提供医疗服务；B公司是开发医疗相关的软件。A公司找到B公司说，我需要你们帮忙开发一个系统，实现XXX功能。这时，B公司考虑的不仅是自己的业务过程：产品，设计，测试，开发，运维等怎么配合去做这件事情，而且还要考虑A公司的业务过程：病人挂号，就诊，住院，缴费结算等等。</p><h4 id="什么是业务逻辑？"><a href="#什么是业务逻辑？" class="headerlink" title="什么是业务逻辑？"></a>什么是业务逻辑？</h4><p>业务逻辑是系统架构中体现核心价值的部分，典型的三层结构模型中（如下图），介于表现层和数据访问层之间。</p><p>通俗的讲，业务逻辑就是个“怎么做”的问题，是产品的灵魂，它的关注点主要集中在业务流程的实现，业务规则的定制等与业务过程相关的。</p><h4 id="细说业务逻辑"><a href="#细说业务逻辑" class="headerlink" title="细说业务逻辑"></a>细说业务逻辑</h4><ol><li>业务实体</li><li>业务实体完整性约束</li><li>业务流程(业务过程)</li><li>业务规则</li></ol><h5 id="业务实体"><a href="#业务实体" class="headerlink" title="业务实体"></a>业务实体</h5><p>关键业务相关的动态的概念性对象</p><p>比如，电商企业，业务过程中的买家，商品，就是业务实体，软件实现过程中先将其抽象为概念模型(通常用E-R图表示)，然后对其建立结构模型，展现在计算机世界中，可能表现为买家表中或商品表中的一条表记录。</p><h5 id="实体业务完整性约束（Validation）"><a href="#实体业务完整性约束（Validation）" class="headerlink" title="实体业务完整性约束（Validation）"></a>实体业务完整性约束（Validation）</h5><p>业务实体完整性约束简单说就是对业务实体的约束，比如对商品实体，商品编号必须唯一</p><p>注：关于业务实体和业务实体完整性约束，可以看下数据库的相关资料，理解会比较深刻一点</p><h5 id="业务流程-业务过程"><a href="#业务流程-业务过程" class="headerlink" title="业务流程(业务过程)"></a>业务流程(业务过程)</h5><p>如果把产品比作一个人，那么这个业务过程就是产品的骨架。产品只有实现了这个流程，用户才能用它来实现业务。</p><p>例子：购物网站为例子</p><p>购买者登录网站 -&gt; 浏览商品 -&gt;下单 -&gt; 结算 -&gt; 确认收货 -&gt; 评价</p><p>例：以学校申请助学金为例子</p><p>学生登陆终端 -&gt; 提交申请 -&gt; 班主任审批 -&gt; 分院负责人审批 -&gt; 学工处审批 -&gt; 资领处审批</p><h5 id="业务规则"><a href="#业务规则" class="headerlink" title="业务规则"></a>业务规则</h5><p>定义1：业务规则是与特定行业中的特定业务功能有关的决策逻辑的表示形式</p><p>定义2：业务规则是对业务的某些方面进行定义和约束的声明</p><p>例1：以学校申请助学金为例子</p><p>“申请助学金的学生必须是贫困生”，这便是一条业务规则，对申请助学金的做了一个前提申明。</p><p>那又为何说是决策逻辑呢？程序中，实现经常会这样：</p><p>if 学生 is not 平困生</p><p>then 拒绝申请</p><p>例2：以购物网站为例子</p><p>未登录顾客点击购买商品时，提示先登录</p><p>例3：以购物网站为例子</p><p>买家下单后，通知卖家商品被拍下。</p><p>从上面的例子可以看出，业务规则它不会告诉你怎么做，仅是“决策”，告诉你要做什么，而不会告诉你怎么做。比如，上面的贫困生的例子，它不会告诉你怎么申请贫困生，但是会告诉你要去申请贫困生，再如，上面购物网站的例子，它约定说要去通知卖家，但是不会告诉你怎么通知卖家(通过邮件、电话、短信还是其它？？)</p><h4 id="小知识点："><a href="#小知识点：" class="headerlink" title="小知识点："></a>小知识点：</h4><p>一般做系统，都避免不了数据验证，完整性约束是业务逻辑的一部分，按理应该放在业务层。但是实际不然，不提倡在“表示层的服务端”放置过多完整性验证。因为，表示层的职责应该仅仅是接收数据并传递给业务层，不应对数据是否合法负责。过多的数据验证，不但令表示层代码臃肿，而且使得表示层职责变得不明确。</p><p>可以在“表示层的服务端”放置一些简单的验证，如空值验证，两次输入密码是否一致等，但业务关系紧密的验证，最好放在业务层，甚至有些验证只能在业务层验证，如“当前用户名不能与已有用户名重复”，这种验证需要访问持久化数据，需要由业务层完成。</p><p>这里之所以强调“表示层的服务端”，是因为一般在B/S系统中，都会在JavaScript里加入一些基本的数据验证，如空值检查，格式正则匹配 等。这主要是为了减轻服务器负担，将大多数显然包含不合法数据的请求拒绝掉，而不发给服务端验证。当然，因为可能会出现JS被屏蔽或黑客恶意攻击行为，所以，所有验证不论JS中是否验证过，服务端（可能是表示层的服务端部分或业务层）一定要再进行验证。</p><h4 id="难题：什么是业务逻辑？"><a href="#难题：什么是业务逻辑？" class="headerlink" title="难题：什么是业务逻辑？"></a>难题：<strong>什么是业务逻辑</strong>？</h4><p>业务是指一个实体单元向另一个实体单元提供的服务。<br>逻辑是指根据已有的信息推出合理的结论的规律。</p><p>业务逻辑是指一个实体单元为了向另一个实体单元提供服务，应该具备的规则与流程。</p><p>就像你家的规矩–“吃饭前必须洗手”“有客人来要起立”“睡觉前各自说晚安”-就是业务逻辑的生活化实例。</p><h4 id="软件系统架构一般分为三个层次"><a href="#软件系统架构一般分为三个层次" class="headerlink" title="软件系统架构一般分为三个层次"></a>软件系统架构一般分为三个层次</h4><p>表示层、业务逻辑层和数据访问层：</p><ul><li>表示层：负责界面和交互；</li><li>业务逻辑层：负责定义业务逻辑（规则、工作流、数据完整性等），接收来自表示层的数据请求，逻辑判断后，向数据访问层提交请求，并传递数据访问结果，业务逻辑层实际上是一个中间件，起着承上启下的重要作用；</li><li>数据访问层：负责数据读取。</li></ul><h4 id="业务逻辑的内容包括四部分"><a href="#业务逻辑的内容包括四部分" class="headerlink" title="业务逻辑的内容包括四部分"></a>业务逻辑的内容包括四部分</h4><ul><li>领域实体：定义了业务中的对象，对象有属性和行为；</li><li>业务规则：定义了需要完成一个动作，必须满足的条件；</li><li>数据完整性：某些数据不可少；</li><li>工作流：定义了领域实体之间的交互关系。</li></ul><h4 id="以大毛网购裤子为例"><a href="#以大毛网购裤子为例" class="headerlink" title="以大毛网购裤子为例"></a>以大毛网购裤子为例</h4><ul><li>领域实体：大毛、资金账户、订单、裤子、发货单</li><li>业务规则：大毛点击购买就会生成订单，但必须付了钱，才会发货，生成发货单。</li><li>数据完整性：淘宝网下订单必须登录账号，没有账号就不能成功购买。</li><li>工作流：搜索裤子-找到合意裤子-下单购买-付账-收货。</li></ul><ol><li><p>业务逻辑：搜索“裤子”-找到合意裤子-下单-必须登录账号-结算-付账-收货。</p><p>当当必须登录账号才能下单成功，亚马逊就不需要，今天发现淘宝也不需要登录账号就能购买商品了，所以每个网站的规则的不同，就形成了不同的业务逻辑，业务逻辑不仅仅包括规则，还包括实体、数据完整性、工作流。如图：</p></li><li><p>业务逻辑图：业务逻辑也需要画图，叫做业务逻辑图，它跟业务流程图有什么区别呢？</p><p>业务流（工作流）是业务逻辑的一部分，它定义了对象之间的交互关系，但不涉及到规则的制定，数据的完整性方面。<br>其实，我们平常画的业务流程图多数是业务逻辑图。</p></li><li><p>表示层</p><p>分层是为了实现“<a href="http://baike.baidu.com/view/292136.htm" target="_blank" rel="noopener">高内聚</a>，低耦合”。采用“分而治之”的思想，把问题划分开来各个解决，易于控制，延展和分配资源。</p></li></ol><p>所谓的三层开发就是将系统的整个业务应用划分为<a href="http://baike.baidu.com/view/239615.htm" target="_blank" rel="noopener">表示层</a>，业务逻辑层和数据访问层，这样有利于系统的开发、维护、部署和扩展。</p><p>分层是为了实现“<a href="http://baike.baidu.com/view/292136.htm" target="_blank" rel="noopener">高内聚</a>，低耦合”。采用“分而治之”的思想，把问题划分开来各个解决，易于控制，延展和分配资源。</p><p>业务逻辑层负责系统领域业务的处理，负责逻辑性数据的生成、处理及转换。对所输入的逻辑性数据的正确性及有效性负责，但对输出的逻辑性数 据及用户性数据的正确性不负责，对数据的呈现样式不负责。</p><p>JavaEE三层架构MVC，把视图控制器模型分开来</p><p>那么在这里业务逻辑就是M。</p><p>但是什么样的算是业务逻辑如：上传一个文件，上传代码算是一个业务逻辑吗？</p><p>数据库操作增加时需要判断，和一些其它这算业务逻辑吗？（我觉得算）</p><p>但是hibernate又提供了一个离线查询对象（DetachedCriter），提供这个接口的意思我想是在外面处理业务逻辑。</p><p>但是三层架构不是独立的吗？互相不干涉吗？在service层出现sql，hql，criter不是又把dao与service连在一起了吗？</p><p>DTO（VO），POJO，BO这些是什么，POJO对应数据库，BO对应业务逻辑，DTO对应页面的传输与显示。</p><p>业务逻辑就是处理数据的逻辑啦。</p><h4 id="后台代码分三层"><a href="#后台代码分三层" class="headerlink" title="后台代码分三层"></a>后台代码分三层</h4><ul><li>action(controller) service DAO （这里的三层不是MVC）</li></ul><p>比如 我得到用户名 但是在存入数据库的时候 用户名字段应该是前台的用户名加上当前日期拼成的字符串</p><ul><li><p>action或者controller层是第一层 一般是用来及接受数据并且做数据的非空啊 格式是否正确的验证</p><p>如用户名是否为空 是不是安全字符串之类的</p></li><li><p>service层一般是用来做一个业务逻辑的实现</p><p>这时候 userName = userName + new Date();</p></li><li><p>DAO层 就是与数据库交互层</p><p>也就是读写数据库 将逻辑层得到的新的userName插入到数据库</p></li></ul><p>MVC和三层架构并没有可比性</p><p>三层架构是指将程序分为数据访问、业务处理、界面三个层次，是软件整体架构</p><p>MVC是仅仅是界面架构，也就是它其实只是三层架构的界面部分</p><ul><li>M是指实体模型或者实体模型的一个代理，而非领域模型</li><li>C是指控制器，仅仅是做转向，不应该包含任何业务逻辑</li><li>V就是视图</li></ul><p>至于那些个什么什么O，都是实体在不同层的映射。另外值得一提的是，MVC在一些小的程序中也经常被当做软件整体架构，那个时候M往往就是实体模型了，但是这种时候，V就对M产生了直接引用，也就是界面对实体产生依赖，这是很不好的（但小程序问题不大），此时可以尝试使用MVP模式解耦。至于业务，看你怎么定义领域模型了，一般像上传文件这种操作并不会牵扯企业的业务，那就不应该当做一个业务，但如果这个上传是在工作流或者一些特殊处理中，则有可能上升到业务。怎么做，要看具体问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0114.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;作为一名程序猿，需要懂产品，不懂产品的程序猿不是好程序猿猴。而业务逻辑是软件产品的支柱，所以，要懂产品，就必须懂业务逻辑。&lt;br&gt;
    
    </summary>
    
      <category term="Document" scheme="http://www.iskei.cn/categories/Document/"/>
    
    
      <category term="Document" scheme="http://www.iskei.cn/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>数据库设计规范</title>
    <link href="http://www.iskei.cn/posts/13930.html"/>
    <id>http://www.iskei.cn/posts/13930.html</id>
    <published>2018-02-06T07:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.033Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0113.jpg" alt="image"></p><p>数据库设计规范<br><a id="more"></a></p><h2 id="1-基本原则"><a href="#1-基本原则" class="headerlink" title="1     基本原则"></a>1     基本原则</h2><p>Ø  产品根据业务功能的不同，划分为多个相对独立的业务子系统。对应于一个业务子系统，数据库中都应建立一个用户，该业务子系统中的数据、业务规则都在此用户下的对象中描述。如：数据库中建立MES用户，来对应制造执行系统，制造执行系统中的数据、业务逻辑都由MES用户下的对象（如表、包及存储过程等等）来描述，系统管理由APPSYS用户来管理；</p><p>Ø  除两个公共用户APPS，APPVIEW外，其他用户下的所有对象，都需要在APPS中建立同义词，并对APPS授权；</p><p>Ø  除两个公共用户APPS，APPVIEW外，其他用户下的所有的视图， 都需要在APPVIEW中建立对应的表； </p><p>Ø  系统管理部分的表，需用设置多语言；</p><h2 id="2-表及字段规范"><a href="#2-表及字段规范" class="headerlink" title="2     表及字段规范"></a>2     表及字段规范</h2><h2 id="2-1-表命名约定"><a href="#2-1-表命名约定" class="headerlink" title="2.1  表命名约定"></a>2.1  表命名约定</h2><p>数据库中以描述表中内容的英文为表名，前面以该表所属的用户+下划线作为开头，具体遵循以下规则：</p><p>用户 + ‘_’+ 英文，如MDS_Route表示MDS用户下的工艺路线表，</p><p>英文如果是两个单词及以上，单词之间尽量用下划线分割。如果英文有公共熟知的缩写，可以使用缩写。如MES_Control_Dept表示MES用户下的受控部门表</p><h2 id="2-2-表字段约定"><a href="#2-2-表字段约定" class="headerlink" title="2.2  表字段约定"></a>2.2  表字段约定</h2><ol><li>每个表中必须包含7个字段：</li></ol><table><thead><tr><th>字段名称及作用</th><th>字段代码</th><th>类型</th></tr></thead><tbody><tr><td>表ID，作为表主键</td><td>ID</td><td>Number(16,0)</td></tr><tr><td>创建人</td><td>CREATED_BY</td><td>Number(16,0)</td></tr><tr><td>创建时间</td><td>CREATION_DATE</td><td>Date</td></tr><tr><td>最后修改人</td><td>LAST_UPDATED_BY</td><td>Number(16,0)</td></tr><tr><td>最后修改时间</td><td>LAST_UPDATE_DATE</td><td>Date</td></tr><tr><td>最后更新IP</td><td>LAST_UPDATE_IP</td><td>VARCHAR2(20)</td></tr><tr><td>版本</td><td>VERSION</td><td>Number(16,0)</td></tr></tbody></table><ol><li><p>主键字段：每个表必须以ID作为主键，通过建立UniqueKey来实现实际的主键组合。如部门表中，将部门代码建立为Unique Key</p></li><li><p>外键字段：系统不显式建立外键，表中的字段如果需要引用其他表的主键，尽量以其他表的表名+ ‘_ID’作为此字段名，并在注释中显式说明，如：员工表中引用部门表的主键的字段，命名为HR_Dept_ID；如果表中有两个及以上的字段需要引用同一个表的主键，需要在此规则的基础上，前面添加用途，如两个字段都引用部门表主键，制造部门命名为：Manufact_HR_Dept_ID，使用部门命名为：User_HR_Dept_ID。</p></li><li><p>字段注释：每个字段必须有注释，说明该字段的含义，值的来源。对于标识，状态之类的字段，必须注明其每个可能的取值，及每个取值的含义。如对于标识字段，注释需要标明：Y-是，N-否，说明此字段的取值为Y和N，含义分别为是和否。</p></li><li><p>字段数据类型：对于标识，状态字段，一般取值为一个字符（Varchar2(1)），如果状态较多，可以设置为2个字符（Varchar2(2)）；对于数量等字段，设置为数值（Number(20，7)）；对于代码、名称、说明、描述的字段，一般为Varchar2，字符的多少可根据需要设置。 </p></li><li><p>字段取值：对于涉及到是和否的标识字段，取值必须为Y/N，但 “是否显示”字段除外，其取值为0/1；对于状态字段，一般取值为0，1，2……,对应不同的状态。</p></li></ol><h2 id="3-序列规范"><a href="#3-序列规范" class="headerlink" title="3     序列规范"></a>3     序列规范</h2><p>每个表都必须有一个主键序列，作为主键ID的值.</p><ol><li><p>命名：表名 + ‘_S’， 如：MDS_Route_S;</p></li><li><p>取值：初始值，最小值，步长均为1，最大值为999999999</p></li></ol><p>在后来的数据库设计中，不再需要为每个表创建一个序列，用以产生主键ID。表主键的数据类型变为Varchar2(32)，用Oracle函数SYS_GUID()产生，具体方法如下：</p><p>Select SYS_GUID() into v_tableId from dual;</p><h2 id="4-包及存储过程规范"><a href="#4-包及存储过程规范" class="headerlink" title="4     包及存储过程规范"></a>4     包及存储过程规范</h2><p>对于业务系统的逻辑处理，需要建立包及存储过程来实现。如果多个存储过程实现同一业务，尽量封装在包中。</p><ol><li><p>包的命名：与表的命名规则类似，但需要以’ _P’结尾，如：MES_Route_P</p></li><li><p>存储过程命名规范：命名尽量表示此存储过程功能；</p></li><li><p>存储过程参数规范：最后两个参数必须为返回值，并遵循以下约定：</p></li></ol><p>倒数第二个参数为Number，表示执行的结果，成功/失败等等 ，其取值为Codecollection里的Success/Fail/Warn</p><p>倒数第一个参数为Varchar2, 表示执行中出现的错误或警告信息</p><p>传入的参数中如果需要有日期或时间，需要设置为字符串</p><ol><li>存储过程中必须包含的处理：</li></ol><p>如果传入的参数中如日期或时间字符串，必须进行转换的异常处理，转换时，使用Codecollection里的Date_Format_Date/Date_Format_Datetime来进行时间格式设置</p><p>插入数据时，7个必须的字段必须赋值，其中主键使用相应的序列取值，Version设为1，涉及到人员的，使用Get_Session_Info里的Get_User_Id，涉及到时间的，使用当前系统时间，IP使用Get_Session_Info里的Get_Logon_Ip</p><p>更新数据时，最后修改人，最后修改时间，最后更新IP，版本 必须更新，取值同样来源于Get_Session_Info，Version 增1</p><p>异常处理：如果执行成功，返回值中Return_Int 设为Codecollection里的 Success</p><p>如果捕捉到异常，需要返回Codecollection里的Fail/Warn，并设置Return_String的内容</p><p>需要读取配置文件中的设置时，使用Sys_Profile_Option_p的Get_Profile_Option_Value方法，来取得值。如：末工序的最大号</p><ol><li>存储过程的参数、变量命名规范</li></ol><p><strong>传入参数</strong>：命名以 i_开头，譬如i_Sys_Function_Tl_Id，具体参照appsys用户下sys_form_p包中的存储过程Delete_Form_Tl_Id的定义，</p><p>PROCEDURE<br>Delete_Form_Tl_Id(i_Sys_Form_Tl_Id VARCHAR2,<br>o_Return_Int     OUT INT,<br>o_Return_String  OUT VARCHAR2);</p><p><strong>返回值</strong>：命名以o_开头，目前只支持两个返回值，o_Return_Int和o_Return_String，分别表示执行的结果及消息；</p><p><strong>变量</strong>：命名以v_开头，如果变量是用来存储数据库表中某列的数值，其数据类型一般会采取tableName.columnName%TYPE的定义方式，如v_Sys_Function_IdSys_Function.Id%TYPE;</p><ol><li>存储过程及函数的注释</li></ol><p>对存储过程和函数的注释主要包括功能描述、编写人、编写日期信息，一般写在包体中存储过程或函数的名称前面。如appsys用户下sys_form_p包中的存储过程Delete_Form_Tl_Id：</p><p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p><ul><li><p>功能描述:级联删除form_with_tl信息</p></li><li><p>编写人：刘岩</p></li><li><p>编写日期: 2008-04-22</p><p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p><p>PROCEDURE Delete_Form_Tl_Id(i_Sys_Form_Tl_IdVARCHAR2,</p></li></ul><p>​                              o_Return_Int     OUT INT,</p><p>​                             o_Return_String  OUT VARCHAR2) IS</p><p>​    v_Sys_Form_Id Sys_Form.Id%TYPE;</p><p>  BEGIN</p><p>​    SELECT Sys_Form_Id</p><p>​      INTO v_Sys_Form_Id</p><p>​      FROM Sys_Form_Tl</p><p>​     WHERE Id = i_Sys_Form_Tl_Id;</p><p>​    Delete_Form(v_Sys_Form_Id, o_Return_Int,o_Return_String);</p><p>  EXCEPTION</p><p>​    WHEN OTHERS THEN</p><p>​      o_Return_Int    := Codecollection.Fail;</p><p>​      o_Return_String := ‘删除表单失败：’ || SQLERRM;</p><p>  END Delete_Form_Tl_Id;</p><h2 id="5-视图规范"><a href="#5-视图规范" class="headerlink" title="5     视图规范"></a>5     视图规范</h2><p>每个表必须建立视图，命名规范为：</p><p>如果没有多语言，则视图名为：表名 + ‘_V’</p><p>如果有多语言，则视图名为：表名 + ‘_VL’</p><p>如果在视图的基础上再建立视图，命名规范为：视图名 +‘V’</p><p>如果视图带数据权限，则视图名为：表名 + ‘_VS’</p><h2 id="6-常用包及用途"><a href="#6-常用包及用途" class="headerlink" title="6     常用包及用途"></a>6     常用包及用途</h2><p>APPSYS.Codecollection:常量设置</p><p>APPSYS.Sys_Profile_Option_p:读取配置文件</p><p>APPSYS.Get_Session_Info:获取当前用户信息</p><p>APPS.Gen_Appview：根据视图在APPVIEW中建立表</p><p>APPS.Sys_Auto_Code_p：管理编码</p><p>APPS.Sys_Util_p：将字符串表示的计算式格式化，计算值</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0113.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;数据库设计规范&lt;br&gt;
    
    </summary>
    
      <category term="Document" scheme="http://www.iskei.cn/categories/Document/"/>
    
    
      <category term="Document" scheme="http://www.iskei.cn/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>软件工程文档汇编</title>
    <link href="http://www.iskei.cn/posts/54252.html"/>
    <id>http://www.iskei.cn/posts/54252.html</id>
    <published>2018-02-05T07:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.033Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0112.jpg" alt="image"></p><p>实用软件工程文档汇编<br><a id="more"></a></p><h2 id="1《立项建议书》"><a href="#1《立项建议书》" class="headerlink" title="1《立项建议书》"></a><a href="">1</a>《立项建议书》</h2><p><a href="">《立项建议书》编写参考指南</a></p><p>1．引言（Introduction）</p><p>1.1 目的（Purpose）</p><p>本文档是软件立项书，目的是代替可行性分析。</p><p>1.2 范围（Scope）</p><p>本文档只适应于软件立项。</p><p>1.3 术语定义（Terms Glossary）</p><p>对软件组织内部和外部有关的行业术语、专用名词进行定义。</p><p>[1] ……</p><p>[2] ……</p><p>1.4 参考资料（References）</p><p>对书写该立项书所用到的有关资料进行说明。</p><p>[1] ……</p><p>[2] ……</p><p>1.5 相关文档（Related Documents）</p><p>当该文档变更时，可能对其他文档产生影响，受影响的文档叫做相关文档，需将它们一一列出。</p><p>[1] ……</p><p>[2] ……</p><p>1.6 版本更新记录（Version Updated Record）</p><p>任何一次版本创建或维护更新，都要追加一条记录。一个版本创建只有一次，但对它的维护更新可能有多次。大版本升级一次，定义为创建一次，如V1.0到V2.0。而V1.0到V1.1，只是维护更新一次。版本更新记录格式，如表3-2所示。</p><p>表3-2  版本更新记录</p><table><thead><tr><th>版本号</th><th>创建者</th><th>创建日期</th><th>维护者</th><th>维护日期</th><th>维护纪要</th></tr></thead><tbody><tr><td>V1.0</td><td>王大林</td><td>2001/01/03</td><td>—</td><td>—</td><td>—</td></tr><tr><td>V1.0.1</td><td>—</td><td>—</td><td>王小林</td><td>2001/02/10</td><td>网络版功能维护</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>2．项目概述及架构（Project Summary and Framework）</p><p>2.1 项目概述（Project Summary）</p><p>宏观上说明该项目是什么、能干什么、要求干得怎么样。</p><p>2.2 项目架构（Project Framework）</p><p>宏观上描述该项目的架构：单机结构、C/S结构、B/S结构。并说明结构具体详细的运行平台：硬件的要求、操作系统的要求、数据库管理系统的要求、对外接口的要求。</p><p>3．客户群分析（Client Analysis）</p><p>3.1 客户群定位（Client Orientation）</p><p>单机结构、C/S结构、B/S结构对应哪三种客户群，每种客户群的数量、素质、市场前景等。</p><p>3.2 当前客户群分析（Current Client Analysis）</p><p>当前客户群是指已签订合作协议或将要签订合作协议的客户群，分析他们的数量、素质、市场前景等。</p><p>3.3 潜在客户群分析（Latency Client Analysis）</p><p>潜在客户群是指将来可能发展的客户群，分析他们的数量、素质、市场前景等。</p><p>4．项目功能（Project Function）</p><p>4.1 单机版功能（Stand-alone Function）</p><p>单机版功能，如表3-3所示。</p><p>表3-3  单机版功能</p><table><thead><tr><th>编号</th><th>功能名称</th><th>功能描述</th><th>输入内容</th><th>输出内容</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td></tr></tbody></table><p>4.2 网络版功能（Network Function）</p><p>网络版功能，如表3-4所示。</p><p>表3-4  网络版功能</p><table><thead><tr><th>编号</th><th>功能名称</th><th>功能描述</th><th>输入内容</th><th>输出内容</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td></tr></tbody></table><p>4.3 互联网络版功能（Internet Function）</p><p>互联网络版功能，如表3-5所示。</p><p>表3-5  互联网络版功能</p><table><thead><tr><th>编号</th><th>功能名称</th><th>功能描述</th><th>输入内容</th><th>输出内容</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td></tr></tbody></table><p>5．项目性能（Project Performance）</p><p>5.1 响应时间（Response Time）</p><p>单机结构（包括主机多用户结构，即H/T结构）、C/S结构、B/S结构三种架构的终端数量，要求响应时间小于0.XX秒。</p><p>5.2 处理速度（Disposal Speed）</p><p>C/S结构、B/S结构两种架构的后台结算方式，结算速度分析。</p><p>5.3 最大终端负载（The Highest Terminal Load）</p><p>C/S结构、B/S结构两种架构的并发处理最大终端（用户）负载数量分析。</p><p>以上性能要求，最好也用列表的形式给出。</p><p>6．项目接口（Project Interface）</p><p>6.1 金融接口（Finance Interface）</p><p>金融接口列表，如表3-6所示。</p><p>表3-6  金融接口列表</p><table><thead><tr><th>编号</th><th>接口名称</th><th>接口规范</th><th>接口标准</th><th>入口参数</th><th>出口参数</th><th>传输频率</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>6.2 政府接口（Government Interface）</p><p>政府接口列表，如表3-7所示。</p><p>表3-7  政府接口列表</p><table><thead><tr><th>编号</th><th>接口名称</th><th>接口规范</th><th>接口标准</th><th>入口参数</th><th>出口参数</th><th>传输频率</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>6.3 互联网接口（Internet Interface）</p><p>互联网接口列表，如表3-8所示。</p><p>表3-8  互联网接口列表</p><table><thead><tr><th>编号</th><th>接口名称</th><th>接口规范</th><th>接口标准</th><th>入口参数</th><th>出口参数</th><th>传输频率</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>7．投入产出分析（Analysis of the Devotion and the Output）</p><p>7.1 人力资源投入（Manpower Devotion）</p><p>人力资源投入，如表3-9所示。</p><p>表3-9  人力资源投入</p><table><thead><tr><th>阶段名称</th><th>需求岗位</th><th>需求人数</th><th>工作量（人/月）</th><th>到岗日期</th></tr></thead><tbody><tr><td>需求分析</td><td>分析师</td><td></td><td></td><td></td></tr><tr><td>概要设计</td><td>设计师</td><td></td><td></td><td></td></tr><tr><td>详细设计</td><td>设计师 / 高级程序员</td><td></td><td></td><td></td></tr><tr><td>编码</td><td>程序员</td><td></td><td></td><td></td></tr><tr><td>测试</td><td>测试员</td><td></td><td></td><td></td></tr><tr><td>包装与发布</td><td>包装师</td><td></td><td></td><td></td></tr><tr><td>总人数：</td><td>总工作量（人/月）：</td><td></td><td></td></tr></tbody></table><p>7.2 设备资源投入（Facility Devotion）</p><p>设备资源投入，如表3-10所示。</p><p>表3-10  设备资源投入</p><table><thead><tr><th>设备名称</th><th>规格型号</th><th>数量</th><th>单价（元）</th><th>金额（元）</th><th>到位日期</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>7.3 其他经费资源投入（Other Outlay Devotion）</p><p>其他经费资源投入，如表3-11所示。</p><p>表3-11  其他经费资源投入</p><table><thead><tr><th>开支项目</th><th>开支金额（元）</th><th>支付日期</th><th>支付方式（现金/支票）</th><th>备注</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>项目总投入（人力费用+设备费用+其他经费资源投入）经费（元）：</td><td></td><td></td><td></td></tr></tbody></table><p>7.4 产出分析（Output Analysis）</p><p>产出分析，如表3-12所示。</p><p>表3-12  产 出分 析</p><table><thead><tr><th></th><th>单机版单价（元）</th><th>单机版  数量</th><th>C/S版单价（元）</th><th>C/S版数量</th><th>B/S版单价（元）</th><th>B/S版数量</th><th>年产出合计金额（元）</th></tr></thead><tbody><tr><td>第1年</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第2年</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第3年</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>8．开发计划（Development Scheme）</p><p>8.1 进度计划（Plan Scheme）</p><p>开发进度计划，如表3-13所示。</p><p>表3-13  进 度计 划</p><table><thead><tr><th>阶段名称</th><th>需求分析</th><th>概要设计</th><th>详细设计</th><th>编码</th><th>测试</th><th>包装与发布</th></tr></thead><tbody><tr><td>第1周进度</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第2周进度</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第3周进度</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第4周进度</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第5周进度</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>……</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>8.2 评审计划（Review Scheme）</p><p>各里程碑的评审计划，如表3-14所示。</p><p>表3-14  评 审计 划</p><table><thead><tr><th>阶段名称</th><th>评审日期</th><th>评审地点</th><th>主持人</th><th>参加人</th><th>应交文档</th></tr></thead><tbody><tr><td>需求分析</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>概要设计</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>详细设计</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>测试报告</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>包装</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>9．案例分析（Cases Analysis）</p><p>案例分析包括成功案例和失败案例分析。</p><p>9.1 国外案例分析（Cases Analysis in Foreign Countries）</p><p>案例1：……</p><p>案例2：……</p><p>9.2 国内案例分析（Cases Analysis in China）</p><p>案例1：……</p><p>案例2：……</p><p>10．风险分析（Risk Analysis）</p><p>10.1 需求风险（Risk of Requirement）</p><p>指项目组对用户需求获取的途径和能力有何风险，用户主动配合需求的程度。</p><p>10.2 政策风险（Risk of Policy）</p><p>指国家政策、行业政策、企业内部政策的变化对项目将会产生有利或不利的影响。</p><p>10.3 资源风险（Risk of Resource）</p><p>指开发和运行所需资源的风险程度。</p><p>10.4 技术风险（Risk of Technology）</p><p>指项目组采用新技术的风险程度。如最新开发工具的风险程度、最新设计思想的风险程度。</p><p>10.5 技能风险（Risk of Skill）</p><p>指项目组成员掌握新技术的风险程度。</p><h2 id="2《软件项目投标书》"><a href="#2《软件项目投标书》" class="headerlink" title="2《软件项目投标书》"></a><a href="">2</a>《软件项目投标书》</h2><p><a href="">表</a>3-15  《软件项目投标书》编写参考指南</p><table><thead><tr><th>序号</th><th>章节名称</th><th>章节内容</th></tr></thead><tbody><tr><td>1</td><td>项目概况</td><td>按照招标书的内容，陈述项目概况</td></tr><tr><td>2</td><td>总体解决方案</td><td>按照招标书的要求，提出项目的总体解决方案：    网络结构总体方案    系统软件配置方案    应用软件设计方案    系统实施方案</td></tr><tr><td>3</td><td>项目功能、性能和接口描述</td><td>应用软件的具体功能点列表    应用软件的具体性能点列表    应用软件的具体接口列表</td></tr></tbody></table><p>续表</p><table><thead><tr><th>序号</th><th>章节名称</th><th>章节内容</th></tr></thead><tbody><tr><td>4</td><td>项目工期、进度和经费估算</td><td>项目工期（单位：人月）估算    项目进度估算：需求、设计、编程、测试、验收的时间表    项目经费（单位：人民币元）估算</td></tr><tr><td>5</td><td>项目质量管理控制</td><td>质量标准    质量管理控制方法    项目开发和管理的组织结构及人员配备</td></tr><tr><td>6</td><td>附录</td><td>附录1：本软件公司的特点与强项简介    附录2：本软件公司的成功案例    附录3：本软件公司的资质证明材料</td></tr></tbody></table><h2 id="3《软件产品开发任务书》"><a href="#3《软件产品开发任务书》" class="headerlink" title="3《软件产品开发任务书》"></a><a href="">3</a>《软件产品开发任务书》</h2><p><a href="">《软件产品开发任务书》正文样本</a></p><p>任务书名称：大型商业MIS产品开发任务书。</p><p>下达日期：1999/04/01。</p><p>发出部门：XX公司研发中心。</p><p>接受部门：研发中心商业软件部。</p><p>1．目标</p><p>（1）做成商业MIS产品，其产品化程度要求很高。因此，一切信息都要规范化、标准化、代码化。保证在产品实施时，其客户化工作只需录入代码和修改代码，绝对不允许修改数据结构和表结构；</p><p>（2）配合市场销售部门、全国各地的分支机构和产品代理商，第一年开拓市场3~5个客户，第二年占领10% 的商业MIS市场。</p><p>2．功能模块划分及要求</p><p>大型商业MIS软件产品拟分为以下6个功能模块，要求每个功能模块具有高内聚、低耦合、信息隐蔽的性质，如表3-16所示。</p><p>表3-16  大型商业MIS产品的6个功能模块</p><table><thead><tr><th>序号</th><th>模块名称</th><th>功能要求</th></tr></thead><tbody><tr><td>1</td><td>商业物流配送中心管理</td><td>商业物流采购、配送</td></tr><tr><td>2</td><td>大型商场（大型连锁超市）管理</td><td>商品零售</td></tr><tr><td>3</td><td>便利店（小型连锁超市）管理</td><td>商品零售</td></tr><tr><td>4</td><td>远程数据交换管理</td><td>点对点通信</td></tr><tr><td>5</td><td>电子商务模块</td><td>网上订货、销售</td></tr><tr><td>6</td><td>商业类库管理</td><td>基础类库、商业类库、构件库管理</td></tr></tbody></table><p>3．功能模块详述</p><p>大型商业MIS软件，从组织结构上来说包括三个层次：</p><p>（1）物流配送中心</p><p>（2）大型商场（大型连锁超市）</p><p>（3）便利店（小型连锁超市）</p><p>作为一个完整的商业MIS系统来说，物流配送中心与大型商场（大型连锁超市）之间会发生物流、资金流、信息流的关系；大型商场（大型连锁超市）与便利店（小型连锁超市）之间也会发生物流、资金流、信息流的关系；而物流配送中心与便利店（小型连锁超市）之间没有任何关联。若将这三个模块分开来看，它们又可以各自独立成为一个单独的小型商业系统来使用。实际上，本大型商业MIS系统完成后，可以对功能模块进行组合或拆分，使其成为如下5个不同的小型商业MIS系统，供用户选择：</p><p>（1）物流配送中心 ＋ 大型商场（大型连锁超市）＋ 便利店（小型连锁超市）的完整的商业MIS软件。</p><p>（2）物流配送中心 ＋ 大型商场（大型连锁超市）的商业MIS软件。</p><p>（3）大型商场（大型连锁超市）＋ 便利店（小型连锁超市）的商业MIS系统。</p><p>（4）物流配送中心MIS系统。</p><p>（5）大型商场的商业MIS系统。</p><p>作为本软件的第一层，物流配送中心可以具有多个配送仓库，它根据大型商场（大型连锁超市）的需要以及各个仓库库存情况，向供应商订货，进行货物采购；并根据订货的情况进行配货，组织运输工具进行发货；期间，还伴随着向供应商付款、索取发票，以及向客户催款、开出发票等等。大型商场（大型连锁超市）作为本软件的第二层，除了要进行本商场的各种业务管理外，还要向上级物流配送中心订货、付款、索取发票，向下级便利店（小型连锁超市）送货，收取钱款等等。便利店（小型连锁超市）作为本软件的第三层，一要进行本商场的各种业务管理；二要根据库存情况，向大型商场（大型连锁超市）要货，并定期将销售金额上交给大型商场（大型连锁超市）。</p><p>考虑到目前有些商场，已经有了其他的商业管理软件，虽然软件还有不完善的地方，但已经购买前台POS机。为了给客户节省开支，有效地将前台POS机利用好，所以，本系统的前台销售软件就要做两个版本：Windows 版本与DOS 版本。</p><p>由于配送中心与大型商场（大型连锁超市）之间、大型商场（大型连锁超市）与便利店（小型连锁超市）之间在物理位置上有一定的距离，所以，它们之间的网络连接也是一个需要重视的大问题。本系统考虑采用两种解决方案：一是采用DDN专线（或光缆），本方案数据传输速度快，性能高，程序设计、实现都很简单，但用户每月都要支付价格不低的线路费用，这种方案比较适合那些经济实力比较雄厚的用户；二是采用电话线，用X.25通信协议，此方案数据传输速度稍慢，但也能满足用户需要，程序设计和实现要复杂许多，用户每月支付的线路费用将大幅度下降。</p><p>随着计算机网络技术的飞速发展，电子商务在流通领域的应用也越来越多。本MIS系统也准备在电子商务方面有所扩展，条件允许，可以实现网上订货、网上销售，甚至网上货币支付。</p><p>作为一个软件企业，应该不断地提取、积累自己的软件资源。不同开发平台的开发规范、商业类库、应用框架、构件、中间件等都是十分重要的软件资源，是软件公司的基础建设。因此，在设计、编码之前，要制订相应的开发规范，要组织开发、设计、管理一些类库和构件库。</p><p>软件产品是软件公司的财富来源，而软件的有效加密是保护公司产品、产权的有效手段，更是保障公司效益的有效途径。所以，还要考虑软件加密算法设计。</p><p>4．功能模块任务分配</p><p>根据研发中心商业软件部目前的人员情况，本系统的项目经理由商业软件部副经理亲自担任，负责整个系统的规划、设计、协调与实施；商业软件部主任工程师担任产品经理，负责项目的整体需求、数据库设计与Alpha测试。整个项目分为4个任务组，各个任务组组长在项目实施阶段，承担小项目经理职责。4个任务组的人数及开发任务，如表3-17所示。</p><p>表3-17  任务组的人数及开发任务</p><table><thead><tr><th>任务组</th><th>人数</th><th>具体开发任务</th></tr></thead><tbody><tr><td>第1任务组</td><td>4</td><td>1）POS机模块改造    2）利用X.25协议进行远程数据交换    3）电子商务模块</td></tr><tr><td>第2任务组</td><td>6</td><td>物流配送中心管理模块。本模块的主要功能包括：货物的采购管理，配送中心的库存管理，货物的销售管理三大部分    1）货物的采购管理包括：供应商管理，采购计划管理，订货管理，货物验收管理，退货管理，应付账款管理，应收发票管理，往来账管理等    2）库存管理包括：货位管理，入库管理，出库管理，盘库管理等    3）销售管理包括：客户管理，销售定单管理，配货管理，运输工具管理，发货管理，退货管理，应收账款管理，应付发票管理，往来账管理等</td></tr><tr><td>第3任务组</td><td>6</td><td>1）全局数据库设计    2）商业管理模块（包括大型商场与便利店的管理）。本模块的主要功能包括：货物的采购管理，退货管理（退给供应商），价格管理，库存管理，销售管理，前台销售管理，退货管理（客户退货管理），应付、应收账款管理，发票管理，送货管理（给便利店送货），收款管理（便利店上交金额）等等</td></tr><tr><td>第4任务组</td><td>2</td><td>1）PowerBuilder 开发规范    2）PowerBuilder 类库建设    3）构件的提取和构件库的管理    4）产品的加密处理    5）安装盘的制作</td></tr></tbody></table><p>5．数据库与开发工具的选择</p><p>考虑到数据库的性能与价格比，数据库首选Sybase，其次是MS SQL Server。由于这两个数据库的天然联系，使得两个版本的程序设计的差异将十分微小。数据库设计工具采用PowerDesigner，程序开发工具选择为PowerBuilder 。某些PowerBuilder 不宜实现的功能，可由 VC++ 去完成。文档制作工具为Office 和PowerDesigner。</p><p>6．开发进度计划</p><p>研发中心商业软件部现有18人进入了本项目组。根据以往的实际工作经验，下面列出研发进度，如表3-18所示。</p><p>表3-18  进度计划（1999/04/01-1999/10/15）</p><table><thead><tr><th>阶段名称</th><th>需求分析</th><th>概要设计</th><th>详细设计</th><th>编码</th><th>测试</th><th>包装</th><th>发布</th><th></th></tr></thead><tbody><tr><td>第1周进度</td><td>需求培训</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第2周进度</td><td>需求获取</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第3周进度</td><td>需求获取</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第4周进度</td><td>需求获取</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第5周进度</td><td>需求确认</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第6周进度</td><td></td><td>概要设计</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第7周进度</td><td></td><td>概要设计</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第8周进度</td><td></td><td>概要设计</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第9周进度</td><td></td><td></td><td>详细设计</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第10周进度</td><td></td><td></td><td>详细设计</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第11周进度</td><td></td><td></td><td>详细设计</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第12周进度</td><td></td><td></td><td>详细设计</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第13周进度</td><td></td><td></td><td></td><td>编码</td><td></td><td></td><td></td><td></td></tr><tr><td>第14周进度</td><td></td><td></td><td></td><td>编码</td><td></td><td></td><td></td><td></td></tr><tr><td>第15周进度</td><td></td><td></td><td></td><td>编码</td><td></td><td></td><td></td><td></td></tr><tr><td>第16周进度</td><td></td><td></td><td></td><td>编码</td><td></td><td></td><td></td><td></td></tr><tr><td>第17周进度</td><td></td><td></td><td></td><td>编码</td><td></td><td></td><td></td><td></td></tr><tr><td>第18周进度</td><td></td><td></td><td></td><td>编码</td><td></td><td></td><td></td><td></td></tr><tr><td>第19周进度</td><td></td><td></td><td></td><td>编码</td><td></td><td></td><td></td><td></td></tr><tr><td>第20周进度</td><td></td><td></td><td></td><td></td><td>Alpha测试</td><td></td><td></td><td></td></tr><tr><td>第21周进度</td><td></td><td></td><td></td><td></td><td>Alpha测试</td><td></td><td></td><td></td></tr><tr><td>第22周进度</td><td></td><td></td><td></td><td></td><td>Alpha测试</td><td></td><td></td><td></td></tr><tr><td>第23周进度</td><td></td><td></td><td></td><td></td><td>Alpha测试</td><td></td><td></td><td></td></tr><tr><td>第24周进度</td><td></td><td></td><td></td><td></td><td>Beta测试</td><td></td><td></td><td></td></tr><tr><td>第25周进度</td><td></td><td></td><td></td><td></td><td>Beta测试</td><td></td><td></td><td></td></tr><tr><td>第26周进度</td><td></td><td></td><td></td><td></td><td></td><td>包装</td><td></td><td></td></tr><tr><td>第27周进度</td><td></td><td></td><td></td><td></td><td></td><td></td><td>发布</td><td></td></tr><tr><td>第28周进度</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>机动</td></tr></tbody></table><p>7．评审计划</p><p>各里程碑的评审计划，如表3-19所示。</p><p>表3-19  里程碑评审计划</p><table><thead><tr><th>阶段名称</th><th>评审日期</th><th>评审地点</th><th>主持人</th><th>参加人</th><th>应交文档</th></tr></thead><tbody><tr><td>需求分析</td><td>1999/05/05</td><td>公司第一会议室</td><td>部门经理</td><td>项目组成员</td><td>用户需求报告/需求规格说明书</td></tr><tr><td>概要设计</td><td>1999/05/26</td><td>公司第一会议室</td><td>部门经理</td><td>项目组成员</td><td>概要设计说明书</td></tr><tr><td>详细设计</td><td>1999/06/25</td><td>公司第一会议室</td><td>项目经理</td><td>项目组成员</td><td>详细设计说明书</td></tr><tr><td>Alpha测试</td><td>1999/09/12</td><td>公司第一会议室</td><td>项目经理</td><td>测试人员</td><td>Alpha测试报告</td></tr><tr><td>Beta测试</td><td>1999/09/26</td><td>客户单位</td><td>项目经理</td><td>客户代表</td><td>Beta测试报告</td></tr><tr><td>包装</td><td>1999/09/31</td><td>公司第一会议室</td><td>部门经理</td><td>销售人员</td><td>包装光盘，用户指南，广告材料</td></tr></tbody></table><p>附件：《商业MIS立项建议书》，此处省略。</p><h2 id="4《软件开发计划书》"><a href="#4《软件开发计划书》" class="headerlink" title="4《软件开发计划书》"></a><a href="">4</a>《软件开发计划书》</h2><p><a href="">《软件开发计划书》编写参考指南</a></p><p>1．引言（Introduction）</p><p>1.1 目的（Purpose）</p><p>本章提供整个软件开发计划的综述。主要是确定以下内容：</p><p>（1）软件生存周期的选取及裁剪。</p><p>（2）软件规范、方法和标准的选择。</p><p>（3）软件工作产品的规模估计。</p><p>（4）软件工作量和成本的估计。</p><p>（5）软件进度表的制定。</p><p>（6）软件风险的估计。</p><p>（7）软件项目培训计划。</p><p>1.2 范围（Scope）</p><p>说明该软件开发计划的范围，简要描述软件开发计划的内容。一般而言，对于一个较大的软件项目（工期6个人月以上），计划书包括如下内容：</p><p>（1）软件规模估计</p><p>（2）工作模块计划</p><p>（3）人力资源计划</p><p>（4）其他资源计划</p><p>（5）进度安排计划</p><p>（6）配置管理计划（可单独做一个计划）</p><p>（7）质量保证计划（可单独做一个计划）</p><p>1.3 术语定义（Terms Glossary）</p><p>将该软件开发计划中的术语、缩写词进行定义。包括用户应用领域与计算机领域的术语与缩写词等。例如：</p><p>[1] 软件相关组：指软件配置管理组、文档支持组、测试组。</p><p>[2] 软件质量保证组：指计划和实施软件质量保证活动的人员的集合。</p><p>1.4 参考资料（References）</p><p>说明该软件开发计划使用的参考资料，如项目的用户需求报告、商务合同、用户领域的资料等，每一个文件、文献要有标题、索引号或文件号，发布或发表日期以及出版单位。</p><p>[1] ……</p><p>[2] ……</p><p>1.5 相关文档（Related Documents）</p><p>当该文档变更时，可能对其他文档产生影响，受影响的文档叫相关文档，需将它们列出。</p><p>[1] ……</p><p>[2] ……</p><p>1.6 版本更新记录（Version Updated Record）</p><p>版本更新记录格式，如表4-8所示。</p><p>表4-8  版本更新记录</p><table><thead><tr><th>版本号</th><th>创建者</th><th>创建日期</th><th>维护者</th><th>维护日期</th><th>维护纪要</th></tr></thead><tbody><tr><td>V1.0</td><td>王大林</td><td>2001/02/06</td><td>—</td><td>—</td><td>—</td></tr><tr><td>V1.0.1</td><td>—</td><td>—</td><td>王小林</td><td>2001/02/25</td><td>成本估算维护</td></tr><tr><td>……</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><a href=""> </a></p><p>2．项目概述（Project Summary）</p><p><a href="">2.1 </a>项目的目的（Project Purpose）</p><p>说明该软件项目的目的。</p><p><a href="">2.2 </a>项目的范围（Project Scope）</p><p>本章的内容，主要参照《立项建议书》/《合同》与《用户需求报告》中相关章节，简要描述该软件项目的实现范围：</p><p>（1）主要功能点列表</p><p>（2）主要性能点列表</p><p>（3）主要接口列表</p><p>（4）本软件项目与其他软件项目之间的关系</p><p>（5）项目实施方面的限制等内容</p><p><a href="">2.3 </a>项目的使用对象（Project Reader）</p><p>在本章节中，要识别出顾客与最终用户，对顾客与最终用户的情况要有简单描述，如最终用户的教育水平、技术水平及本系统的使用频度等。</p><p><a href="">3</a>．项目组织（ProjectOrganization）</p><p>项目组织是为开发项目而组建的队伍。建议以框图的方式表示项目的组织结构，并对每一组织的负责人和职责加以说明。可能的项目组织单元，如：</p><p>（1）项目管理组</p><p>（2）质量保证组</p><p>（3）配置管理组</p><p>（4）软件工程组</p><p>（5）测试组</p><p>（6）需求管理组</p><p>各组织说明如下：</p><p>（1）项目管理组，执行SPP和SPTO过程，对项目实施负全部责任。</p><p>（2）质量保证组，执行SQA过程，负责项目过程与产品的质量控制和报告。</p><p>（3）配置管理组，执行SCM过程，负责项目产品的版本、配置管理以及配置库状态报告。</p><p>（4）软件工程组，执行软件项目工程过程，负责项目产品的开发和维护工作。</p><p>（5）测试组，执行软件项目测试过程，负责项目产品的测试。</p><p>（6）需求管理组，负责对需求基线和需求变更进行管理。</p><p><a href="">4</a>．软件生存周期（Software Life Cycle）</p><p>本章节记录项目策划生存期定义的工作结果，需要描述的主要内容：</p><p>（1）项目生存期框图</p><p>（2）项目生存期说明</p><p><a href="">5</a>．规范、方法和标准（Criterion，Means，Standard）</p><p>本章节中需要描述采用的供开发和维护软件用的规范、方法和标准。</p><p><a href="">6</a>．任务与工作产品（Task and Work Products）</p><p>项目任务和工作产品，是指根据项目生存期阶段划分的任务，和相应阶段的工作产品。记录项目生存期各阶段确定的需重点控制的阶段任务和工作产品。建议以表格的形式，列出生存期各阶段的任务和工作产品。项目包含的任务，如：</p><p>（1）需求分析</p><p>（2）系统设计</p><p>（3）系统实现</p><p>（4）测试</p><p>（5）产品交付</p><p>（6）产品维护</p><p>项目可能包含的产品，如：</p><p>（1）需求分析说明书</p><p>（2）规格分析说明书</p><p>（3）系统设计说明书</p><p>（4）源代码</p><p>（5）各种测试报告</p><p>（6）用户手册</p><p>（7）软件问题维护记录</p><p><a href="">7</a>．工作产品、任务规模、工作量估计（Estimates of Work Product，Task Size and Workload）</p><p>项目规模估算是为了确定项目所需的人工。需要描述的主要内容有：</p><p>（1）对软件工作产品规模估计依据的简要描述。</p><p>（2）每种任务和工作产品规模估计的结果。</p><p>（3）规模估算的结果，建议用《任务规模和工作量估算表》的形式列出。</p><p><a href="">8</a>．成本估计（Estimates of Costs）</p><p>成本估计，是指对项目完成过程中耗费的人力、物力、财力资源的估算。成本估计应按类别进行估算，可能的成本估算类别，如：</p><p>（1）直接人工</p><p>（2）直接费用</p><p>（3）间接成本</p><p>（4）制造费用</p><p>（5）管理费用</p><p>（6）不可预见费用</p><p><a href="">9</a>．关键计算机资源计划（Critical Computer Resource Plan）</p><p>项目的关键计算机资源计划，是指系统在开发环境、测试环境、及用户目标环境中，对关键计算机资源，如计算机存储能力、计算机处理器速度、通信通道容量、服务器处理能力等的估计，使之能满足软件开发、测试、运行的要求。</p><p><a href="">10</a>．软件项目进度计划（Software Project Schedule）</p><p>件项目进度计划，是对项目的进度、人员工作分工所做的计划，此计划依据上述各章的估算和分析结果，计划方式建议采用表格的形式。若采用工具制定项目计划，应将工具生成的图表作为项目计划的附件。本章节中需要描述的主要内容有：</p><p>（1）软件项目每个阶段的进度时间表</p><p>（2）设定的里程碑</p><p>（3）评审时间</p><p>（4）缓冲时间</p><p>11．配置管理计划（可单独做一个计划）（Configuration ManagementPlanning）</p><p>本书单独作为一章论述。</p><p>12．质量保证计划（可单独做一个计划）（Software Quality AssurancePlanning）</p><p>本书单独作为一章论述。</p><p><a href="">13</a>．风险分析（Risks Analysis）</p><p>项目风险分析，是指对可能发生的将会对项目按预期时间、资源和预算完成产生重大影响的事件的分析包括：</p><p>（1）被识别出的重大风险事件：政策风险、技术风险、技能风险等。</p><p>（2）易发生重大风险事件的高风险区域：用户需求、设计、测试、运行平台等。</p><p>（3）重大风险事件的级别：功能不全、性能不稳、迅速受限制等。</p><p>（4）拟采取的预防措施：增加投入、纠错、延时等。</p><p>（5）风险事件发生后建议采用的处理措施：更改计划、降低难度系数等。</p><p><a href="">14</a>．设备工具计划（Equipment and Tools Planning）</p><p>项目设备工具计划，是根据项目的工作指派及进度确定项目所需要的设备和工具，以确保设备工具在任务执行前到位，保证项目任务的顺利执行，在本计划中应包含以下几方面的内容：</p><p>（1）所需的设备</p><p>（2）基本的要求</p><p>（3）应到位的时间</p><p><a href="">15</a>．培训计划（Training Planning）</p><p>项目的培训计划，应根据项目的特点和项目组成员技能情况，制定出项目组成员所需的培训内容，培训计划中应包含以下几方面：</p><p>（1）培训内容</p><p>（2）培训时间</p><p>（3）教员</p><p>（4）接受培训的人员</p><p>（5）培训目的（应达到的效果）</p><p><a href="">16</a>．项目评审（Project Reviews）</p><p>项目评审，是对项目策划过程所做的定期性评审。其内容可分为：</p><p>（1）评审点</p><p>（2）评审周期</p><p>（3）评审层次</p><p>（4）评审条款和措施</p><p>（5）管理评审活动中提交的工作产品（列出被评审的工作产品）</p><p><a href="">17</a>．度量（Measurement）</p><p>度量是按规定在项目进行过程中，需要采集的度量数据，以便量化地反映项目的进展情况，为管理者提供对项目进展的适当的可视性，同时度量数据是项目过程改善的数据基础。应规定项目度量值的记录人（一般为项目经理或其指定人员）、记录时间（一般以定期评审为基础）和记录的数据。常用的度量数据如：</p><p>（1）项目过程的评审次数</p><p>（2）项目计划修改次数</p><p>（3）项目各阶段的人员投入（各阶段投入的人月数）</p><p>（4）各类任务耗用时间统计（如设计、编码、测试、文档编写等）</p><p>（5）工作产品统计（如文档字数、功能点数、用况数、源代码行数等）</p><h2 id="5《用户需求报告》"><a href="#5《用户需求报告》" class="headerlink" title="5《用户需求报告》"></a><a href="">5</a>《用户需求报告》</h2><p><a href="">《用户需求报告》编写参考指南</a></p><p>1．概述（Summary）</p><p>本文档是进行需求规格定义、项目策划、概要设计的基础，也是用户进行验收的依据。</p><p>1.1 用户简介（User Synopsis）</p><p>在本章节中要将用户的基本情况描述清楚，以便于分析人员划定系统范围，进行关于功能、进度、成本、性能等方面的平衡决策。</p><p>对于产品开发类项目，需要在此将该产品定义的用户群的特点描述清楚。</p><p>1.2 项目的目的与目标（Purpose and Aim of Project）</p><p>项目的目的是对开发本系统意图的总概括。项目的目标是将目的细化后的具体描述。项目目标应是明确的、可度量的、可以达到的, 项目的范围应能确保项目的目标可以达到。</p><p>对于项目的目标可以逐步细化，以便与系统的需求建立对应关系，检查系统的功能是否覆盖了系统目标。</p><p>1.3 术语定义（Terms Glossary）</p><p>将该用户需求报告中的术语、缩写进行定义, 包括用户应用领域与计算机领域的术语与缩写等。</p><p>1.4 参考资料（References）</p><p>说明该用户需求报告使用的参考资料，如：</p><p>[1] 商务合同</p><p>[2] 招标书</p><p>[3] 用户领域的资料</p><p>[4] 用户需求调查表</p><p>[5] 参照的标准</p><p>每一个文件、文献要有标题、或文件号，发布或发表日期以及出版单位。</p><p>1.5 相关文档（Related Documents）</p><p>说明用户需求报告的变更，以及可能受变更影响的其他相关文档，如：</p><p>[1] 项目开发计划</p><p>[2] 需求规格说明书</p><p>1.6 版本更新信息（Version Updated Record）</p><p>版本更新记录格式，如表5-11所示。</p><p>表5-11  版本更新记录</p><table><thead><tr><th>版本号</th><th>创建者</th><th>创建日期</th><th>维护者</th><th>维护日期</th><th>维护纪要</th></tr></thead><tbody><tr><td>V1.0</td><td>王大林</td><td>2001/02/18</td><td>—</td><td>—</td><td>—</td></tr><tr><td>V1.0.1</td><td>—</td><td>—</td><td>王小林</td><td>2001/02/26</td><td>账本格式维护</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>2．现有系统描述（System in Existence）</p><p>2.1 组织结构与职责（Organizing Framework and Function）</p><p>将用户的组织结构逐层详细描述，建议采用树状的组织结构图进行表达，每个部门的职责也应进行简单的描述。组织结构是用户企业业务流程与信息的载体，对分析人员理解企业的业务、确定系统范围很有帮助。取得用户的组织结构，是需求获取步骤中的工作任务之一。</p><p>2.2 岗位定义（Role Definition）</p><p>用户环境中的企业岗位和组织结构一样，也是分析人员理解企业业务的基础，是需求获取的工作任务，同时也是分析人员提取对象的基础。每个岗位的职责可以进行详细的描述，建议采用表格的形式，如表5-12所示。</p><p>表5-12  岗 位定 义</p><table><thead><tr><th>编  号</th><th>岗  位</th><th>所在部门</th><th>职    责</th><th>相关的业务</th></tr></thead><tbody><tr><td>1008</td><td>采购员</td><td>业务部</td><td>商品采购、合同签订、供应商选择</td><td>进货、合同管理</td></tr><tr><td>1009</td><td>……</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p>对用户岗位的识别，也包括使用了计算机系统后的系统管理人员岗位。</p><p>2.3 作业流程（Busywork Flow）</p><p>企业的作业流程，首先要有一个总的业务流程图，将企业中各种业务之间的关系描述出来，然后对每种业务进行详细的描述，使业务流程与部门职责结合起来。详细业务流程图可以采用直式业务流程图、Use case图、程序流程图加上文字说明。</p><p>图形可以将流程描述得很清楚，但是还要附加一些文字说明，如关于业务发生的频率、意外事故的处理、高峰期的业务频率等，不能在流程图中描述的内容，需要用文字进行详细描述。</p><p>2.4 单据、账本、报表（Bill of Document，Account and Report）</p><p>现行系统中用户正在使用的正式的或非正式的单据、账本、报表等可以收集起来，并进行穷举、分类、归纳。单据、账本、报表是用户系统中信息的载体，是进行系统需求分析的基础，无论采用哪种分析方法，这都是必不可少的信息源。</p><p>2.4.1 单据（Bill of Document）</p><p>单据的格式可用表格描述，如表5-13所示。</p><p>表5-13  单据的描述格式</p><table><thead><tr><th>单据名称</th><th></th></tr></thead><tbody><tr><td>用途</td><td></td></tr><tr><td>使用单位</td><td></td></tr><tr><td>制作单位</td><td></td></tr><tr><td>频率</td><td></td></tr><tr><td>高峰时数据流量</td></tr></tbody></table><p>各数据项的详细说明如下：</p><table><thead><tr><th>序号</th><th>数据项中文名</th><th>数据项英文名</th><th>类型、长度、精度</th><th>数据项的取值范围</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td></tr></tbody></table><p>2.4.2 账本（Account）</p><p>因为账本上的数据是统计数据，所以一个账本一般对应一张中间表，账本的格式可用表格描述，如表5-14所示。</p><p>表5-14  账本的描述格式</p><table><thead><tr><th>账本名称</th><th></th></tr></thead><tbody><tr><td>用途</td><td></td></tr><tr><td>使用单位</td><td></td></tr><tr><td>制作单位</td><td></td></tr><tr><td>频率</td><td></td></tr><tr><td>高峰时数据流量</td></tr></tbody></table><p>各数据项的详细说明如下：</p><table><thead><tr><th>序号</th><th>数据项中文名</th><th>数据项英文名</th><th>数据项类型、长度、精度</th><th>数据来源</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td></tr></tbody></table><p>2.4.3 报表（Report）</p><p>因为报表上的数据是统计数据，所以一个报表一般对应一张中间表，报表的格式可用表格描述，如表5-15所示。</p><p>2.5 存在的问题（Existent Question）</p><p>在现行的系统中，决策层、管理层、操作层各存在哪些方面的问题需要计算机来解决，尤其是决策层、管理层这些问题中包含了用户的需求与期望，有些问题是新系统可以解决的，有些问题则不是。</p><p>表5-15  报表的描述格式</p><table><thead><tr><th>报表名称</th><th></th></tr></thead><tbody><tr><td>用途</td><td></td></tr><tr><td>使用单位</td><td></td></tr><tr><td>制作单位</td><td></td></tr><tr><td>频率</td><td></td></tr><tr><td>高峰时数据流量</td></tr></tbody></table><p>各数据项的详细说明如下：</p><table><thead><tr><th>序号</th><th>数据项中文名</th><th>数据项英文名</th><th>数据项类型、长度、精度</th><th>数据来源</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td></tr></tbody></table><p>2.6 可能的变化（Possible Change）</p><p>对于现行的系统，将来可能会有哪些变化，需要在此描述。企业中的变化是永恒的，系统分析员需要描述哪些变化可能引起系统范围变更。</p><p>3．目标系统功能需求（Function of Target System）</p><p>3.1 功能需求分析（Function Analysis）</p><p>决策层、管理层、操作层各有哪些具体功能要求。</p><p>3.2 功能需求点列表（Function List）</p><p>在功能需求分析完成后，要详细列出用户需求功能点列表，提供给后续设计、编程、测试中使用，更是为了用户测试验收中使用。功能需求点列表的格式，如表5-16所示。</p><p>表5-16  功能需求点列表</p><table><thead><tr><th>编    号</th><th>功  能 名  称</th><th>使  用 部  门</th><th>使  用 岗  位</th><th>功  能 描  述</th><th>输  入 内  容</th><th>输  出 内  容</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>4．目标系统性能需求（Performance of Target System）</p><p>4.1 时间要求（Time Request）</p><p>如：</p><p>（1）响应时间，如查询的最长等待时间。</p><p>（2）更新处理时间，如记账的最长时间。</p><p>（3）数据的转换和传送时间，如远程数据传输的时间要求。</p><p>（4）解题时间。</p><p>4.2 空间要求（Space Request）</p><p>如：</p><p>（1）支持的终端数。</p><p>（2）支持的并行操作的使用者数。</p><p>（3）处理的文件和记录数。</p><p>（4）表和文件的大小规模（要按可预见的增长，对数据及其分量的存储要求做出估算）。</p><p>（5）处理任务的数量。</p><p>（6）在正常情况下和峰值工作条件下，在一定时间周期中要处理的数据总数。</p><p>（7）对输入和输出数据的精度要求。</p><p>（8）对处理和传输过程中的精度要求。</p><p>4.3 性能需求点列表（Performance List）</p><p>详细列出用户性能点列表，提供给后续分析、设计、编程、测试中使用，更是为了用户测试验收中使用。需求性能点列表的格式，如表5-17所示。</p><p>表5-17  性能需求点列表</p><table><thead><tr><th>编  号</th><th>性能名称</th><th>使用部门</th><th>使用岗位</th><th>性能描述</th><th>输入内容</th><th>输出内容</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>5．目标系统界面与接口需求（Interface of Target System）</p><p>5.1 界面需求（Interphase Requirement）</p><p>界面的原则要求，如方便、简洁、美观、一致等。整个系统的界面风格定义，某些功能模块的特殊的界面要求。</p><p>（1）输入设备：键盘、鼠标、条码扫描器、扫描仪等；</p><p>（2）输出设备：显示器、打印机、光盘刻录机、磁带机、音箱等；</p><p>（3）显示风格：图形界面、字符界面、IE界面等；</p><p>（4）显示方式：1024<em>768、640</em>480等；</p><p>（5）输出格式：显示布局、打印格式等。</p><p>5.2 接口需求（Interface Requirement）</p><p>与其他系统的接口，如监控系统、控制系统、银行结算系统、税控系统、财务系统、政府网络系统及其他系统等。</p><p>（1）与系统特殊外设的接口，如CT机、磁共振、柜员机（ATM）、IC卡、盘点机等。</p><p>（2）与中间件的接口，要列出接口规范、入口参数、出口参数、传输频率等。</p><p>应在此列举出所有的外部接口名称、接口标准、规范。外部接口列表，如表5-18所示。</p><p>表5-18  外部接口需求点列表</p><table><thead><tr><th>编  号</th><th>接口名称</th><th>接口规范</th><th>接口标准</th><th>入口参数</th><th>出口参数</th><th>传输频率</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>6．目标系统其他需求（Other Requirements of Target System）</p><p>6.1 安全性（Security）</p><p>6.2 可靠性（Dependability）</p><p>6.3 灵活性（Agility）</p><p>6.4 特殊需求（Special requirements）</p><p>如：</p><p>（1）进度需求：系统的阶段进度要求。</p><p>（2）资金需求：投资额度。</p><p>（3）运行环境需求：平台、体系结构、设备要求。</p><p>（4）培训需求：用户对培训的需求，是否提供多媒体教学光盘。</p><p>（5）推广需求：推广的要求，如在上百个远程部门推广该系统，是否要有推广的支持软件。</p><p>7．目标系统假设与约束条件（Suppose and Restriction ofTarget System）</p><p>假设与约定条件是对预计的系统风险的描述, 如：</p><p>（1）法律、法规和政策方面的限制。</p><p>（2）硬件、软件、运行环境和开发环境方面的条件和限制。</p><p>（3）可利用的信息和资源。</p><p>（4）系统投入使用的最晚日期。</p><p>（5）需求中的风险分析：技术风险、技能风险、时间风险、资源风险。</p><h2 id="6《需求规格说明书》"><a href="#6《需求规格说明书》" class="headerlink" title="6《需求规格说明书》"></a><a href="">6</a>《需求规格说明书》</h2><p><a href="">《需求规格说明书》编写参考指南</a></p><p>1．概述（Summary）</p><p>本文档是进行项目策划、概要设计和详细设计的基础，也是软件企业测试部门进行内部验收测试的依据。</p><p>1.1 用户简介（User Synopsis）</p><p>在本章节中要将用户的基本情况描述清楚，以便于分析人员划定系统范围，进行功能、进度、成本、性能等方面的平衡决策。</p><p>对于产品开发类项目，需要在此将该产品定义的用户群的特点描述清楚。</p><p>1.2 项目的目的与目标（Purpose and Aim of Project）</p><p>项目的目的是对开发本系统的意图的总概括。项目的目标是将目的细化后的具体描述。项目目标应是明确的、可度量的、可以达到的, 项目的范围应能确保项目的目标可以达到。</p><p>对于项目的目标可以逐步细化，以便与系统的需求建立对应关系，检查系统的功能是否覆盖了系统的目标。</p><p>1.3 术语定义（Terms Glossary）</p><p>将该需求规格说明书中的术语、缩写进行定义, 包括用户应用领域与计算机领域的术语与缩写等。</p><p>1.4 参考资料（References）</p><p>说明该用户需求报告使用的参考资料，如：</p><p>[1] 商务合同</p><p>[2] 招标书</p><p>[3] 用户领域的资料</p><p>[4] 用户需求调查表</p><p>[5] 用户需求报告</p><p>[6] 参照的标准</p><p>每一个文件、文献要有标题、或文件号，发布或发表日期以及出版单位。</p><p>1.5 相关文档（Related Documents）</p><p>[1] 项目开发计划</p><p>[2] 概要设计说明书</p><p>[3] 详细设计说明书</p><p>1.6 版本更新信息（Version Updated Record）</p><p>版本更新记录格式，如表5-19所示。</p><p>表5-19  版本更新记录</p><table><thead><tr><th>版本号</th><th>创建者</th><th>创建日期</th><th>维护者</th><th>维护日期</th><th>维护纪要</th></tr></thead><tbody><tr><td>V1.0</td><td>王大林</td><td>2001/03/03</td><td>—</td><td>—</td><td>—</td></tr><tr><td>V1.0.1</td><td>—</td><td>—</td><td>王小林</td><td>2001/03/16</td><td>业务模型维护</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>2．目标系统描述（System in Target）</p><p>2.1 组织结构与职责（Organizing Framework and Function）</p><p>将目标系统的组织结构逐层详细描述，建议采用树状的组织结构图进行表达，每个部门的职责也应进行简单的描述。组织结构是用户企业业务流程与信息的载体，对分析人员理解企业的业务、确定系统范围很有帮助。取得用户的组织结构，是需求获取步骤中的工作任务之一。</p><p>2.2 角色定义（Role Definition）</p><p>用户环境中的企业角色，和组织机构一样，也是分析人员理解企业业务的基础，是需求获取的工作任务，同时也是分析人员提取对象的基础。每个角色的授权可以进行详细的描述，建议采用表格的形式，如表5-20所示。</p><p>表5-20  角 色定 义</p><table><thead><tr><th>编号</th><th>角色</th><th>所在部门</th><th>职    责</th><th>相关的业务</th></tr></thead><tbody><tr><td>1008</td><td>采购员</td><td>业务部</td><td>商品采购、合同签订、供应商选择</td><td>进货、合同管理</td></tr><tr><td>1009</td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p>对用户角色的识别也包括使用了计算机系统后的系统管理人员。</p><p>2.3 作业流程（业务模型）（Busywork Flow）（Operation Model）</p><p>目标系统的作业流程是对现有系统作业流程的重组、优化与改进。企业的作业流程首先要有一个总的业务流程图，将企业中各种业务之间的关系描述出来，然后对每种业务进行详细的描述，使业务流程与部门职责结合起来。详细业务流程图可以采用直式业务流程图、Use case图、其他示意图的形式。</p><p>图形可以将流程描述得很清楚，但是还要附加一些文字说明，如关于业务发生的频率、意外事故的处理、高峰期的业务频率等，不能在流程图中描述的内容，需要用文字进行详细描述。</p><p>2.4 单据、账本、报表（Bill of Document，Account and Report）</p><p>目标系统中用户将使用的正式单据、账本、报表等，并进行穷举、分类、归纳。单据、账本、报表是用户系统中信息的载体，是进行系统需求分析的基础，无论采用哪种分析方法，这都是必不可少的信息源。</p><p>2.4.1 单据（Bill of Document）</p><p>因为单据上的数据是原始数据，所以一种单据一般对应一个实体，一个实体一般对应一张基本表。单据的格式可用表格描述，如表5-21所示。</p><p>表5-21  单据的描述格式</p><table><thead><tr><th>单据名称</th><th></th></tr></thead><tbody><tr><td>用途</td><td></td></tr><tr><td>使用单位</td><td></td></tr><tr><td>制作单位</td><td></td></tr><tr><td>频率</td><td></td></tr><tr><td>高峰时数据流量</td></tr></tbody></table><p>各数据项的详细说明如下：</p><table><thead><tr><th>属性中文名</th><th>属性英文名</th><th>属性类型、长度、精度</th><th>属性的值域</th><th>Pk/fk</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p>2.4.2 账本（Account）</p><p>因为账本上的数据是统计数据，所以一个账本一般对应一张中间表，账本的格式可用表格描述，如表5-22所示。</p><p>表5-22  账本的描述格式</p><table><thead><tr><th>账本名称</th><th></th></tr></thead><tbody><tr><td>用途</td><td></td></tr><tr><td>使用单位</td><td></td></tr><tr><td>制作单位</td><td></td></tr><tr><td>频率</td><td></td></tr><tr><td>高峰时数据流量</td></tr></tbody></table><p>各数据项的详细说明如下：</p><table><thead><tr><th>序号</th><th>数据项中文名</th><th>数据项英文名</th><th>数据项类型、长度、精度</th><th>数据项算法</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td></tr></tbody></table><p>2.4.3 报表（Report）</p><p>因为报表上的数据是统计数据，所以一个报表一般对应一张中间表，报表的格式可用表格描述，如表5-23所示。</p><p>表5-23  报表的描述格式</p><table><thead><tr><th>报表名称</th><th></th></tr></thead><tbody><tr><td>用途</td><td></td></tr><tr><td>使用单位</td><td></td></tr><tr><td>制作单位</td><td></td></tr><tr><td>频率</td><td></td></tr><tr><td>高峰时数据流量</td></tr></tbody></table><p>各数据项的详细说明如下：</p><table><thead><tr><th>序号</th><th>数据项中文名</th><th>数据项英文名</th><th>数据项类型、长度、精度</th><th>数据项算法</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td></tr></tbody></table><p>2.5 可能的变化（Possible Change）</p><p>对于目标系统，将来可能会有哪些变化，需要在此描述。企业中的变化是永恒的，系统分析员需要描述哪些变化可能引起系统范围变更。</p><p>3．目标系统功能需求（Function of Target System）</p><p>3.1 功能需求分析（Function Analysis）</p><p>决策层、管理层、操作层各有哪些具体功能要求。</p><p>3.2 功能需求点列表（功能模型）（Function List）（Function Model）</p><p>在功能需求分析完成后，要详细列出用户需求功能点列表，提供给续设计、编程、测试中使用，更是为了用户测试验收中使用。需求功能点列表的格式，如表5-24所示。</p><p>表5-24  功能需求点列表</p><table><thead><tr><th>编号</th><th>功能名称</th><th>使用部门</th><th>使用岗位</th><th>功能描述</th><th>输入</th><th>系统响应</th><th>输出</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>4．目标系统性能需求（Performance of Target System）</p><p>4.1 时间要求（Time Request）</p><p>如：</p><p>（1）响应时间，如查询的最长等待时间。</p><p>（2）更新处理时间，如记账的最长时间。</p><p>（3）数据的转换和传送时间，如远程数据传输的时间要求。</p><p>（4）解题时间。</p><p>4.2 空间性能（Space Request）</p><p>如：</p><p>（1）支持的终端数。</p><p>（2）支持的并行操作的使用者数。</p><p>（3）处理的文件和记录数。</p><p>（4）表和文件的大小规模（要按可预见的增长，对数据及其分量的存储要求做出估算）。</p><p>（5）处理任务的数量。</p><p>（6）在正常情况下和峰值工作条件下，在一定时间周期中要处理的数据总数。</p><p>（7）对输入和输出数据的精度要求。</p><p>（8）对处理和传输过程中的精度要求。</p><p>4.3 性能需求点列表（性能模型）（Performance List）（Performance Model）</p><p>详细列出用户性能点列表，提供给后续分析、设计、编程、测试中使用，更是为了用户测试验收中使用。需求性能点列表的格式，如表5-25所示。</p><p>表5-25  性能需求点列表</p><table><thead><tr><th>编号</th><th>性能名称</th><th>使用部门</th><th>使用岗位</th><th>性能描述</th><th>输入</th><th>系统响应</th><th>输出</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>5．目标系统界面与接口需求（Interface of Target System）</p><p>5.1 界面需求（Interphase Requirement）</p><p>界面的原则要求，如方便、简洁、美观、一致等。整个系统的界面风格定义，某些功能模块的特殊的界面要求。</p><p>（1）输入设备：键盘、鼠标、条码扫描器、扫描仪等；</p><p>（2）输出设备：显示器、打印机、光盘刻录机、磁带机、音箱等；</p><p>（3）显示风格：图形界面、字符界面、IE界面等；</p><p>（4）显示方式：1024×768、640×480等；</p><p>（5）输出格式：显示布局、打印格式等。</p><p>5.2 接口需求点列表（接口模型）（Interface Requirement）（Interface Model）</p><p>（1）与其他系统的接口，如监控系统、控制系统、银行结算系统、税控系统、财务系统、政府网络系统及其他系统等。</p><p>（2）与系统特殊外设的接口，如CT机、磁共振、柜员机（ATM）、IC卡、盘点机等。</p><p>（3）与中间件的接口，要列出接口规范、入口参数、出口参数、传输频率等。</p><p>应在此列举出所有的外部接口名称、接口标准、规范。外部接口列表，如表5-26所示。</p><p>表5-26  接口需求点列表</p><table><thead><tr><th>编号</th><th>接口名称</th><th>接口规范</th><th>接口标准</th><th>入口参数</th><th>出口参数</th><th>传输频率</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>6．目标系统其他需求（Oher Requirement of Target System）</p><p>6.1 安全性（Security）</p><p>6.2 可靠性（Dependability）</p><p>6.3 灵活性（Agility）</p><p>6.4 特殊需求（Special Requirement）</p><p>如：</p><p>（1）进度需求：系统的阶段进度要求。</p><p>（2）资金需求：投资额度。</p><p>（3）运行环境需求：平台、体系结构、设备要求。</p><p>（4）培训需求：用户对培训的需求，是否提供多媒体教学光盘。</p><p>（5）推广需求：推广的要求，如在上百个远程的部门推广该系统，是否要有推广的支持软件。</p><p>7．目标系统假设与约束条件（Suppose and Restriction ofTarget System）</p><p>假设与约定条件是对预计的系统风险的描述,如：</p><p>（1）法律、法规和政策方面的限制。</p><p>（2）硬件、软件、运行环境和开发环境方面的条件和限制。</p><p>（3）可利用的信息和资源。</p><p>（4）系统投入使用的最晚时间。</p><p>（5）需求中的风险分析：技术风险、技能风险、时间风险、资源风险。</p><h2 id="7《需求报告-需求规格说明书评审记录表》"><a href="#7《需求报告-需求规格说明书评审记录表》" class="headerlink" title="7《需求报告 / 需求规格说明书评审记录表》"></a><a href="">7</a>《需求报告 / 需求规格说明书评审记录表》</h2><p>《用户需求报告 / 需求规格说明书评审记录表》</p><p>（Review Table of Requirements）</p><table><thead><tr><th>项目名称</th><th></th><th>项目经理</th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>评审阶段</td><td>用户需求报告/需求规格说明书</td><td>第    次评审</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>评审组组长</td><td></td><td>评审时间</td><td></td><td>评审地点</td><td></td><td></td><td></td></tr><tr><td>评审组成员</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>不符合项跟踪记录（Check list of noncompliance items）</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>不符合项名称</td><td>不符合项内容</td><td>限期改正时间</td><td>实际改正时间</td><td>测试合格时间</td><td>测试员签字</td><td>审计员签字</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>评审意见</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>评审结论</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>​              评审组长签字：                   评审组成员签字：</p><p>表5-28 《需求变更管理表》</p><p>（Modification Tableof Requirements）</p><table><thead><tr><th>项目名称</th><th></th><th>申请日期</th><th></th></tr></thead><tbody><tr><td>用户名称</td><td></td><td>审批日期</td><td></td></tr><tr><td>变更原因</td><td></td><td>实际变更日期</td><td></td></tr><tr><td>原来需求</td><td></td><td></td><td></td></tr><tr><td>变更内容</td><td></td><td></td><td></td></tr><tr><td>审批意见</td><td></td><td></td></tr></tbody></table><p>​                    申请人：                   审批人：</p><h2 id="8“图书馆信息系统”"><a href="#8“图书馆信息系统”" class="headerlink" title="8“图书馆信息系统”"></a><a href="">8</a>“图书馆信息系统”</h2><p><a href="">“图书馆信息系统”数据模型设计案例</a></p><p>“图书馆信息系统”的概念数据模型CDM（见图6-10）和物理数据模型PDM（见图6-11）分析。</p><p>首先，介绍一下在E-R图中实体的表示法，如图6-10所示。一个矩形框表示一个实体，框内第一部分（第一行）的文字表示该实体的名称，如“图书”。第二部分表示该实体的多个属性，每个属性占一行，如“图书号、书名、单价、作者”等。带下划线的属性为主关键字，即主键PK（或主码），如“图书号”。两个实体之间的关系，用一条连线表示。关系有三种：一对一关系，就是一条连线；一对多关系，多的一端是一个三叉线（ERwin工具中为一个黑色小圆球）；多对多关系，两端都是三叉线。连线的一端若有一个小圆圈，则表示非强制型的关系；连线的一端若有一个小十字架，则表示强制型的关系。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image002.png" alt="img"></p><p>图6-10  “图书馆信息系统”的概念数据模型CDM</p><p>系统的E-R图又称为系统的概念数据模型CDM，有了它以后，利用PowerDesigner工具，就能自动生成物理数据模型PDM。</p><p>首先分析“图书馆信息系统”的概念数据模型CDM，如图6-10所示。因为图书馆的主要功能不外乎两点，藏书与为读者服务。其他许多功能都是围绕这两项功能而展开的。所以“图书馆信息系统”的主要实体是“图书”和“读者”。</p><p>“图书”的属性有图书号、书名、作者、出版社、单价等，“读者”的属性有读者号、姓名、电话等。</p><p>由于一本图书可以被多个读者在不同时间借阅，一名读者又可以一次或多次借阅多本图书，所以该两个实体之间是多对多的关系。为了消除这个多对多关系，在两者之间插入第3个实体，该实体取名为“借还书”。“借还书”至少有两个属性：借书还书时间、借书还书标志。另外，它还有两个外键，图书号和读者号。当增加“借还书”这个实体之后，原来一个多对多的关系，现在变为两个一对多的关系：“图书”对“借还书”，“读者”对“借还书”。 “图书馆信息系统”中还有许多其他实体，它们都是围绕这3个主要实体及其关系而展开的。这3个实体是“图书馆信息系统”的核心。例如，“书库”和“单位”这两个实体，就是分别围绕“图书”和“读者”而展开的。“书库”表示图书存放在什么地方，以及该书是否借出，即该本书的架位号、架位地址，以及借出标志位的状态。由于一个架位号上可放多本书，所以“书库”和“图书”是一对多的关系。同样，“单位”表示读者在什么单位，即该读者的单位名称、单位地址和单位电话等，由于一个单位可有多个读者，所以“单位”和“读者”是一对多的关系。以上实体、属性、关系如图6-10所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image004.png" alt="img"></p><p>图6-11  “图书馆信息系统”的物理数据模型PDM</p><p>再来分析“图书馆信息系统”的物理数据模型PDM，如图6-11所示。此PDM是由CDM生成的。不难发现：在生成PDM的过程中，凡是CDM中的一对多的关系，主表中的主键PK都自动拷贝到子表中去，作为子表的外键FK，这就是数据库设计工具PowerDesigner的一项功能。该PDM比较整齐规范，那是因为在生成之后进行了手工调整。</p><h2 id="9《概要设计说明书》"><a href="#9《概要设计说明书》" class="headerlink" title="9《概要设计说明书》"></a><a href="">9</a>《概要设计说明书》</h2><p><a href="">《概要设计说明书》编写参考指南</a></p><p>1．导言（Introduction）</p><p>本章对该文档的目的、功能范围、术语、相关文档、参考资料、版本更新进行说明。</p><p><a href="">1.1</a>目的（Purpose）</p><p>本文档的目旨在推动软件工程的规范化，使设计人员遵循统一的概要设计书写规范，节省制作文档的时间，降低系统实现的风险，做到系统设计资料的规范性与全面性，以利于系统的实现、测试、维护、版本升级等。</p><p><a href="">1.2</a>范围（Scope）</p><p>本文档用于软件设计阶段的概要设计，它的上游（依据的基线）是《需求分析规格书》，它的下游是《详细设计说明书》，并为《详细设计说明书》提供测试的依据。</p><p>软件概要设计的范围是：软件系统总体结构设计、全局数据库和数据结构设计、外部接口设计、主要部件功能分配设计、部件之间的接口设计等方面的内容。该范围应覆盖《需求规格说明书》中的功能点列表、性能点列表、接口列表。</p><p><a href="">1.3 </a>命名规则（Naming Rule）</p><p><a href="">变量对象命名规则</a>：申明全局变量、局部变量对象的命名规则。</p><p><a href="">数据库对象命名规则</a>：申明数据库表名、字段名、索引名、视图名等对象的命名规则。</p><p><a href="">1.4 </a>术语定义（Terms Glossary）</p><p>术语定义或解释一般用表格形式给出，如表6-5所示。</p><p>表6-5  术语定义或解释表</p><table><thead><tr><th>序    号</th><th>术  语 名  称</th><th>术  语 定  义</th></tr></thead><tbody><tr><td>1</td><td>总体结构</td><td>软件系统的总体逻辑结构。按照不同的设计方法，有不同的总体逻辑结构。若采用面向功能或面向数据的设计方法，则总体逻辑结构为一树形的功能模块结构图。若采用面向对象或面向部件（构件）的设计方法，则总体逻辑结构为部件（构件）的组装图</td></tr><tr><td>2</td><td>外部接口</td><td>本软件系统与其他软件系统之间的接口，接口设施可以是中间件。接口描述包括：传输方式、带宽、数据结构、传输频率、传输量、传输协议</td></tr><tr><td>3</td><td>数据结构</td><td>数据结构包括：数据库表的结构、其他数据结构等</td></tr><tr><td>4</td><td>概念数据  模型CDM</td><td>关系数据库的逻辑设计模型，叫做概念数据模型。主要内容包括一张逻辑E-R图及其相应的数据字典</td></tr><tr><td>5</td><td>物理数据  模型PDM</td><td>关系数据库的物理设计模型，叫做物理数据模型。主要内容包括一张物理表关系图及其相应的数据字典</td></tr><tr><td>6</td><td>视图</td><td>在基表或其他视图之上建立的一张虚表，叫做视图，它具有物理表的许多性质，在数据处理和授权上很有用</td></tr><tr><td>7</td><td>角色</td><td>数据库中享有某些特权操作的用户，叫做角色。角色的权利通过授权来实现</td></tr><tr><td>8</td><td>子系统</td><td>具有相对独立功能的小系统叫做子系统。一个大的软件系统可以划分为多个子系统，每个子系统可由多个模块或多个部件组成</td></tr><tr><td>9</td><td>模块</td><td>具有功能独立、能被调用的信息单元叫做模块。模块是结构化设计中的概念</td></tr><tr><td>10</td><td>内部接口</td><td>软件系统内部各子系统之间、各部件之间、各模板之间的接口，叫做内部接口。接口描述包括：调用方式、入口信息、出口信息等</td></tr><tr><td>11</td><td>相关文件</td><td>相关文件是指当本文件内容变更后，可能引起变更的其他文件。如需求分析报告、详细设计说明书、测试计划、用户手册</td></tr><tr><td>12</td><td>参考资料</td><td>参考资料是指本文件书写时用到的其他资料。如各种有关规范、模板、标准、准则</td></tr></tbody></table><p><a href=""> </a></p><p>1.5 参考资料（References）</p><p>[1] 用户需求报告</p><p>[2] 软件开发合同</p><p>[3] 数据库设计规范</p><p>[4] 命名规范</p><p><a href="">1.6 </a>相关文档（Related Documents）</p><p>[1] 《详细设计说明书》</p><p>[2] 源程序清单</p><p>[3] 测试计划及报告</p><p>[4] 《用户使用手册》</p><p><a href="">1.7</a>版本更新记录（Version UpdatedRecord）</p><p><a href="">版本更新记录格式，如表</a>6-6所示。</p><p>表6-6  版本更新记录</p><table><thead><tr><th>版本号</th><th>创建者</th><th>创建日期</th><th>维护者</th><th>维护日期</th><th>维护纪要</th></tr></thead><tbody><tr><td>V1.0</td><td>王大林</td><td>2001/02/18</td><td>—</td><td>—</td><td>—</td></tr><tr><td>V1.0.1</td><td>—</td><td>—</td><td>王小林</td><td>2001/02/26</td><td>E-R图维护</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>2．总体设计（Design ofCollective）</p><p><a href="">2.1 </a>总体结构设计（Design ofCollective Structure）</p><p>软件系统的总体逻辑结构，按照不同的设计方法，有不同的总体逻辑结构。本指南以结构化设计方法为主，画出系统总体结构图，列出系统的功能模块清单编号、名称、功能，并尽可能描绘出功能模块之间的关系。若用面向对象的Rose工具进行分析和设计，则遵照Rose的要求进行。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image005.png" alt="img"></td></tr></tbody></table><p>总体结构示意图</p><p>，</p><p>如图</p><p>6-13</p><p>所示。</p><p>图6-13  总体结构示意图</p><p>2.2 运行环境设计（Design of RunningEnvironment）</p><p>该软件系统的运行环境：</p><p>硬件平台：</p><p>（1）服务器的最低配置要求</p><p>（2）工作站的最低配置要求</p><p>（3）外设的要求</p><p>软件平台：</p><p>（1）服务器操作系统</p><p>（2）数据库管理系统</p><p>（3）中间件</p><p>（4）客户端的操作系统</p><p>（5）客户端的平台软件</p><p>网络平台：</p><p>（1）通信协议</p><p>（2）通信带宽</p><p><a href="">2.3 </a>子系统清单（Subsystem List）</p><p>子系统清单，如表6-7所示。</p><p>表6-7  子系统清单</p><table><thead><tr><th>子系统编号</th><th>子系统英文名</th><th>子系统功能简述</th><th>子系统之间的关系</th></tr></thead><tbody><tr><td>SS1</td><td></td><td></td><td></td></tr><tr><td>SS2</td><td></td><td></td><td></td></tr><tr><td>SS3</td><td></td><td></td></tr></tbody></table><p><a href=""> </a></p><p>2.4 功能模块清单（Function ModuleList）</p><p>功能模块清单，如表6-8所示。</p><p>表6-8  功能模块清单</p><table><thead><tr><th>模  块 编  号</th><th>模块英文名</th><th>模块功能简述</th><th>模块的接口简述</th></tr></thead><tbody><tr><td>M 1-1</td><td></td><td></td><td></td></tr><tr><td>M 1-2</td><td></td><td></td><td></td></tr><tr><td>M 2-1</td><td></td><td></td><td></td></tr><tr><td>M 2-2</td><td></td><td></td></tr></tbody></table><p><a href=""> </a></p><p>3．模块（部件）功能分配（FunctionalDistribution of Module）</p><p>具有功能独立、能被调用的信息单元叫做模块。模块是结构化设计中的概念，部件是面向对象设计中的概念。</p><p>模块功能分配的目的，就是为了将具有相同功能的模块合并，从中提取公用模块，形成公用部件，按照构件或中间件的方式加以实现，作为本系统的公用资源，甚至作为公司级组织的公用资源，从而充实公司级的构件库或中间件库，优化系统设计，加快开发速度，提高开发质量。</p><p><a href="">3.1 </a>专用模块功能分配（FunctionalDistribution of Expert Module）</p><p>专用模块功能分配，如表6-9所示。</p><p>表6-9  专用模块功能分配</p><table><thead><tr><th>专用模块编号</th><th>模块英文名</th><th>模块详细功能分配</th><th>模块的接口标准</th></tr></thead><tbody><tr><td>M1-1</td><td></td><td></td><td></td></tr><tr><td>M1-2</td><td></td><td></td><td></td></tr><tr><td>M2-1</td><td></td><td></td><td></td></tr><tr><td>M2-2</td><td></td><td></td></tr></tbody></table><p><a href=""> </a></p><p>3.2 公用模块功能分配（FunctionDistribute of Public Module）</p><p>公用模块功能分，如表6-10所示。</p><p>表6-10  公用模块功能分配</p><table><thead><tr><th>公用模块编号</th><th>模块英文名</th><th>模块详细功能分配</th><th>模块的接口标准</th></tr></thead><tbody><tr><td>G-1</td><td></td><td></td><td></td></tr><tr><td>G-2</td><td></td><td></td><td></td></tr><tr><td>G-3</td><td></td><td></td></tr></tbody></table><p><a href=""> </a></p><p>4．数据结构设计（Design of Data Structure）</p><p>数据库设计的工具目前主要有3个：ERwin，PowerDesigner，OracleDesigner。后面两种工具都支持中文的概念数据模型设计，并能自动将概念数据模型转换为物理数据模型，自动生成建表程序和主键索引程序。前面一种工具只能支持英文的物理数据模型设计。3个工具的共同特点是都能生成E-R图及其相应的数据字典。</p><p><a href="">4.1 </a>数据库表名清单（DB Table List）</p><p>数据库表名清单，如表6-11所示。</p><p>表6-11  数据库表名清单</p><table><thead><tr><th>序号</th><th>中文表名</th><th>英文表名</th><th>表功能说明</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td></tr></tbody></table><p><a href=""> </a></p><p>4.2 数据库表之间关系说明（Relation of DBTable）</p><p>可以用E-R图表示，也可以用文字说明。</p><p><a href="">4.3 </a>数据库表的详细清单（Particular List ofDB Table）</p><p>每个表的详细清单内容包括：表名、字段中文名、字段英文名、字段的类型、宽度、精度、主键/外键、空否、取值约束（默认值、最大值、最小值）、索引否。同时要指出该表的索引：索引文件名、索引字段名、索引特性（主键索引、惟一索引unique、聚集索引clustered）。详细清单可以用列表给出，如表6-12所示。</p><p>表6-12  表名：XXXX</p><table><thead><tr><th>序号</th><th>字段中文名</th><th>字段英文名</th><th>类型、宽度、精度</th><th>取值约束</th><th>空否</th><th>默认值</th><th>主键/外键</th><th>索引否</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><a href="">4.4 </a>视图设计（View Design）</p><p>视图设计与授权有关，设计时参照需求文档的用户授权范围。视图设计中要给出视图的中文名、英文名，视图中的中文列名、英文列名、类型、宽度、精度，每一列的具体算法，对应的基本表名。</p><p><a href="">4.5 </a>其他数据结构设计（Design of OtherData Structure）</p><p>此小节描述系统的其他数据结构设计内容。</p><p><a href="">5</a>．接口设计（Interface Design）</p><p>对应每一个接口，都要详细列出下列内容。</p><p>（1）接口名称</p><p>（2）接口内容</p><p>（3）接口设施</p><p>（4）接口的数据结构</p><p>（5）接口的传输速率（Mbps）</p><p>（6）接口带宽</p><p>（7）接口协议</p><p><a href="">6</a>．其他设计（Other Design）</p><p>本章描述前面没有说明的设计。</p><p>7．设计检查列表（Check-up List of Design）</p><p>按照需求文档的功能、性能和接口3个列表，设计出概要设计检查列表，以检查概要设计是否覆盖需求分析，没有覆盖就是不符合项，并将检查结果列出。</p><p>7.1 功能设计检查列表（Check-up List of Function Design）</p><p>功能设计检查列表，如表6-13所示。</p><p>表6-13  功能设计检查列表</p><table><thead><tr><th>编号</th><th>功能名称</th><th>使用部门</th><th>使用岗位</th><th>功能描述</th><th>输入内容</th><th>系统响应</th><th>输出内容</th><th>是否覆盖</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>7.2 性能设计检查列表（Check-up List of Performance Design）</p><p>性能设计检查列表，如表6-14所示。</p><p>表6-14  性能设计检查列表</p><table><thead><tr><th>编号</th><th>性能名称</th><th>使用部门</th><th>使用岗位</th><th>性能描述</th><th>输入内容</th><th>系统响应</th><th>输出内容</th><th>是否覆盖</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>7.3 接口设计检查列表（Check-up List of Interface Design）</p><p>接口设计检查列表，如表6-15所示。</p><p>表6-15  接口设计检查列表</p><table><thead><tr><th>编号</th><th>接口名称</th><th>接口规范</th><th>接口标准</th><th>入口参数</th><th>出口参数</th><th>传输频率</th><th>是否覆盖</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="10《详细设计说明书》"><a href="#10《详细设计说明书》" class="headerlink" title="10《详细设计说明书》"></a><a href="">10</a>《详细设计说明书》</h2><p><a href="">《详细设计说明书》编写参考指南</a></p><p>1．导言（Introduction）</p><p>本章对该文档的目的、功能范围、术语、相关文档、参考资料、版本更新进行说明。</p><p><a href="">1.1 </a>目的（Purpose）</p><p>本文档的目旨在推动软件工程的规范化，使设计人员遵循统一的详细设计书写规范，节省制作文档的时间，降低系统实现的风险，做到系统设计资料的规范性与全面性，以利于系统的实现、测试、维护、版本升级等。详细设计的详细程度，应达到可以编写程序的程度。</p><p><a href="">1.2 </a>范围（Scope）</p><p>本文档用于软件设计阶段的详细设计，它的上游（依据的基线）是《概要设计说明书》，它的下游是源程序清单及单元测试计划，并为单元测试报告提供测试依据。该范围应覆盖《概要设计说明书》中的功能点列表、性能点列表、接口列表。</p><p>软件详细设计的范围是：各子系统的公用模块实现设计、专用模块实现设计、存储过程实现设计、触发器实现设计、外部接口实现设计、部门角色授权设计、其他详细设计等。</p><p>按照3层结构（B/A/S）的布局，详细设计应从下面3个方面进行。数据库服务器上的面向数据的设计：数据字典物理设计、基本表物理设计、中间表物理设计（报表设计）、临时表物理设计、视图物理设计、存储过程物理设计、触发器物理设计。应用服务器上的面向业务逻辑的设计：接口数据设计、中间件设计、数据通信传输设计、可视构件设计、非可视构件设计、角色授权设计、功能点设计（功能点列表设计）。浏览器上的面向对象的设计：录入修改界面设计、浏览查询界面设计、登录注册界面设计、信息发布界面设计。</p><p><a href="">1.3 </a>术语定义（Terms Glossary）</p><p>术语定义，如表6-16所示。</p><p>表6-16  术语定义</p><table><thead><tr><th>序号</th><th>术语名称</th><th>术  语 定  义</th></tr></thead><tbody><tr><td>1</td><td>详细设计</td><td>在概要设计的基础上，对其功能模块或部件进行实现设计，使编程人员据此能顺利书写出程序代码</td></tr><tr><td>2</td><td>存储过程</td><td>存放在数据库服务器上的一段程序，它能被其他程序调用，以完成对数据库表的某些规定操作</td></tr><tr><td>3</td><td>触发器</td><td>存放在数据库服务器上的一段程序，当触发条件满足时它就被执行，以完成对数据库表的某些规定操作</td></tr><tr><td>4</td><td>算法</td><td>详细设计中实现某项功能的数据处理方法及处理流程</td></tr></tbody></table><p><a href=""> </a></p><p>1.4 参考资料（References）</p><p>[1] 《概要设计说明书》</p><p>[2] 《需求分析说明书》</p><p>[3] 《软件合同》</p><p>[4] 命名规范</p><p>[5] 程序设计规范</p><p>[6] 界面设计规范</p><p><a href="">1.5 </a>相关文档（Related Documents）</p><p>[1] 源程序清单</p><p>[2] 单元测试计划及报告</p><p>[3] 《用户使用手册》</p><p><a href="">1.6 </a>版本更新记录（Version UpdatedRcord）</p><p>版本更新记录，如表6-17所示。</p><p>表6-17  版本更新记录</p><table><thead><tr><th>版本号</th><th>创建者</th><th>创建日期</th><th>维护者</th><th>维护日期</th><th>维护纪要</th></tr></thead><tbody><tr><td>V1.0</td><td>王大林</td><td>2001/0318</td><td>—</td><td>—</td><td>—</td></tr><tr><td>V1.0.1</td><td>—</td><td>—</td><td>王小林</td><td>2001/03/26</td><td>报表4格式维护</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>2．模块实现设计（Implemental Design of Module）</p><p>功能模块包括：登录注册模块、信息发布模块、菜单模块、录入修改模块、查询统计模块、数据处理模块、报表输出模块、前台网站模块、后台处理模块、数据传输与接收模块等等。详细设计是面向模块的，或者说是面向部件（或构件）的，不是面向组织结构或部门单位的。一个组织或单位，根据角色的授权，可以挂上某些功能模块。若为C/S或B/A/S结构，则要说明该模块运行在哪一层上。</p><p><a href="">2.1 </a>公用模块设计（Design of Public Module）</p><p>公用模块的提取与设计特别重要，设计它的目的是为了复用，因此它直接影响到系统的详细设计、编程、运行的质量。每个公用模块的设计要包括如下内容：</p><p>（1）模块编号：按照命名规则，如：G-XXX，将此公用模块编号写上。</p><p>（2）模块名称：此公用模块的英文名。</p><p>（3）模块功能：详细列出此公用模块的所有功能。</p><p>（4）模块背景描述：对背景进行简单的描述。为什么需要此模块功能，其上下文环境。涉及业务背景内容，与需求相结合。</p><p>（5）模块算法设计：用伪语言（例如，if…endif，case…endcase， do…enddo，…）详细描述出此公用模块的算法，标准是使程序人员据此能顺利地书写程序。</p><p>（6）模块调用方法：详细列出调用的方式、入口参数、出口参数、异常处理。</p><p>（7）模块编写者：编写者姓名。</p><p>（8）模块编写日期：编写日期：yyyy/mm/dd。</p><p>（9）模块修订者：修订者姓名。</p><p>（10）模块修订日期：修订日期：yyyy/mm/dd。</p><p>（11）模块测试者：测试者姓名。</p><p>（12）模块测试日期：测试日期：yyyy/mm/dd。</p><p><a href="">2.2 </a>专用模块设计（Design of Expert Module）</p><p>非公用模块是为了处理一些特殊需求，它不可复用，每个非公用模块设计包括如下内容：</p><p>（1）模块编号：按照命名规则，如：M1-XXX，将此专用模块编号写上。</p><p>（2）模块名称：此模块的中文名。</p><p>（3）模块功能：详细列出此模块的所有功能。</p><p>（4）模块背景描述：对背景进行简单的描述。为什么需要此模块功能，其上下文环境。涉及业务背景内容，与需求相结合。</p><p>（5）模块算法设计：用伪语言（例如，if…endif，case…endcase， do…enddo，…）详细描述出此专用模块的算法，标准是使程序人员据此能顺利地书写程序。</p><p>（6）模块编写者：编写者姓名。</p><p>（7）模块编写日期：编写日期：yyyy/mm/dd。</p><p>（8）模块修订者：修订者姓名。</p><p>（9）模块修订日期：修订日期：yyyy/mm/dd。</p><p>（10）模块测试者：测试者姓名。</p><p>（11）模块测试日期：测试日期：yyyy/mm/dd。</p><p><a href="">2.3 </a>存储过程设计（Design of Storage Process）</p><p>存储过程是一种特殊的公用模块，它在数据库服务器上执行，这里将它单独列出来，规定其详细设计模板为：</p><p>（1）存储过程中文名：此存储过程的中文名。</p><p>（2）存储过程英文名：此存储过程的英文名。</p><p>（3）存储过程功能: 详细描述其功能。</p><p>（4）存储过程算法: 用伪语言详细描述其算法，使编程人员据此能顺利书写程序。</p><p>（5）存储过程调用方式：详细列出调用的方式、入口参数、出口参数、异常处理。</p><p>（6）模块编写者：编写者姓名。</p><p>（7）模块编写日期：编写日期：yyyy/mm/dd。</p><p>（8）模块修订者：修订者姓名。</p><p>（9）模块修订日期：修订日期：yyyy/mm/dd。</p><p>（10）模块测试者：测试者姓名。</p><p>（11）模块测试日期：测试日期：yyyy/mm/dd。</p><p><a href="">2.4 </a>触发器设计（Design of Trigger）</p><p>触发器也是一种公用模块，不过它是隐式执行，这里将它单独列出来，规定其详细设计模板为：</p><p>（1）触发器中文名：此触发器的中文名。</p><p>（2）触发器英文名：此触发器的英文名。</p><p>（3）触发器功能：详细描述其功能。</p><p>（4）触发器算法：用伪语言详细描述其算法，使编程人员据此能顺利书写程序。</p><p>（5）触发器激活条件：详细描述其激活条件，使编辑人员据此能顺利书写程序。</p><p>（6）触发器编写者：编写者姓名。</p><p>（7）触发器编写日期：编写日期：yyyy/mm/dd。</p><p>（8）触发器修订者：修订者姓名。</p><p>（9）触发器修订日期：修订日期：yyyy/mm/dd。</p><p>（10）触发器测试者：测试者姓名。</p><p>（11）触发器测试日期：测试日期：yyyy/mm/dd。</p><p>注意：过多地使用触发器反而会使系统的效率降低。因此，凡是能用存储过程代替触发器功能的地方，一律用存储过程来实现。</p><p><a href="">3. </a>接口实现设计（Implemental Design ofInterface）</p><p>每个外部接口实现模块的设计要包括如下内容：</p><p>（1）接口中文名称：此接口的中文名。</p><p>（2）接口英文名称：此接口的英文名。</p><p>（3）接口内容与功能：详细描述接口的内容与功能，如实现数据传输或数据交换。</p><p>（4）接口硬件设施：详细描述接口的硬件设施，如交换机、传感器或输出设备。</p><p>（5）接口软件或中间件：详细描述接口软件或中间件的名称、功能、使用方法、生产厂商。</p><p>（6）接口的数据结构：详细描述接口的数据结构，如文件结构、数据库表结构。</p><p>（7）接口的传输速率（Mbps）：定量说明每秒最大流量。</p><p>（8）接口带宽：定量说明带宽，如XXMbps。</p><p>（9）接口协议：说明具体协议。</p><p>（10）接口程序的算法：用伪语言详细描述其算法，使编码人员据此能顺利书写程序。</p><p>（11）接口编写者：编写者姓名。</p><p>（12）接口编写日期：编写日期：yyyy/mm/dd。</p><p>（13）接口修订者：修订者姓名。</p><p>（14）接口修订日期：修订日期：yyyy/mm/dd。</p><p>（15）接口测试者：测试者姓名。</p><p>（16）接口测试日期：测试日期：yyyy/mm/dd。</p><p><a href="">4</a>．其他实现设计（Other Implemental Designs）</p><p>本章描述前面没有说明的设计。如部门角色授权设计、界面设计、包装设计、维护设计等。</p><p><a href="">4.1 </a>角色授权设计（Accredited Designof Role）</p><p>授权表的横坐标表示角色（部件、单位或岗位），纵坐标表示功能模块，“●”表示授权。该授权表是工作站上菜单设计的依据，如表6-18所示。</p><p>表6-18  角色授权设计</p><table><thead><tr><th><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image006.png" alt="img">模块名</th><th>角色1</th><th>角色2</th><th>角色3</th><th>角色4</th><th>角色5</th><th></th></tr></thead><tbody><tr><td>模块英文名1</td><td>●</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>模块英文名2</td><td></td><td></td><td>●</td><td>●</td><td></td><td></td></tr><tr><td>模块英文名3</td><td></td><td>●</td><td>●</td><td></td><td>●</td><td></td></tr><tr><td>模块英文名4</td><td>●</td><td></td><td></td><td></td><td>●</td><td></td></tr><tr><td>模块英文名5</td><td>●</td><td>●</td><td></td><td>●</td><td></td><td></td></tr><tr><td>模块英文名6</td><td></td><td>●</td><td></td><td></td><td>●</td><td></td></tr><tr><td>模块英文名7</td><td></td><td></td><td>●</td><td></td><td></td><td></td></tr><tr><td>模块英文名8</td><td></td><td>●</td><td></td><td>●</td><td></td><td></td></tr><tr><td>…</td><td></td><td></td><td>●</td><td></td><td>●</td></tr></tbody></table><p><a href=""> </a></p><p>4.2 其他详细设计（Other ParticularDesigns）</p><p>根据需要进行设计。如界面设计、包装设计、维护设计等。</p><p>5．详细设计检查列表（Check-up List of Design）</p><p>按照概要设计文档的功能、性能和接口3个列表，设计出详细设计检查列表，以检查详细设计是否覆盖概要，没有覆盖就是不符合项，并将检查结果列出。</p><p>5.1 功能设计检查列表（Check-up List of Function Design）</p><p>功能设计检查列表，如表6-19所示。</p><p>表6-19  功能设计检查列表</p><table><thead><tr><th>编号</th><th>功能名称</th><th>使用部门</th><th>使用岗位</th><th>功能描述</th><th>输入内容</th><th>系统响应</th><th>输出内容</th><th>是否实现</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>5.2 性能设计检查列表（Check-up List of Performance Design）</p><p>性能设计检查列表，如表6-20所示。</p><p>表6-20  性能设计检查列表</p><table><thead><tr><th>编号</th><th>性能名称</th><th>使用部门</th><th>使用岗位</th><th>性能描述</th><th>输入内容</th><th>系统响应</th><th>输出内容</th><th>是否实现</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>5.3 接口设计检查列表（Check-up List of Interface Design）</p><p>接口设计检查列表，如表6-21所示。</p><p>表6-21  接口设计检查列表</p><table><thead><tr><th>编号</th><th>接口名称</th><th>接口规范</th><th>接口标准</th><th>入口参数</th><th>出口参数</th><th>传输频率</th><th>是否实现</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>《概要设计说明书/详细设计说明书评审记录表》</p><p>（Review Table ofDesign）</p><table><thead><tr><th>项目名称</th><th></th><th>项目经理</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>评审阶段</td><td>概要设计说明书/详细设计说明书</td><td>第    次评审</td><td></td><td></td><td></td><td></td></tr><tr><td>评审组组长</td><td></td><td>评审时间</td><td></td><td>评审地点</td><td></td><td></td></tr><tr><td>评审组成员</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>不符合项跟踪记录</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>不符合项名称</td><td>不符合项内容</td><td>限期改正时间</td><td>实际改正时间</td><td>测试合格时间</td><td>测试员签字</td><td>审计员签字</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>评审意见</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>评审结论</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>评审组长签字：                  评审组成员签字：</p><h2 id="11《用户使用手册》"><a href="#11《用户使用手册》" class="headerlink" title="11《用户使用手册》"></a><a href="">11</a>《用户使用手册》</h2><p><a href="">《用户使用手册</a>》编写参考指南</p><p><a href="">1</a>．前言(Preface)</p><p>提供手册的概述，在此可以说明编写这份手册的目的、指明本手册的读者。</p><p>1.1 内容简介(Introduction)</p><p>简单地介绍编写背景，系统适用的用户。</p><p>1.2 基本概念(Basic Concept)</p><p>说明定义的术语在本手册中的含义。</p><p>1.3 主要功能(Mostly Function)</p><p>对系统进行简单讲解和功能介绍。</p><p>1.4 操作流程(Operate Flow)</p><p>操作流程说明。全面模拟用户操作，从安装、进入、初始化、到用户具体操作，对整个流程进行描述。</p><p>1.5 步骤说明(Step Show)</p><p>针对操作流程的每一步进行说明。如果在使用说明中有相应的解释，应指明用户查找的位置。</p><p><a href="">2</a>．功能(Function)</p><p>这部分包括用户使用的所有功能，是用户使用手册的最重要的部分，要详细描述。</p><p>2.1 使用流程(Use Flow)</p><p>描述具体功能的使用顺序。如果功能之中有分类，比如，有些功能用户用不到，有些用得到，就要分开写流程。</p><p>2.2 具体描述(Description)</p><p>描述顺序是按照使用流程的每一步进行的。</p><p>2.3 进行此功能的业务介绍(Operation Introduce)</p><p>对此功能进行简单介绍，说明所能完成的功能。</p><p>2.4 操作步骤(Handle Step)</p><p>用鼠标选择相应的功能，进入相应的界面，进行功能键以及栏目的介绍。</p><p>2.5 举例(Example)</p><p>针对某一功能，对于一些比较难的问题，应该进行举例说明。</p><p>2.6 特殊提示及注意事项(Prompt and Notice)</p><p>在使用说明中，每一部分都会归纳一些问题，需要提示用户或者让用户注意，应按照以下规定的格式进行编写：字体采用仿宋字，字号采用小五号字。</p><p><a href="">3</a>．附录(Appendix)</p><p>对一些在正文中描述不够详尽的地方，可在附录中进行补充；用户经常遇到的问题及问题解答也可放在附录中。</p><p><a href=""> </a></p><h2 id="12《用户安装手册》"><a href="#12《用户安装手册》" class="headerlink" title="12《用户安装手册》"></a><a href="">12</a>《用户安装手册》</h2><p>《用户安装手册》编写参考指南</p><p><a href="">1</a>．前言(Preface)</p><p>指明编制该手册的目的和预期的读者，简介该系统的运行环境：操作系统OS，数据库系统DBMS，C/S二层结构或B/A/S三层结构，界面特点，以及技术特色。</p><p>1.1 内容简介(Introduction)</p><p>介绍本书提供的几个部分：简单介绍大概内容。</p><p>1.2 使用约定(Use Assumpsit)</p><p>提示：安装过程的一些好的方法。</p><p>注意：安装过程中特殊注意的地方。</p><p>警告：指出危险动作或状态，否则，会对您的安装造成破坏。</p><p><a href="">2</a>．单机版的安装及配置(Installation and Configuration for PC)</p><p>2.1 运行环境(Run Environment)</p><p>（1）硬件环境：列出运行本系统所要求的硬设备的最小配置。微机要求包括型号、内存、硬盘，显示器要求，以及一些其他的I/O设备。</p><p>（2）软件环境：列出运行本系统所需要的支持软件。如操作系统，程序语言以及数据库管理系统。</p><p>2.2 安装单机版(Installation for PC)</p><p>（1）简单介绍单机版打包光盘的定义和内容。</p><p>（2）介绍该系统单机版的安装步骤。</p><p>2.3 安装后的系统配置(Configuration After Installation)</p><p>介绍系统安装之后，查看该系统配置信息的情况，以确定是否需要改动，是否是最优配置。</p><p>另外，运行系统的时候，有时会出现数据库联接不成功。在这部分应介绍会有哪几种可能的原因，并分别简述。</p><p><a href="">3</a>．网络版的安装及配置(Installation and Configuration for Network)</p><p>3.1 运行环境(Run Environment)</p><p>除了对硬件环境提出要求外，对软件环境的要求应列出运行本系统所需的操作系统、与操作系统兼容的网络环境、程序语言以及数据库管理系统。</p><p>另外，还应简单介绍一下安装网络和数据库所需注意事项和可参考的工具书。</p><p>3.2 安装网络版(Installation for Network)</p><p>介绍该系统网络版的安装步骤。</p><p>如何进行系统环境配置。</p><p>数据库的默认用户及口令等。</p><p>3.3 安装后的系统配置<a href="">(Configurationafter Installation)</a></p><p>4．附录(Appendix)</p><p>附录1</p><p>安装过程提供的技术支持。说明技术支持的几种方式，及常见安装疑难问题解答。</p><p>附录2</p><p>参考资料，应写上书名、版本号、作者、出版社、出版日期。</p><h2 id="13《测试报告》"><a href="#13《测试报告》" class="headerlink" title="13《测试报告》"></a><a href="">13</a>《测试报告》</h2><p>《测试报告》编写参考指南</p><ol><li>概述(Summary)</li></ol><p>1.1 项目简介(Project Synopsis)</p><p>在本章节中简介项目的基本情况。 </p><p>1.2 术语定义(Terms Glossary)</p><p>将该测试报告中的术语、缩写进行定义, 包括用户应用领域与计算机领域的术语与缩写等。 </p><p>1.3 参考资料(References)</p><p>说明该测试报告使用的参考资料，如：</p><p> [1]《商务合同》</p><p> [2]《用户需求报告》</p><p> [3]《需求规格说明书》</p><p>1.4 版本更新信息(Version Updated Record)</p><p>版本更新记录格式，如表9-3所示。</p><p>表9-3  版本更新记录</p><table><thead><tr><th>版本号</th><th>创建者</th><th>创建日期</th><th>维护者</th><th>维护日期</th><th>维护纪要</th></tr></thead><tbody><tr><td>V1.0</td><td>王大林</td><td>2002/02/18</td><td>—</td><td>—</td><td>—</td></tr><tr><td>V1.0.1</td><td>—</td><td>—</td><td>王小林</td><td>2002/02/26</td><td>不符合项测试</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ol><li>目标系统功能需求(Function of Target System)</li></ol><p>由《用户需求报告》/《需求规格说明书》拷贝到的功能需求点列表，如表9-4所示。</p><p>表9-4  功能需求点列表</p><table><thead><tr><th>编号</th><th>功能名称</th><th>使用部门</th><th>使用岗位</th><th>功能描述</th><th>输入内容</th><th>输出内容</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ol><li>目标系统性能需求(Performance of Target System) </li></ol><p>由《用户需求报告》/《需求规格说明书》拷贝到的需求性能点列表，如表9-5所示。</p><p>表9-5  性能需求点列表</p><table><thead><tr><th>编号</th><th>性能名称</th><th>使用部门</th><th>使用岗位</th><th>性能描述</th><th>输入内容</th><th>输出内容</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ol><li><p>目标系统接口需求(Interface of Target System) </p><p>由《用户需求报告》/《需求规格说明书》拷贝到的接口列表，如表9-6所示。</p></li></ol><p>表9-6  外部接口需求点列表</p><table><thead><tr><th>编号</th><th>接口名称</th><th>接口规范</th><th>接口标准</th><th>入口参数</th><th>出口参数</th><th>传输频率</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><a href=""> </a></p><ol><li>功能测试报告(Report forFunction Test)</li></ol><p>搭建功能测试平台，使测试平台与运行平台一致。按照功能点列表内容，设计测试用例（输入/输出内容），进行现场测试，记录测试数据，评定测试结果。测试活动的记录格式，如表9-7所示。</p><p>表9-7  功能测试记录</p><table><thead><tr><th>编号</th><th>功能名称</th><th>功能描述</th><th>用例输入内容</th><th>用例输出内容</th><th>发现问题</th><th>测试结果</th><th>测试时间</th><th>测试人</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td><td></td></tr><tr><td>4</td><td></td><td></td><td></td><td></td><td></td><td>×</td><td></td></tr></tbody></table><p><a href=""> </a></p><ol><li>性能测试报告(Rreport forPerformance Test)</li></ol><p>搭建性能测试平台，使测试平台与运行平台一致。按照性能点列表内容，设计测试用例（输入/输出内容），进行现场测试，记录测试数据，评定测试结果。测试活动的记录，如表9-8所示。</p><p>表9-8  性能测试记录</p><table><thead><tr><th>编号</th><th>性能名称</th><th>性能描述</th><th>用例输入内容</th><th>用例输出内容</th><th>发现问题</th><th>测试结果</th><th>测试时间</th><th>测试人</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td><td>×</td><td></td><td></td></tr><tr><td>4</td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td></tr></tbody></table><p><a href="">7. </a>接口测试报告(Report forInterface Test)</p><p>搭建接口测试平台，使测试平台与运行平台一致。按照接口列表内容，设计测试用例(输入/输出内容)，进行现场测试，记录测试数据，评定测试结果。测试活动的记录，如表9-9所示。</p><p>表9-9  接口测试记录</p><table><thead><tr><th>编号</th><th>接口名称</th><th>入口参数</th><th>出口参数</th><th>传输频率</th><th>发现问题</th><th>测试结果</th><th>测试时间</th><th>测试人</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td>×</td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td></tr></tbody></table><p><a href=""> </a></p><ol><li>不符合项列表(Check List of Noncompliance Items)</li></ol><p>将测试中的所有不符合项(Bug项)，整理后分别记录到表9-10、表9-11和表9-12中。</p><p>表9-10  功能测试不符合项列表</p><table><thead><tr><th>编号</th><th>功能名称</th><th>功能描述</th><th>用例输入内容</th><th>用例输出内容</th><th>发现问题</th><th>测试结果</th><th>测试时间</th><th>测试人</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td>×</td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td>×</td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td><td>×</td><td></td><td></td></tr><tr><td>4</td><td></td><td></td><td></td><td></td><td></td><td>×</td><td></td></tr></tbody></table><p>表9-11  性能测试不符合项列表</p><table><thead><tr><th>编号</th><th>性能名称</th><th>性能描述</th><th>用例输入内容</th><th>用例输出内容</th><th>发现问题</th><th>测试结果</th><th>测试时间</th><th>测试人</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td>×</td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td>×</td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td><td>×</td><td></td><td></td></tr><tr><td>4</td><td></td><td></td><td></td><td></td><td></td><td>×</td><td></td></tr></tbody></table><p>表9-12  接口测试不符合项列表</p><table><thead><tr><th>编号</th><th>接口名称</th><th>入口参数</th><th>出口参数</th><th>传输频率</th><th>发现问题</th><th>测试结果</th><th>测试时间</th><th>测试人</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td><td></td><td>×</td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td></td><td>×</td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td></td><td>×</td><td></td></tr></tbody></table><p>以上不符合项，限期XX天内改正。改正完毕后重新进行回归测试。</p><p><a href="">9. </a>测试结论(Test Verdict)</p><p>当测试完成之后，测试组应对本次测试做出结论。格式如下：</p><p>测试日期：</p><p>测试地点：</p><p>测试环境：</p><p>参与测试的人员：</p><p>列出系统的强项：</p><p>列出系统的弱项：</p><p>列出不符合项的统计结果：</p><p>测试组组长签字：</p><p>测试组成员签字：</p><h2 id="14软件质量保证关键过程域SQA"><a href="#14软件质量保证关键过程域SQA" class="headerlink" title="14软件质量保证关键过程域SQA"></a><a href="">14</a>软件质量保证关键过程域SQA</h2><p>CMM2中“软件质量保证”关键过程域SQA详细说明文档</p><p>Software Quality Assurance</p><p>(a key process area for Level2：Repeatable)</p><p>软件质量保证的目的，是向管理者提供软件项目正在使用的过程和正在构造的产品的可视性。</p><p>软件质量保证包括评审和审计软件产品及活动，以验证它们符合相应的规程和标准，给项目经理和其他有关经理提供评审和审计结果。</p><p>在软件项目的早期阶段，软件质量保证组与软件项目一起工作，制定计划、标准和规程等。这些计划、标准和规程，将增加软件项目的价值，并将满足项目和组织方针上的要求。通过参与制定计划、标准和规程，软件质量保证组帮助确保这些计划、标准和规程适合项目的需要，并且帮助验证这些计划、标准和规程对完成整个软件生存周期中的评审和审计将是适用的。软件质量保证组在整个生存周期内评审项目活动，审计软件工作产品，并就软件项目是否遵守已制定的计划、标准和规程等，为管理者提供可视性。</p><p>首先，在软件项目内部处理符合性问题，如可能的话就解决它。对于那些无法在软件项目组内部解决的问题，软件质量保证组逐级上递该问题到恰当层次的管理者那里以求解决。</p><p>这个关键过程域，只包括该组履行软件质量保证功能的实践。而识别软件质量保证组要评审和审计的具体活动和工作产品的实践，一般包含在其他关键过程域的验证实施共同特性之中。</p><p>（作者注：为了实现软件质量保证的目的，CMM规定了该KPA有“4个目标、1项约定、4项能力、8项活动、1项测量、3项验证”，该KPA的17个关键实践KP，就分布在“执行约定、执行能力、执行活动、测量和分析、验证实施”之中，具体内容简述如下。）</p><p>目标（Goals）</p><p>目标1：软件质量保证活动是有计划的。</p><p>目标2：软件产品和活动遵守适用的标准、规程和需求，能得到客观验证。</p><p>目标3：受影响的组和个人接到了软件质量保证活动和结果的通知。</p><p>目标4：高级管理者处理在软件项目内部不能解决的不符合问题。</p><p>执行约定（Commitment to Perform，CO）</p><p>约定1：项目遵守书面的实施软件质量保证(SQA)的组织方针。</p><p>该方针一般规定：</p><p>1．对全部软件项目，SQA功能到位；</p><p>2．SQA有一个向高级管理者报告质量问题的独立渠道，它独立于：</p><p>——项目经理</p><p>——项目软件工程组</p><p>——其他软件有关组</p><p>其他软件有关组的例子有：</p><p>──软件配置管理组</p><p>──文档支持组</p><p>组织必须确定一种组织机构，它在组织的战略经营目标和经营环境中，支持那些引发独立性要求的活动，例如SQA。</p><p>独立性应该表现在：</p><p>──给担当SQA角色的个人提供组织上的自由度，使它们成为高级管理者在软件项目中的“耳目”。</p><p>──使担当SQA角色的个人，免受管理者对他们正在评审的软件项目的所做的性能评价的影响。</p><p>──使高级管理者相信，正在报告的有关项目过程和产品的信息是客观的。</p><p>3．高级管理者定期评审SQA活动和结果。</p><p>执行能力（Ability to Perform，AB）</p><p>能力1：存在负责协调和实施项目的SQA组（即SQA组）。</p><p>一个组是负责一组作业或活动的部门、经理和个人的集合。组的规模可以变化，可以包括一个受指派的非全日制的单个个人，也可以包括几个从不同部门指派来的非全日制的个人或几个全日制的个人。建立一个组时，应考察的因素包括指派的作业和活动、项目的规模、组织机构和组织文化。某些组，例如，软件质量保证组，集中注意力于项目活动；而其他组，例如，软件工程过程组，则集中关注全组织的活动。</p><p>能力2：为进行SQA活动提供足够的资源和投资。</p><p>1．指派一个经理，专门负责项目的SQA活动。</p><p>2．指派一个在SQA方面博学的、并有权采取监督行动的高级经理，接受和处理软件不符合问题。</p><p>——在SQA中，处在向高级经理报告链上的全部经理，均是在SQA的任务、责任和权利方面富有独到见解、富于智慧和决策能力的管理者。</p><p>3．保证支持SQA活动的工具好用。</p><p>支持工具的例子有：</p><p>──工作站</p><p>──数据库程序</p><p>──电子表格程序</p><p>──审计工具</p><p>能力3：SQA组的成员要接受培训，以利于完成他们的SQA活动。</p><p>培训的例子有：</p><p>──软件工程技巧和实践</p><p>──软件工程组和其他软件有关组的岗位及职责</p><p>──用于软件工程的标准、规程和方法</p><p>──软件项目的应用领域</p><p>──SQA的对象、规程和方法</p><p>──SQA组对软件活动的参与</p><p>──SQA方法和工具的有效使用</p><p>──人员间的交流</p><p>能力4：软件项目的成员接受有关SQA组的任务、职责、权利和价值的定向培训。</p><p>执行活动（Activities Performed，AC）</p><p>活动1：按照已建档的规程为软件项目制定SQA计划。</p><p>该规程一般规定：</p><p>1．SQA计划的制定是在项目策划的早期阶段，平行于整个项目策划。</p><p>2．受影响的组和个人评审该SQA计划。</p><p>受影响的组和个人的例子有：</p><p>──项目软件经理</p><p>──其他软件经理</p><p>──项目经理</p><p>──顾客的SQA代表</p><p>──SQA组负责解决其报告不符合问题的高级经理</p><p>──软件工程组（包括全部小组，如软件设计小组及软件作业领导）</p><p>3．对计划进行管理和控制。</p><p>“管理和控制”意味着，在给定时间（过去或现在）内使用的工作产品的版本是已知的（即版本控制），而且以受控的方式引进更改（即更改控制）。</p><p>如果希望有比“管理和控制”更高程度的控制，则工作产品可置于配置管理的完备规范之下，正如在“软件配置管理”关键过程域中所描述的。</p><p>活动2：按照SQA计划进行SQA组的活动。</p><p>该计划包括：</p><p>1．SQA组的职责和权利</p><p>2．SQA组的资源要求（包括员工、工具和设施）</p><p>3．SQA组活动的进度表和投资</p><p>4．SQA组参加制定项目的软件开发计划、标准和规程的情况</p><p>5．确定将由SQA完成的评价</p><p>待评价的产品和活动的例子有：</p><p>──运行软件和支持软件</p><p>──可交付的和不可交付的产品</p><p>──软件和非软件产品（例如，文档）</p><p>──产品开发和产品验证活动（例如，运行测试用例）</p><p>──生成产品时所从事的活动</p><p>6．将由SQA组进行的审计和评审。</p><p>7．将用做SQA组评审和审计基础的标准和规程。</p><p>8．用于对不符合性问题建立文档和进行跟踪直至结束的规程。</p><p>这些规程可以作为计划的一部分而纳入计划，也可以通过对包含它们的其他文档进行索引的方式而纳入计划。</p><p>9．要求SQA组生成的文档。</p><p>10．就SQA活动给软件工程组和其他相关组提供反馈信息的方法和频率。</p><p>活动3：SQA组参与准备和评审项目的软件开发计划、标准和规程。</p><p>1．SQA就以下几个方面对计划、标准和规程提供咨询和评审：</p><p>——对组织方针的符合性</p><p>——对外部强加的标准和要求的符合性（例如，工作陈述所要求的标准）</p><p>——适合项目使用的标准</p><p>——在软件开发计划中应阐述的专题</p><p>——项目指定的其他领域</p><p>2．SQA组验证计划、标准和规程已到位，并可用于评审与审计软件项目。</p><p>活动4：SQA组评审软件工程活动，以验证符合性。</p><p>1．用软件开发计划和指定的软件标准及规程，进行评价活动。</p><p>参考其他关键过程域中的验证实施共同特性，以便找到包括由SQA组进行特定评审和审计的实践。</p><p>2．对偏差进行鉴别和建立文档，并跟踪到结束。</p><p>3．验证纠正措施。</p><p>活动5：SQA组审计指定的软件工作产品，以验证其符合性。</p><p>1．在交付给顾客之前，评价可交付的软件产品。</p><p>2．对照指定的软件标准、规程和合同要求，评价软件工作产品。</p><p>3．对偏差进行鉴别和建立文档，并跟踪到结束。</p><p>4．验证纠正措施。</p><p>活动6：SQA组定期向软件工程组报告其活动的结果。</p><p>活动7：按照已文档化的规程，对软件活动和软件工作产品中所鉴别出的偏差，建立文档并加以处理。</p><p>该规程一般规定：</p><p>1．将不符合软件开发计划和指定的项目标准及规程的问题写成文档，并在可能处，与有关的软件作业领导、软件经理或项目经理，一起加以解决。</p><p>2．有些不符合软件开发计划和指定标准及规程的问题，不能与软件作业领导、软件经理或项目经理一起加以解决，将这些不符合问题写成文档，并提交给指定的接收不符合问题的高级经理。</p><p>3．定期评审提交给高级经理的不符合问题，直至解决它们为止。</p><p>4．对不符合问题的文档进行管理和控制。</p><p>活动8：SQA组和顾客的SQA人员一起，适时地对软件质量保证的活动和发现进行定期评审。</p><p>测量与分析（Measurement and Analysis，ME）</p><p>测量1：进行测量，并将测量结果用于确定SQA活动的成本和进度状态。</p><p>测量的例子有：</p><p>──SQA活动的里程碑完成的情况与计划做比较。</p><p>──在SQA活动中完成的工作、所花费的工作量、所消耗的资金与计划做比较。</p><p>──产品审计和活动评审的次数与计划做比较。</p><p>验证实施（Verifying Implementation，VE）</p><p>验证1：高级管理者定期参与评审SQA活动。</p><p>高级管理者定期评审的主要目的，是在合适的抽象层次上，及时地了解和洞察软件过程活动。评审间隔应满足组织的需求，只要已有报告例外情况的合适机制许可，间隔可以长些。</p><p>参考“软件项目跟踪和监督”关键过程域的验证1，以便找到包括高级管理者监督评审典型内容的实践。</p><p>验证2：项目经理定期地、按事件驱动方式参与评审SQA活动。</p><p>参考“软件项目跟踪和监督”关键过程域的验证2，以便找到包括项目管理者监督评审典型内容的实践。</p><p>验证3：独立于SQA组的专家，定期评审SQA组的活动和软件工作产品。</p><h2 id="15《CMM软件质量保证过程文件》"><a href="#15《CMM软件质量保证过程文件》" class="headerlink" title="15《CMM软件质量保证过程文件》"></a><a href="">15</a>《CMM软件质量保证过程文件》</h2><p>《CMM软件质量保证过程文件》编写参考指南</p><p>1．引言(Introduction)</p><p>1.1 目的(Purpose)</p><p>本文档是软件质量保证过程的定义，它规定了角色、进入准则、输入、活动、输出、结束准则等。</p><p>1.2 范围(Scope)</p><p>本文档只适应于软件质量保证过程。</p><p>1.3 术语定义(Terms Glossary)</p><p>[1] 软件相关组：指软件配置管理组、文档支持组、测试组。</p><p>[2] 软件质量保证组：指计划和实施软件质量保证活动的人员的集合。</p><p>1.4 参考资料(References)</p><p>[1] Mark C. Paulk等人，《The Capability Maturity Model Guidelines forimproving the software process》，Carnegie Mellon University Software Engineering Institute</p><p>[2] Mark C. Paulk，《Key practices of the Capability Maturity Model》，Version 1.1，1993</p><p>1.5 相关文档(Related Documents)</p><p>[1] 《软件质量保证程序文件》</p><p>1.6 版本更新记录(Version Updated Record)</p><p>版本更新记录，如表12-8所示。</p><p>表12-8  版本更新记录</p><table><thead><tr><th>版本号</th><th>创建者</th><th>创建日期</th><th>维护者</th><th>维护日期</th><th>维护纪要</th></tr></thead><tbody><tr><td>V1.0</td><td>王大林</td><td>2002/03/03</td><td>—</td><td>—</td><td>—</td></tr><tr><td>V1.0.1</td><td>—</td><td>—</td><td>王小林</td><td>2002/03/16</td><td>进入准则维护</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>2．软件质量保证过程(SQA Process)</p><p>──参与角色(Roles)</p><p>R1：软件质量保证组。</p><p>R2：项目经理。</p><p>R3：软件工程组代表。</p><p>R4：软件相关组代表。</p><p>R5：高级经理。</p><p>──进入准则(Entry Criteria)</p><p>E1：软件项目立项报告或下达任务书。</p><p>E2：组织的责任人到位，且经过软件质量保证过程的培训。</p><p>──输入(Inputs)</p><p>I1：《立项建议书》或《项目合同》。</p><p>I2：《软件开发计划》。</p><p>──活动(Activities)</p><p>A1：SQA组成员与项目经理共同选定开发过程中的标准和规范，并参与《软件开发计划》的评审。</p><p>A2：SQA成员按软件质量保证程序文件编制《SQA计划》，并经过相关组及个人的评审。</p><p>A3：SQA成员按《SQA计划》/《软件开发计划》，参与软件项目的定期或事件驱动的评审与审计活动。</p><p>A4：SQA组对审计出的不符合项，按程序文件进行跟踪处理。</p><p>A5：SQA组按程序文件，及时向相关组及个人报告其活动结果。</p><p>A6：负责软件质量保证的高级经理，处理软件项目内部不能解决的不符合项。</p><p>──输出(Outputs)</p><p>O1：软件质量保证计划。</p><p>O2：软件工程活动评审报告。</p><p>O3：软件工作产品审计报告。</p><p>O4：不符合项跟踪报告。</p><p>──结束准则(Finish Criteria)</p><p>F1：软件项目终止。</p><p>──评审与审计(Reviews andAudits)</p><p>RA1：SQA主管定期参与评审SQA活动。</p><p>RA2：项目经理定期或并事件驱动地参与评审SQA活动。</p><p>──测量(Measurements)</p><p>M1：SQA组成员按程序文件记录SQA活动实际投入的资源、工作量、进度等数据。</p><p>──培训(Training)</p><p>T1：对SQA组成员进行SQA知识定向培训。</p><p>T2：对非SQA组成员，进行软件工程知识定向培训。</p><p>──工具(Tools)</p><p>T1：MS Word。</p><p>T2：MS Project。</p><h2 id="16《CMM软件质量保证程序文件》"><a href="#16《CMM软件质量保证程序文件》" class="headerlink" title="16《CMM软件质量保证程序文件》"></a><a href="">16</a>《CMM软件质量保证程序文件》</h2><p>《CMM软件质量保证程序文件》编写参考指南</p><p>1．引言(Introduction)</p><p>1.1 目的(Purpose)</p><p>本文档是《软件质量保证过程文件》的补充文件，它规定了《软件质量保证过程文件》中的工作产品定义和执行步骤。</p><p>1.2 范围(Scope)</p><p>本文档规定了软件质量保证活动的工作产品及其执行步骤。</p><p>1.3 术语定义(Terms Glossary)</p><p>[1] 工作产品，是指软件生存周期各个阶段所产生的文档化的阶段成果，它包括开发文档、管理文档及软件产品。如软件开发计划、概要设计说明书、源程序等。</p><p>1.4 参考资料(References)</p><p>[1] Mark C. Paulk等人，《The Capability Maturity Model Guidelines forimproving the software process》，Carnegie Mellon University Software Engineering Institute</p><p>[2] Mark C. Paulk，《Key practices of the Capability Maturity Model》，Version 1.1，1993</p><p>1.5 相关文档(Related Documents)</p><p>[1] 《软件质量保证过程文件》</p><p>1.6 版本更新记录(Version Updated Record)</p><p>版本更新记录，如表12-9所示。</p><p>表12-9  版本更新记录</p><table><thead><tr><th>版本号</th><th>创建者</th><th>创建日期</th><th>维护者</th><th>维护日期</th><th>维护纪要</th></tr></thead><tbody><tr><td>V1.0</td><td>王大林</td><td>2002/03/09</td><td>—</td><td>—</td><td>—</td></tr><tr><td>V1.0.1</td><td>—</td><td>—</td><td>王小林</td><td>2002/03/26</td><td>术语定义维护</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>2．软件质量保证过程(SQA Process)</p><p>2.1 软件质量保证策划程序(SQA Planning)</p><p>──工作产品(Work Product)</p><p>W1：SQA计划。</p><p>W2：SQA计划评审报告。</p><p>──执行步骤(Execute Step)</p><p>E1：SQA组为软件项目指派SQA成员，并确定其岗位职责。</p><p>E2：SQA成员在项目早期，参与制定该软件项目的SQA计划。</p><p>E3：SQA成员与项目经理协商识别出该项目的质量保证对象，即该项目的工作产品。</p><p>E4：参照《软件质量保证计划制定指南》，制定出该项目的《SQA计划》。</p><p>E5：SQA成员估算每个质量保证活动的工作量和所需资源。</p><p>E6：项目经理、SQA组、软件相关组评审《SQA计划》。</p><p>E7：项目软件开发计划更改时，SQA成员适时调整《SQA计划》。</p><p>2.2 定期或事件驱动的评审与审计(Periodic Review and Audit or Review and Audit Drivenby Event)</p><p>──工作产品(Work Product)</p><p>W1：评审报告。</p><p>W2：不符合项跟踪表。</p><p>──执行步骤(Execute Step)</p><p>E1：按照SQA计划，项目组提交工作产品给SQA成员。</p><p>E2：SQA成员对提交的工作产品进行评审或审计。</p><p>E3：SQA成员填写《评审报告》及《不符合项跟踪表》。</p><p>2.3 跟踪处理不符合项(Tracking and Resolution of Noncompliance Items)</p><p>──工作产品(Work Product)</p><p>W1：不符合项跟踪表。</p><p>──执行步骤(Execute Step)</p><p>E1：SQA成员对每次质量保证活动后产生的不符合项，编制《不符合项跟踪表》。</p><p>E2：SQA成员将《不符合项跟踪表》通知项目经理，项目组解决后反馈给SQA成员。</p><p>E3：SQA成员对解决的内容进行验证。</p><p>E4：SQA成员将项目经理解决不了、或不能由项目经理解决的问题，提交给高层经理解决。</p><p>E5：SQA成员对高层经理解决的情况，进行跟踪记录。</p><p>2.4 报告活动结果(Report of Activity Results)</p><p>──工作产品(Work Product)</p><p>W1：SQA工作报告。</p><p>──执行步骤(Execute Step)</p><p>E1：SQA成员编制《SQA工作报告》。</p><p>E2：SQA成员将《SQA工作报告》提交给相关经理、相关组及个人。</p><p>2.5 软件质量保证管理评审(Assurance Review of Software Quality)</p><p>──工作产品(Work Product)</p><p>W1：SQA管理过程评审报告。</p><p>──执行步骤(Execute Step)</p><p>E1：SQA组长定期或以事件驱动方式组织召开SQA管理过程评审会。</p><p>E2：参加评审会的成员为高级经理、项目经理、独立于SQA组的外部专家。</p><p>E3：SQA组长整理《SQA管理过程评审报告》，并改进SQA组的工作。</p><p>2.6 记录测量数据(Record of Measurement Data)</p><p>──工作产品(Work Product)</p><p>W1：软件质量保证活动度量表。</p><p>──执行步骤(Execute Step)</p><p>E1：项目组的SQA成员，每周记录软件质量保证活动，填写到《软件质量保证活动度量表》；</p><p>E2：SQA成员定期或项目完成后，将度量记录汇总，通报给高级经理和项目经理。</p><h2 id="17《软件质量保证计划》"><a href="#17《软件质量保证计划》" class="headerlink" title="17《软件质量保证计划》"></a><a href="">17</a>《软件质量保证计划》</h2><p>《软件质量保证计划》编写参考指南</p><p>1．引言(Introduction)</p><p>1.1 目的(Purpose)</p><p>软件质量保证计划建立的目的，是为了使软件质量保证组及项目组双方能以此软件质量保证计划为依据，执行一系列的SQA活动，从而对软件过程和软件产品的质量提供可视性管理。</p><p>1.2 范围(Scope)</p><p>本文档适应于软件项目的质量保证全过程。</p><p>1.3 术语定义(Terms Glossary)</p><p>[1] 软件质量：指软件产品满足用户明确和隐含需求的能力特性的总和。</p><p>[2] 软件质量保证组：指计划和实施软件质量保证活动的人员集合。</p><p>1.4 参考资料(References)</p><p>[1] 列出有关的参考资料1。</p><p>[2] 列出有关的参考资料2。</p><p>1.5 相关文档(Related Documents)</p><p>[1] 列出有关的软件合同。</p><p>[2] 列出有关的软件任务书。</p><p>1.6 版本更新记录(Version Updated Record)</p><p>版本更新记录格式，如表14-3所示。</p><p>表14-3  版本更新记录</p><table><thead><tr><th>版本号</th><th>创建者</th><th>创建日期</th><th>维护者</th><th>维护日期</th><th>维护纪要</th></tr></thead><tbody><tr><td>V1.0</td><td>王大林</td><td>2001/04/03</td><td>—</td><td>—</td><td>—</td></tr><tr><td>V1.0.1</td><td>—</td><td>—</td><td>王小林</td><td>2001/04/18</td><td>管理机构维护</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>2．管理机构(Management Organization)</p><p>2.1 机构(Organization)</p><p>质量保证活动组织关系图见图14-1，它给出了软件组织内部与软件质量保证活动有关的各个小组及个人之间的关系。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image007.png" alt="img"> </p><p>图14-1  质量保证活动组织关系图</p><p>2.2 职责(Responsibility)</p><p>说明与软件质量保证活动有关的各个小组及个人的责任，如表14-4所示。</p><p>表14-4  与软件质量保证活动有关的各个小组及个人的责任</p><table><thead><tr><th>小组及个人名称</th><th>责      任</th></tr></thead><tbody><tr><td>高级经理</td><td>负责小组之间、部门之间、组织内外的沟通协调</td></tr><tr><td>项目经理</td><td>负责整个软件项目的业务、技术、资源、活动</td></tr><tr><td>软件质量保证组长</td><td>保证软件项目的标准、规程、约定得到遵守</td></tr><tr><td>软件质量保证成员</td><td>制定软件质量保证计划，组织软件质量保证活动，书写软件质量保证报告。重点是对软件工作产品进行评审与审计</td></tr></tbody></table><p>续表表</p><table><thead><tr><th>小组及个人名称</th><th>责      任</th></tr></thead><tbody><tr><td>测试组</td><td>制定测试计划、用例，组织测试活动，书写测试报告</td></tr><tr><td>软件工程组</td><td>软件工程项目的分析、设计、编程、测试、培训、实施</td></tr><tr><td>配置管理组</td><td>软件基线、配置项的认定，配置活动审定，配置资源保证</td></tr><tr><td>同行专家</td><td>同行专家（外部专家）评审</td></tr></tbody></table><p>3．质量保证活动(SQA Activities)</p><p>表14-5是《软件质量保证计划任务进度表》(Schedule for SQA)（又称软件质量保证活动表），该表是根据《软件质量保证程序文件》的内容制定的，建议读者将两者结合起来阅读。</p><p>表14-5  软件质量保证计划任务进度表</p><table><thead><tr><th>序  号</th><th>工作产品名称</th><th>组  织 者</th><th>参  加 者</th><th>计划日期</th><th>实际日期</th><th>计划工作量</th><th>实际工作量</th><th>计划资金</th><th>实际资金</th><th>计划评审次数</th><th>实际评审次数</th></tr></thead><tbody><tr><td>1</td><td>《SQA计划》</td><td>SQA成员</td><td>项目经理、软件相关组</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td>《SQA计划》评审报告</td><td>SQA成员</td><td>项目经理、软件相关组及个人</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td>《用户需求报告》评审报告</td><td>项目经理</td><td>用户、SQA成员、软件相关组、外部专家</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>4</td><td>《用户需求报告》不符合项跟踪表</td><td>SQA成员</td><td>项目经理、软件相关组</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>5</td><td>《软件需求规格说明书》评审报告</td><td>SQA成员</td><td>项目经理、软件相关组</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>6</td><td>《软件需求规格说明书》不符合项跟踪表</td><td>SQA成员</td><td>项目经理、软件相关组</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>7</td><td>《概要设计说明书》评审报告</td><td>SQA成员</td><td>项目经理、软件相关组</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>8</td><td>《概要设计说明书》不符合项跟踪表</td><td>SQA成员</td><td>项目经理、软件相关组</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>续表表</p><table><thead><tr><th>序  号</th><th>工作产品名称</th><th>组  织 者</th><th>参  加 者</th><th>计划日期</th><th>实际日期</th><th>计划工作量</th><th>实际工作量</th><th>计划资金</th><th>实际资金</th><th>计划评审次数</th><th>实际评审次数</th></tr></thead><tbody><tr><td>9</td><td>《详细设计说明书》评审报告</td><td>SQA成员</td><td>项目经理、软件相关组</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>10</td><td>《详细设计说明书》不符合项跟踪表</td><td>SQA成员</td><td>项目经理、软件相关组</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>11</td><td>《Alpha测试报告》评审报告</td><td>SQA成员</td><td>项目经理、测试组</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>12</td><td>《Beta测试报告》评审报告</td><td>项目经理</td><td>用户、SQA成员、测试组</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>13</td><td>《用户使用手册》评审报告</td><td>SQA成员</td><td>项目经理、SCM组、软件相关组</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>14</td><td>《用户安装手册》评审报告</td><td>SQA成员</td><td>项目经理、SCM组、软件相关组</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>15</td><td>《系统管理手册》评审报告</td><td>SQA成员</td><td>项目经理、SCM组、软件相关组</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>16</td><td>《SQA工作报告》评审报告</td><td>SQA组长</td><td>高级经理、项目经理、软件相关组</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>17</td><td>《SQA管理过程》评审报告</td><td>SQA组长</td><td>高级经理、项目经理、外部专家</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>18</td><td>软件质量保证活动度量表</td><td>SQA成员</td><td>高级经理、项目经理</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>其中，用户需求报告评审和Beta测试报告评审的组织者均为项目经理，这是因为这两次评审均需用户参与，并且要用户确认。</p><p>4．工具、技术和方法(Tools，Technique and Methods)</p><p>根据需要，指明SQA计划中用到的工具、技术和方法。</p><p>5．对供货商的控制(Controls to the Suppliers) </p><p>供货商包括软件外包商和软件产品销售商，对外包商承包开发软件的过程管理，要按照CMM2的关键过程域“软件子合同管理”(SoftwareSubcontract Management)进行管理。对销售软件产品的销售商，要按照软件组织事先定义好的标准进行控制。</p><p>6．活动记录的收集和整理(Collecting，Maintaining and Keep Records)</p><p>对SQA计划实施中的活动记录要整理入库，长期保存，由它可生成《软件质量保证活动度量表》，送给高级经理、项目经理阅读。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0112.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;实用软件工程文档汇编&lt;br&gt;
    
    </summary>
    
      <category term="Document" scheme="http://www.iskei.cn/categories/Document/"/>
    
    
      <category term="Document" scheme="http://www.iskei.cn/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>医院信息管理信息系统</title>
    <link href="http://www.iskei.cn/posts/8499.html"/>
    <id>http://www.iskei.cn/posts/8499.html</id>
    <published>2018-02-04T07:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.033Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0111.jpg" alt="image"></p><p>本手册以系统中的各功能模块为线索，以医院服务主要流程为导向，简单描述了医院信息管理系统中各主要模块的功能及操作方法，主要面向广大的软东医院信息管理系统的用户，目的在于协助其尽快掌握软件的基础使用与操作，同时也可以作为集中培训的基础教材。<br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><a href="">前言</a></h1><p>因本手册其旨在于给医院各岗位工作人员提供快速操作指导，内容不足之处，敬请原谅，若有疑难问题请致电公司客服中心，我们将竭诚为您服务！</p><h1 id="系统简介"><a href="#系统简介" class="headerlink" title="系统简介"></a><a href="">系统简介</a></h1><p>“软东医院信息管理信息系统”是一套集成门诊挂号收费、住院收费、</p><p>药品管理等工作站的医院网络管理系统，本系统适应于二级医院，它操作简单方便，性能稳定；支持按大类收费和明细收费；大类项目和明细项目都能自定义；支持多种发票格式和收据格式，并且每种发票格式都可以自由修改；药品管理部分参考了国外一些优秀医院网络系统的先进经验，具有完善的药品进销存管理包括药品调价报损退库等强到管理功能，处方从门诊收费到药房完全通过网络传输，完全实现无纸化，数据一次性发生，摆药发药全部自动完成，99% 以上的操作实现了零输入。本系统采用先进的服务器客户端结构，客户端运行的只是和用户交互的界面，安装方便，对硬件的要求也极低，只要能运行winXP 以上操作系统的计算机都能正常运行。</p><h1 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a><a href="">系统配置</a></h1><table><thead><tr><th>服 务 器</th><th>硬件最低配置</th><th>2.0G CPU/2G内存/250G双硬盘</th></tr></thead><tbody><tr><td>硬件推荐配置</td><td>2.8G CPU/4G内存/500G双硬盘  支持Raid-1</td><td></td></tr><tr><td>操作系统</td><td>Windows 2003 server</td><td></td></tr><tr><td>数据库平台</td><td>MS SQLserver2008</td><td></td></tr><tr><td>工 作 站</td><td>操作系统Windows 2003/XP</td></tr></tbody></table><h1 id="系统登录"><a href="#系统登录" class="headerlink" title="系统登录"></a><a href="">系统登录</a></h1><p>点击RdClientManage.exe<img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image002.jpg" alt="img">进入系统后，会有登录界面出现。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image004.jpg" alt="img"></p><p>输入用户名的助记码，按回车键，如果用户存在，系统将自动显示该用户所对应的科室，输入口令，单击登录或者按回车键。如果口令正确，将根据系统管理员设置给该操作员的权限来登录系统。若口令不正确，系统将提示错误信息。如果不想进入系统点击取消即可。</p><h1 id="门诊部分"><a href="#门诊部分" class="headerlink" title="门诊部分"></a><a href="">门诊部分</a></h1><h2 id="1-1挂号管理"><a href="#1-1挂号管理" class="headerlink" title="1.1挂号管理"></a><a href="">1.1</a>挂号管理</h2><h3 id="1-1-1门急诊挂号"><a href="#1-1-1门急诊挂号" class="headerlink" title="1.1.1门急诊挂号"></a>1.1.1门急诊挂号</h3><p>  在左边导航栏中出现“挂号管理”的子系统图标，右边会列出挂号管理子系统的主要模块。如下!</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image006.jpg" alt="img"></p><p>找到门急诊挂号模块图标点击进入。如下!</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image008.jpg" alt="img"></p><p>根据要求填写相关信息，输入病人姓名等信息，可以使用回车键进行下一栏的输入（诊疗号不需要手动输入，系统会自动生成），填写完之后单击‘保存’，保存的病人信息会在挂号信息处显示。(保存完成后，系统会自动产生诊疗号和门诊号)如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image010.jpg" alt="img"></p><p>如果要查看是否有预约患者的话，可以单击预约患者信息来查看。</p><p>如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image012.jpg" alt="img"></p><p>如果未领票或票已用完系统也会给出提示信息.<img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image013.gif" alt="img"></p><p>如果在保存之前不对该病人进行信息输入，可以单击‘取消’。保存之前，但是信息已经输入完整，可以对该病人信息进行‘删除’。操作完成后，单击‘退出’以退出该界面。</p><h3 id="1-1-2-挂号退号"><a href="#1-1-2-挂号退号" class="headerlink" title="1.1.2 挂号退号"></a>1.1.2 挂号退号</h3><p>   在挂号管理窗口中选择挂号退号，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image015.jpg" alt="img"></p><p>输入该病人所对应的发票号或门诊号，单击‘查询’，选中该病人信息，单击‘确定’即可对该病人进行退号。发票号或门诊号输入错误时，单击‘取消’，重新输入。</p><h3 id="1-1-3-门诊病人信息修改"><a href="#1-1-3-门诊病人信息修改" class="headerlink" title="1.1.3 门诊病人信息修改"></a>1.1.3 门诊病人信息修改</h3><p>  在挂号管理窗口中选择门诊病人信息修改，进入如下界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image017.jpg" alt="img"></p><p>输入病人挂号时的门诊号或诊疗号，单击‘查询’，就可以对查出来的病人的信息进行修改，修改完成后单击‘确定’，否则单击‘取消’，操作完成后单击‘退出’。</p><p>1.1.5 操作员挂号报账单</p><p>在挂号管理窗口中选择专家挂号，进入如下界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image019.jpg" alt="img"></p><p>选择起始时间和结束时间以及需要的统计类型和打印方式、所要报账的操作员，单击确定。</p><h3 id="1-2-1门诊管理"><a href="#1-2-1门诊管理" class="headerlink" title="1.2.1门诊管理"></a>1.2.1门诊管理</h3><p>  在左边导航栏中找到门诊医生站子系统图标点击进入门诊管理子系统，右边会列出门诊管理子系统的主要模块。找到门诊医生工作站模块图标点击进入。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image020.gif" alt="img"><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image022.jpg" alt="img"></p><p>门诊医生工作站窗口打开：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image024.jpg" alt="img"></p><p>如果病人是按专家挂号或者选择了相关医师，那么就选择左边的‘个人’按钮，如果病人按科室挂号，那么就选择左边的‘科室’按钮。</p><p>如果挂过号的病人信息没有出现，那么就单击‘刷新列表’。</p><p>若病人信息为白色，可以按鼠标右键，弹出菜单，点击‘呼叫病人’就可以将病人转化为待诊状态。</p><p>也可以将处于待诊状态的病人通过按鼠标右键的方法将其转为续诊。</p><p>若病人信息为橘黄色，则表明该病人处于待诊状态，可以就诊，双击病人信息，就会将病人的详细信息输出，如图所示：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image026.jpg" alt="img"></p><p>.医生可以根据病人的情况填写相关内容（门诊病历、检查治疗、药品处方）。在填写过程中，输入栏中出现<img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image028.gif" alt="img">图标时，表示可以进行选择，也可以手动输入。如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image030.gif" alt="img"></p><p>使用<img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image032.gif" alt="img">从待选项移到已选项，也可以手动输入进行筛选，然后单击‘确定’。</p><p>在输入‘检查治疗’‘药品处方’‘中草药处方’时，单击‘新增’就可以输入相关内容，选择处方内容时，可以输入药品名称汉语拼音的第一个字母按‘回车键’就可以出现相关信息，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image034.jpg" alt="img"></p><p>完成后单击‘保存’， </p><h3 id="1-2-2诊断证明"><a href="#1-2-2诊断证明" class="headerlink" title="1.2.2诊断证明"></a>1.2.2诊断证明</h3><p>在右边列出的门诊管理子系统的主要模块中找到诊断证明模块图标点击进入。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image036.jpg" alt="img"></p><h3 id="1-2-3个人处方维护"><a href="#1-2-3个人处方维护" class="headerlink" title="1.2.3个人处方维护"></a>1.2.3个人处方维护</h3><p>在右边列出的门诊管理子系统的主要模块中找到个人处方模块图标点击进入：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image038.jpg" alt="img"></p><p>个人处方维护所列出的组合名称只能为常用药品、常用检查、常用检验，在此维护的信息将在门诊医生工作站处调用。</p><h3 id="1-2-4门诊医生接诊患者信息查询"><a href="#1-2-4门诊医生接诊患者信息查询" class="headerlink" title="1.2.4门诊医生接诊患者信息查询"></a>1.2.4门诊医生接诊患者信息查询</h3><p>在右边列出的门诊管理子系统的主要模块中找到门诊医生急诊患者信息查询模块图标点击进入。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image040.jpg" alt="img"></p><p>输入要查询的条件，单击‘查询’即可找到要查询的科室、医师所对应的所有病人信息。</p><h2 id="1-3-门诊收费站"><a href="#1-3-门诊收费站" class="headerlink" title="1.3 门诊收费站"></a><a href="">1.3 </a>门诊收费站</h2><h3 id="1-3-1门诊划价收费"><a href="#1-3-1门诊划价收费" class="headerlink" title="1.3.1门诊划价收费"></a>1.3.1门诊划价收费</h3><p>在左边导航栏中找到门诊管理子系统，右边会列出门诊收费站子系统的主要模块。找到门诊划价收费模块图标点击进入。输入就诊号或挂号号如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image042.jpg" alt="img"></p><p>单击‘确定’，屏幕中会列出该病人所有要划价的费用，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image044.jpg" alt="img"></p><p>单击‘保存’，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image046.jpg" alt="img"></p><p>最后单击确定即可。如果以上信息输入不正确，可以单击‘取消’，重新输入。</p><h3 id="1-3-2-病人信息维护"><a href="#1-3-2-病人信息维护" class="headerlink" title="1.3.2 病人信息维护"></a>1.3.2 病人信息维护</h3><p>在右边的主要模块中找到病人信息维护模块图标点击进入，如图：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image048.jpg" alt="img"></strong></p><p>根据需要输入相关信息（所有部门、检索条件、是否在院都是可选的），单击回车键或‘查询‘按钮，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image050.jpg" alt="img"></p><p>选中要修改的病人，单击‘编辑’按钮，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image052.jpg" alt="img"></p><p>修改完成后单击‘确定’即可。</p><h3 id="1-3-3-门诊发票重打"><a href="#1-3-3-门诊发票重打" class="headerlink" title="1.3.3 门诊发票重打"></a>1.3.3 门诊发票重打</h3><p>在右边的主要模块中找到门诊发票重打模块图标点击进入，如图：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image054.jpg" alt="img"></strong></p><p>单击要重新打印的发票或输入要打印的发票号，单击‘确定‘，如图;</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image056.jpg" alt="img">需要重打的话单击‘确定‘，不需要的话单击‘取消’。</p><h3 id="1-3-4-门诊退费"><a href="#1-3-4-门诊退费" class="headerlink" title="1.3.4 门诊退费"></a>1.3.4 门诊退费</h3><p>在右边的主要模块中找到门诊退费模块图标点击进入，输入诊疗号或发票号，如图：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image058.jpg" alt="img"></strong></p><p>双击该发票号对应的信息，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image060.jpg" alt="img"></p><p>选择要退的费用，单击‘保存’</p><p>如图：<img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image062.jpg" alt="img"> 单击‘确定’即可退费，否则不退费。</p><h3 id="1-3-5-门诊日结账（在启用日结配置的情况下才能使用）"><a href="#1-3-5-门诊日结账（在启用日结配置的情况下才能使用）" class="headerlink" title="1.3.5 门诊日结账（在启用日结配置的情况下才能使用）"></a>1.3.5 门诊日结账（在启用日结配置的情况下才能使用）</h3><p>在右边的主要模块中找到门诊操作员结账模块图标点击进入，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image064.jpg" alt="img"></p><p>根据具体需要进行选择。</p><h3 id="1-3-6-结账信息取消（该功能慎用）"><a href="#1-3-6-结账信息取消（该功能慎用）" class="headerlink" title="1.3.6 结账信息取消（该功能慎用）"></a>1.3.6 结账信息取消（该功能慎用）</h3><p>在右边的主要模块中找到结账信息取消模块图标点击进入，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image066.jpg" alt="img"></p><p>输入要撤销结账的操作员代码，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image068.jpg" alt="img"></p><p>如果要撤销记账的话，选中要撤销的账目，如果需要的话选中删除结账信息单选框，直接单击‘撤销结账数据’，如图：<img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image070.jpg" alt="img"></p><h1 id="住院部分"><a href="#住院部分" class="headerlink" title="住院部分"></a><a href="">住院部分</a></h1><p>根据系统管理员设置给该操作员的权限来登录系统。若口令不正确，系统将提示错误信息。如果不想进入系统点击取消即可。点击左边的住院管理系统，右边会出现相关模块</p><h2 id="2-1入院"><a href="#2-1入院" class="headerlink" title="2.1入院"></a><a href="">2.1</a>入院</h2><h3 id="2-1-1-入院登记"><a href="#2-1-1-入院登记" class="headerlink" title="2.1.1 入院登记"></a>2.1.1 入院登记</h3><p>双击右边的入院登记模块进入如图界面：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image072.jpg" alt="img"></strong></p><p>单击‘新增’按钮，输入要住院的病人信息（从‘姓名栏’开始可以用‘回车键’依次输入其他信息），单击保存，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image074.jpg" alt="img">然后单击‘确定’，出现如下对话框：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image076.jpg" alt="img">如果要打印病历首页的话，单击‘确定’，否则单击‘取消’。</p><h3 id="2-1-2-新生儿入院登记"><a href="#2-1-2-新生儿入院登记" class="headerlink" title="2.1.2 新生儿入院登记"></a>2.1.2 新生儿入院登记</h3><p>双击右边的新生儿入院登记模块进入如图界面：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image078.jpg" alt="img"></strong></p><p>单击‘新增’，输入相关信息（输入母亲的住院号，按‘回车键’进行其他项的选择），完成后单击 ‘保存’，出现如下对话框：<img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image080.jpg" alt="img"></p><p>再次输入母亲住院号，单击回车键，会出现对应孩子的信息，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image082.jpg" alt="img"></p><p>双击该婴儿的信息，就可以对婴儿信息进行编辑。</p><h3 id="2-1-3-入院登记许可项配置"><a href="#2-1-3-入院登记许可项配置" class="headerlink" title="2.1.3 入院登记许可项配置"></a>2.1.3 入院登记许可项配置</h3><p>双击右边的入院登记许可项配置模块进入如图界面：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image084.jpg" alt="img"></strong></p><p>对需要的项打上勾，然后单击提交。</p><h2 id="2-2住院医生站"><a href="#2-2住院医生站" class="headerlink" title="2.2住院医生站"></a><a href="">2.2</a>住院医生站</h2><h3 id="2-2-1-导航管理"><a href="#2-2-1-导航管理" class="headerlink" title="2.2.1 导航管理"></a>2.2.1 导航管理</h3><p>双击右边的导航管理模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image086.jpg" alt="img"></p><p>选中某一病人，单击鼠标右键，会出现长期医嘱、临时医嘱、账目查询、电子病历、床头卡等选项，根据需要进行选择。</p><p>例：建立长期医嘱：如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image088.jpg" alt="img"></p><p>单击‘新增’，输入要增加的长期医嘱，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image090.jpg" alt="img"></p><p>输入完成后，单击保存，如图：<img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image092.jpg" alt="img">，保存完成后，要进行‘确认’，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image094.jpg" alt="img"></p><p>之后再单击‘保存’，如图</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image096.jpg" alt="img"></p><p>如果确定该遗嘱的话，单击确定即可，否则单击取消，对该医嘱进行‘追加’、‘修改’、‘作废’等操作。对该病人进行长期医嘱时，也可填写临时医嘱。</p><h3 id="2-2-2-住院电子病历"><a href="#2-2-2-住院电子病历" class="headerlink" title="2.2.2 住院电子病历"></a>2.2.2 住院电子病历</h3><p>双击右边的住院电子病历模块进入如图界面：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image098.jpg" alt="img"></strong></p><p>用鼠标选中左边的病人信息，右击鼠标，会出现收治患者、病案首页、书写病历、病历套打、会诊管理等选项，根据要求进行选择。</p><p>例： ‘病案首页’：（如果登录医生不是该病人的主治医生，那么如果要为该病人书写病案首页时，就要先收治该病人）</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image100.jpg" alt="img"></p><p>填写病人的基本情况、诊断情况、治疗情况，完成后单击‘保存’即可。</p><h2 id="2-3住院收费"><a href="#2-3住院收费" class="headerlink" title="2.3住院收费"></a><a href="">2.3</a>住院收费</h2><h3 id="2-3-1-住院划价记账"><a href="#2-3-1-住院划价记账" class="headerlink" title="2.3.1 住院划价记账"></a>2.3.1 住院划价记账</h3><p>双击右边的住院划价记账模块进入如图界面：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image102.jpg" alt="img"></strong></p><p>可以在对应的科室下面选择病人，也可以输入病人的住院号，按回车键调出病人的相关信息，输入执行科室和收费项目（收费项目可以输入项目的汉语拼音的第一个字母按回车键进行选择），然后单击保存。如果该病人余额不足，如果有“欠费权限的话”可以在‘允许欠费’栏输入金额或者在有担保人的情况下可以填写相关的担保金额。</p><h3 id="2-3-2-允许欠费金额设置"><a href="#2-3-2-允许欠费金额设置" class="headerlink" title="2.3.2 允许欠费金额设置"></a>2.3.2 允许欠费金额设置</h3><p>双击右边的允许欠费金额设置模块进入如图界面：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image104.jpg" alt="img"></strong></p><p>输入相关的检索条件，单击‘查询’，就可以调出该病人的信息（用以核对），如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image106.jpg" alt="img"></p><p>然后在设定允许欠费金额文本框中输入允许欠费金额，单击‘设定’，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image108.jpg" alt="img"></p><p>表示设定成功。</p><h3 id="2-3-8-增加担保人"><a href="#2-3-8-增加担保人" class="headerlink" title="2.3.8 增加担保人"></a>2.3.8 增加担保人</h3><p>双击右边的增加担保人模块进入如图界面：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image110.jpg" alt="img"></strong></p><p>在左边的菜单栏根据科室选择病人或输入病人的住院号，按‘回车键’调出病人的相关信息，然后填写担保人、担保金额等内容。输入完成后，单击‘保存’即可。</p><h3 id="2-3-3-预交款管理"><a href="#2-3-3-预交款管理" class="headerlink" title="2.3.3 预交款管理"></a>2.3.3 预交款管理</h3><p>双击右边的预交款管理模块进入如图界面：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image112.jpg" alt="img"></strong></p><p>在左边的菜单栏根据科室选择病人或输入住院号，按回车键，调出病人的相关信息，然后输入缴款金额，单击‘收费’按钮即可，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image114.jpg" alt="img"></p><p>该页面的下面还会出现该病人的明细账信息，如果要该病人要退费的话，可以选择相关的要退的费用，单击‘退费’按钮即可，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image116.jpg" alt="img"></p><h3 id="2-3-4-预交款发票重打"><a href="#2-3-4-预交款发票重打" class="headerlink" title="2.3.4 预交款发票重打"></a>2.3.4 预交款发票重打</h3><p>双击右边的预交款发票重打模块进入如图界面：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image118.jpg" alt="img"></strong></p><p>在左边的菜单中根据科室选择病人或输入住院号，按回车键，页面中会出现该病人所有的预交款信息，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image120.jpg" alt="img"></p><p>选择要重打的发票，单击‘重打’按钮进行重打，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image122.jpg" alt="img"></p><p>单击‘确定’即可重打，否则‘取消’。</p><h3 id="2-3-5-住院收入按科室统计"><a href="#2-3-5-住院收入按科室统计" class="headerlink" title="2.3.5 住院收入按科室统计"></a>2.3.5 住院收入按科室统计</h3><p>双击右边的住院收入按科室统计模块进入如图界面：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image124.jpg" alt="img"></strong></p><p>选择要统计的起止时间、科室等信息，单击‘确定’即可。</p><h3 id="2-3-6-住院收入按医师统计"><a href="#2-3-6-住院收入按医师统计" class="headerlink" title="2.3.6 住院收入按医师统计"></a>2.3.6 住院收入按医师统计</h3><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image126.jpg" alt="img"></strong></p><p>选择要统计的起止时间、医师等信息，单击‘确定’即可。</p><h3 id="2-3-7-病人费用类别修改"><a href="#2-3-7-病人费用类别修改" class="headerlink" title="2.3.7 病人费用类别修改"></a>2.3.7 病人费用类别修改</h3><p>双击右边的病人费用类别修改模块进入如图界面：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image128.jpg" alt="img"></strong></p><p>输入住院号，按回车键调出病人基本信息，然后输入要修改的病人费用类别信息，单击‘转换’即可。</p><h3 id="2-3-9-住院退费"><a href="#2-3-9-住院退费" class="headerlink" title="2.3.9 住院退费"></a>2.3.9 住院退费</h3><p>双击右边的住院退费模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image130.jpg" alt="img"></p><p>在左边的菜单中根据科室选择病人或输入住院号，按回车键调出病人的相关信息和相关费用，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image132.jpg" alt="img"></p><p>选中需要退的费用，然后单击‘保存’，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image134.jpg" alt="img"></p><p>需要退的话，单击‘确定’，否则单击‘取消’。</p><p>退费成功后，可以单击‘显示退费’，即可以看到该病人的退费情况。如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image136.jpg" alt="img"></p><h3 id="2-3-10-滚动退费"><a href="#2-3-10-滚动退费" class="headerlink" title="2.3.10 滚动退费"></a>2.3.10 滚动退费</h3><p>双击右边的滚动退费模块进入如图界面：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image138.jpg" alt="img"></strong></p><p>在左边的菜单中根据科室选择病人或输入住院号，按回车键调出病人信息和相关的滚动费用，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image140.jpg" alt="img"></p><p>选择要退的滚动费用，单击保存即可，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image142.jpg" alt="img"></p><h3 id="2-3-11-病人账目查询"><a href="#2-3-11-病人账目查询" class="headerlink" title="2.3.11 病人账目查询"></a>2.3.11 病人账目查询</h3><p>双击右边的病人账目查询模块进入如图界面：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image144.jpg" alt="img"></strong></p><p>输入病人的住院号，按回车键，调出病人的相关信息。如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image146.jpg" alt="img"></p><p>可以通过按‘总账信息’，‘明细账信息’，‘未发药品信息’，‘未记账医嘱’按钮得出相关信息。</p><h3 id="2-3-12-病人账目结算"><a href="#2-3-12-病人账目结算" class="headerlink" title="2.3.12 病人账目结算"></a>2.3.12 病人账目结算</h3><p>双击右边的病人账目结算模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image148.jpg" alt="img"></p><p>输入病人的住院号，按回车键调出病人信息，（如果该病人有未发药品，系统会出现如下对话框：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image150.jpg" alt="img"></p><p>发药动作完成后，就可以正常结算，单击‘确定’，会出现“确定现在办理患者结算手续吗”的对话框，单击‘确定’即可办理结算手续，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image152.jpg" alt="img"></p><p>。</p><h3 id="2-3-13-结算召回"><a href="#2-3-13-结算召回" class="headerlink" title="2.3.13 结算召回"></a>2.3.13 结算召回</h3><p>  双击右边的结算召回模块进入如图界面：</p><p>  <img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image154.jpg" alt="img"></p><p>在左边的菜单中根据科室选择结算的病人信息或输入要召回的病人的住院号，单击‘查询’，如果确定要召回该病人的话就单击‘确定’，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image156.jpg" alt="img"></p><h3 id="2-3-14-住院结账"><a href="#2-3-14-住院结账" class="headerlink" title="2.3.14 住院结账"></a>2.3.14 住院结账</h3><p>双击右边的住院结账模块进入如图界面：</p><h3 id="2-3-15-催拖欠款"><a href="#2-3-15-催拖欠款" class="headerlink" title="2.3.15 催拖欠款"></a>2.3.15 催拖欠款</h3><p>  双击右边的催拖欠款模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image158.jpg" alt="img"></p><p>以上即为所有欠款病人的信息。</p><h3 id="2-3-16出院发票重打"><a href="#2-3-16出院发票重打" class="headerlink" title="2.3.16出院发票重打"></a>2.3.16出院发票重打</h3><p>双击右边的出发票重打模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image160.jpg" alt="img"></p><p>左边的菜单会列出相关的出院病人信息，选择出院病人或输入住院号，按回车键调出出院的病人信息，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image162.jpg" alt="img"></p><p>单击‘确定’即可完成发票重打。</p><h3 id="2-3-17-出院收入按医师统计"><a href="#2-3-17-出院收入按医师统计" class="headerlink" title="2.3.17 出院收入按医师统计"></a>2.3.17 出院收入按医师统计</h3><p>  双击右边的出院收入按医师统计模块进入如图界面：</p><p> <img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image164.jpg" alt="img"></p><p>输入要统计的信息，按‘确定’即可。</p><h3 id="2-3-18出院收入按科室统计"><a href="#2-3-18出院收入按科室统计" class="headerlink" title="2.3.18出院收入按科室统计"></a>2.3.18出院收入按科室统计</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image166.jpg" alt="img"></p><p>输入要统计的信息，按‘确定’即可。</p><h3 id="2-3-19出院病人账目查询"><a href="#2-3-19出院病人账目查询" class="headerlink" title="2.3.19出院病人账目查询"></a>2.3.19出院病人账目查询</h3><p>双击右边的出院病人账目查询模块进入如图界面：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image168.jpg" alt="img"></strong></p><p>输入要查询的病人的住院号，按‘回车键’调出病人的相关信息，通过按‘总账信息’，‘明细账信息’查出对应的账目信息。</p><h2 id="2-4护士站"><a href="#2-4护士站" class="headerlink" title="2.4护士站"></a><a href="">2.4</a>护士站</h2><h3 id="2-4-1-导航管理"><a href="#2-4-1-导航管理" class="headerlink" title="2.4.1 导航管理"></a>2.4.1 导航管理</h3><p><strong>  </strong>双击右边的导航管理模块进入如图界面：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image170.jpg" alt="img"></strong></p><p>选择要执行医嘱的病人信息，按鼠标左键，会出现长期医嘱、临时医嘱、床位调整、账目查询、出院结算等选项卡。以长期医嘱为例，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image172.jpg" alt="img"></p><p>如果该护士对该病人执行了以上操作，就可以单击‘查对’，如果病人余额不足，就可以选择部分查对，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image174.jpg" alt="img"></p><h3 id="2-4-2-长期医嘱单"><a href="#2-4-2-长期医嘱单" class="headerlink" title="2.4.2 长期医嘱单"></a>2.4.2 长期医嘱单</h3><p>双击右边的长期医嘱单模块进入如图界面：</p><p><strong><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image176.jpg" alt="img"></strong></p><p>输入已经执行的长期医嘱的病人的住院号，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image178.jpg" alt="img"></p><p>单击确定，就可以看到该病人的长期医嘱单。</p><h3 id="2-4-3-临时医嘱单"><a href="#2-4-3-临时医嘱单" class="headerlink" title="2.4.3 临时医嘱单"></a>2.4.3 临时医嘱单</h3><p>临时医嘱单的操作同长期医嘱单。</p><h3 id="2-4-4-转床管理"><a href="#2-4-4-转床管理" class="headerlink" title="2.4.4 转床管理"></a>2.4.4 转床管理</h3><p>双击右边的转床管理模块进入如图界面；</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image180.jpg" alt="img"></p><p>输入要转床的病人的住院号按回车键就会调出病人的原床位号，然后输入病人要转入的现床位号，单击保存即可。</p><h3 id="2-4-5-包床设置"><a href="#2-4-5-包床设置" class="headerlink" title="2.4.5 包床设置"></a>2.4.5 包床设置</h3><p>双击右边的包床设置模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image182.jpg" alt="img"></p><p>输入住院号，调出相关信息，按‘包床’键即可</p><h3 id="2-4-6-临时加床"><a href="#2-4-6-临时加床" class="headerlink" title="2.4.6 临时加床"></a>2.4.6 临时加床</h3><p>双击临时加床模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image184.jpg" alt="img"></p><p>选择科室名，对该科室按照提示进行临时加床。</p><h3 id="2-4-7-临时撤床"><a href="#2-4-7-临时撤床" class="headerlink" title="2.4.7 临时撤床"></a>2.4.7 临时撤床</h3><p>双击右边的临时撤床模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image186.jpg" alt="img"></p><p>选择科室名，对该科室按照提示进行临时撤床。</p><h3 id="2-4-8-转科管理"><a href="#2-4-8-转科管理" class="headerlink" title="2.4.8 转科管理"></a>2.4.8 转科管理</h3><p>双击右边的转科管理模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image188.jpg" alt="img"></p><h3 id="2-4-9-在院病人一日清单"><a href="#2-4-9-在院病人一日清单" class="headerlink" title="2.4.9 在院病人一日清单"></a>2.4.9 在院病人一日清单</h3><p>双击右边的在院病人一日清单模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image190.jpg" alt="img"></p><p>选择要统计的方式（按住院号还是按科室），修改要统计的起止时间，按‘确定’键即可。</p><h3 id="2-5-10-出院病人一日清单"><a href="#2-5-10-出院病人一日清单" class="headerlink" title="2.5.10 出院病人一日清单"></a>2.5.10 出院病人一日清单</h3><p>双击右边的出院病人一日清单模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image192.jpg" alt="img"></p><p>出院病人一日清单操作同在院病人一日清单</p><h3 id="2-5-11-请领药单（汇总）"><a href="#2-5-11-请领药单（汇总）" class="headerlink" title="2.5.11 请领药单（汇总）"></a>2.5.11 请领药单（汇总）</h3><p>双击右边的请领药单（汇总）模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image194.jpg" alt="img"></p><p>如果是住院药房的话选择住院药房，起始时间为上次打印或预览的时间，终止时间为当前时间，根据需要进行选择（重打（注：要输入申请号）、预览、打印），单击‘确定’即可。</p><h3 id="2-5-12-请领药单（明细）"><a href="#2-5-12-请领药单（明细）" class="headerlink" title="2.5.12 请领药单（明细）"></a>2.5.12 请领药单（明细）</h3><p>双击右边的请领药单（明细）模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image196.jpg" alt="img"></p><p>选择医嘱类型和药品类别，其他操作同请领药单（汇总）</p><h3 id="2-5-13-静滴单（输液卡）"><a href="#2-5-13-静滴单（输液卡）" class="headerlink" title="2.5.13 静滴单（输液卡）"></a>2.5.13 静滴单（输液卡）</h3><p>双击右边的静滴单（输液卡）模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image198.jpg" alt="img"></p><p>输入住院号，选择要打印或预览的静滴单的起止时间，单击确定即可，如果要按科室查询的话，就选择‘是否按科室查询’单选框，单击确定即可。</p><h3 id="2-5-14-请领药单（口服和非口服）"><a href="#2-5-14-请领药单（口服和非口服）" class="headerlink" title="2.5.14 请领药单（口服和非口服）"></a>2.5.14 请领药单（口服和非口服）</h3><p>双击右边的请领药单（口服和非口服）模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image200.jpg" alt="img"></p><p>操作同请领药单（汇总）。</p><h3 id="2-5-15-口服药单"><a href="#2-5-15-口服药单" class="headerlink" title="2.5.15 口服药单"></a>2.5.15 口服药单</h3><p>双击右边的口服药单模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image202.jpg" alt="img"></p><p>基本操作同静滴单</p><h3 id="2-5-16-注射单"><a href="#2-5-16-注射单" class="headerlink" title="2.5.16 注射单"></a>2.5.16 注射单</h3><p>双击右边的注射单模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image204.jpg" alt="img"></p><p>操作同口服药单。</p><h3 id="2-5-17-处置单（医技）"><a href="#2-5-17-处置单（医技）" class="headerlink" title="2.5.17 处置单（医技）"></a>2.5.17 处置单（医技）</h3><p>双击右边的处置单模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image206.jpg" alt="img"></p><p>操作同上。</p><h3 id="2-5-18-治疗处方单"><a href="#2-5-18-治疗处方单" class="headerlink" title="2.5.18 治疗处方单"></a>2.5.18 治疗处方单</h3><p>双击右边的治疗处方单模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image208.jpg" alt="img"></p><h3 id="2-5-19-皮试结果查询"><a href="#2-5-19-皮试结果查询" class="headerlink" title="2.5.19 皮试结果查询"></a>2.5.19 皮试结果查询</h3><p>双击右边的皮试结果查询模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image210.jpg" alt="img"></p><p>输入住院号就会出现做过皮试的病人的皮试结果信息查询。</p><h3 id="2-5-20-护理记录单"><a href="#2-5-20-护理记录单" class="headerlink" title="2.5.20 护理记录单"></a>2.5.20 护理记录单</h3><p>双击右边的护理记录单模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image212.jpg" alt="img"></p><p>记录护士在护理过程中病人的基本信息。</p><h2 id="2-5出院"><a href="#2-5出院" class="headerlink" title="2.5出院"></a><a href="">2.5</a>出院</h2><h3 id="2-5-1-出院"><a href="#2-5-1-出院" class="headerlink" title="2.5.1 出院"></a>2.5.1 出院</h3><p>  双击右边的出院模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image214.jpg" alt="img"></p><p>左边菜单会出现相关的可以出院的病人或输入住院号，按回车键，单击‘确定’如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image216.jpg" alt="img"></p><p>要办理出院的话，直接单击‘确定’即可。否则单击‘取消’。</p><h3 id="2-5-2-出院病人召回管理"><a href="#2-5-2-出院病人召回管理" class="headerlink" title="2.5.2 出院病人召回管理"></a>2.5.2 出院病人召回管理</h3><p>双击右边的出院病人召回管理模块进入如图界面：<em>**</em></p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image218.jpg" alt="img"></p><p>输入要召回的病人的住院号，按‘回车键’调出病人的信息，单击‘确定’即可。</p><h1 id="药库药房部分"><a href="#药库药房部分" class="headerlink" title="药库药房部分"></a><a href="">药库药房部分</a></h1><h2 id="3-1-药库管理"><a href="#3-1-药库管理" class="headerlink" title="3.1 药库管理"></a><a href="">3.1 </a>药库管理</h2><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image220.jpg" alt="img"></p><h3 id="3-1-1-药品初始录入"><a href="#3-1-1-药品初始录入" class="headerlink" title="3.1.1. 药品初始录入"></a>3.1.1. 药品初始录入</h3><p>双击右边的药品初始录入模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image222.jpg" alt="img"></p><p>选择药房名称、库房名称等信息（输入药品名称的时可以输入药品名称的汉语拼音的首字母，按回车键，选择相关药品）。输入完成后，单击‘保存’即可。</p><h3 id="3-1-2药品入库"><a href="#3-1-2药品入库" class="headerlink" title="3.1.2药品入库"></a>3.1.2药品入库</h3><p>双击右边的药品入库模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image224.jpg" alt="img"></p><p>点击‘新增’，输入入库的药品信息，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image226.jpg" alt="img"></p><p>单击‘保存’即可。</p><h3 id="3-1-3-药品库存调整"><a href="#3-1-3-药品库存调整" class="headerlink" title="3.1.3 药品库存调整"></a>3.1.3 药品库存调整</h3><p>双击右边的药品库存调整模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image228.jpg" alt="img"></p><p>输入调整部门，点击‘显示’，屏幕中会列出该药房的所有药品信息，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image230.jpg" alt="img"></p><p>也可以在按拼音码检索中输入药品的汉语拼音的首字母，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image232.jpg" alt="img"></p><p>选中要调整的药品，，输入实际库存和调整原因，单击‘确定’，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image234.jpg" alt="img"></p><p>点击‘调整’即可，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image236.jpg" alt="img"></p><h3 id="3-1-4-药品调拨管理"><a href="#3-1-4-药品调拨管理" class="headerlink" title="3.1.4 药品调拨管理"></a>3.1.4 药品调拨管理</h3><p>双击右边的药品调拨管理模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image238.jpg" alt="img"></p><p>单击‘新增’，输入要调拨的库房名称和药品，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image240.jpg" alt="img"></p><p>单击‘保存’即可，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image242.jpg" alt="img"></p><p>也可以对已经调拨的药品进行编辑，单击‘编辑’，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image244.jpg" alt="img"></p><p>选择要编辑的药品，进行‘编辑’即可。</p><p>保存完成后，要对药品信息要进行审核，单击‘审核’，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image246.jpg" alt="img"></p><p>选中要审核的药品信息，双击即可。</p><h3 id="3-1-5-药品盘点"><a href="#3-1-5-药品盘点" class="headerlink" title="3.1.5 药品盘点"></a>3.1.5 药品盘点</h3><p>双击右边的药品盘点模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image248.jpg" alt="img"></p><p>单击‘新增盘点表’，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image250.jpg" alt="img"></p><p>如果要显示这些药品对应的库存，可以单击‘导入库存’，盘点完成后，单击‘保存’，数据无误后，单击‘审核’、‘保存’，药品盘点任务完成。</p><h3 id="3-1-6药品库存上下限维护"><a href="#3-1-6药品库存上下限维护" class="headerlink" title="3.1.6药品库存上下限维护"></a>3.1.6药品库存上下限维护</h3><p>双击右边的药品库存上下限维护模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image252.jpg" alt="img"></p><p>输入库存下限和库存上限，单击‘保存’即可，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image254.jpg" alt="img"></p><h3 id="3-1-7药品调价"><a href="#3-1-7药品调价" class="headerlink" title="3.1.7药品调价"></a>3.1.7药品调价</h3><p>双击右边的药品调价模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image256.jpg" alt="img"></p><p>单击‘新增’，输入相关信息（文件号、调价原因必写），输入药品的新购入价如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image258.jpg" alt="img"></p><p>单击保存即可，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image260.jpg" alt="img"></p><p>保存之后，要对修改过的信息进行审核，点击‘审核’，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image262.jpg" alt="img"></p><p>选择部门，单击‘查询’，选择要审核的调价号，单击‘确定’，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image264.jpg" alt="img"></p><p>选中要审核的药品信息，单击‘确定’即可。</p><h3 id="3-1-8药品报损管理"><a href="#3-1-8药品报损管理" class="headerlink" title="3.1.8药品报损管理"></a>3.1.8药品报损管理</h3><p>双击右边的药品报损管理模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image266.jpg" alt="img"></p><p>单击‘新增’，选择损益类别，输入报损的药品数量，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image268.jpg" alt="img"></p><p>单击‘保存’即可，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image270.jpg" alt="img"></p><p>保存完成后，要对输入的信息进行审核，单击‘审核’，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image272.jpg" alt="img"></p><p>双击要审核报损信息或者选择该审核报损信息单击‘确定’，再次单击‘保存’即可审计成功，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image274.jpg" alt="img"></p><p>单击‘确定’；</p><h3 id="3-1-9药品购物计划"><a href="#3-1-9药品购物计划" class="headerlink" title="3.1.9药品购物计划"></a>3.1.9药品购物计划</h3><p>双击右边的药品购物计划模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image276.jpg" alt="img"></p><p>单击‘新增’，输入相关信息，即可出现该库房的药品记录信息，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image278.jpg" alt="img"></p><p>如果只想显示小于库存下限的药品信息，可以在药品信息（仅显示小于库存下限的药品）前面方框点击即可。也可以利用辅助查找（输入药品汉语拼音的第一个字母）来查找有关药品信息。</p><p>选中某一药品，右击，会出现‘定位查找’，‘添加到购物计划明细’对话框。</p><p>定位查找，如图：点击‘ok’进行查找。</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image280.jpg" alt="img"></p><p>也可以利用单价进行查找。</p><p>添加到购物计划明细，输入采购数量和购入价等相关信息，单击‘保存’，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image282.jpg" alt="img"></p><p>确定信息无误后，单击‘审核’，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image284.jpg" alt="img"></p><p>选中要审核的药品，单击‘保存’即可，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image286.jpg" alt="img"></p><p>完成购物计划后，点击‘保存’即可。会出现相关的审核单；</p><h3 id="3-1-10药品退货管理"><a href="#3-1-10药品退货管理" class="headerlink" title="3.1.10药品退货管理"></a>3.1.10药品退货管理</h3><p>双击右边的药品退货管理模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image288.jpg" alt="img"></p><p>单击‘新增’，输入相关信息和要退的药品信息，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image290.jpg" alt="img"></p><p>单击‘保存’即可。保存完成后，也要对该信息进行审核。</p><h3 id="3-1-11-药库药品出入库汇总"><a href="#3-1-11-药库药品出入库汇总" class="headerlink" title="3.1.11 药库药品出入库汇总"></a>3.1.11 药库药品出入库汇总</h3><p>双击右边的药库药品出入库汇总模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image292.jpg" alt="img"></p><p>选择要统计的药库名称、历史数据、汇总数据的时间，单击‘汇总’即可。</p><h3 id="3-1-12-药房药品出入库汇总"><a href="#3-1-12-药房药品出入库汇总" class="headerlink" title="3.1.12 药房药品出入库汇总"></a>3.1.12 药房药品出入库汇总</h3><p>双击右边的药房药品出入库汇总模块进入如图界面：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image294.jpg" alt="img"></p><p>选择要统计的药库名称、历史数据、汇总数据的时间，单击‘汇总’即可。</p><h2 id="3-2药房"><a href="#3-2药房" class="headerlink" title="3.2药房"></a><a href="">3.2</a>药房</h2><p>药房操作员根据自己的代码进入药房管理系统，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image296.jpg" alt="img"></p><h3 id="3-2-1药房发药"><a href="#3-2-1药房发药" class="headerlink" title="3.2.1药房发药"></a>3.2.1药房发药</h3><p>双击右边的药房发药模块，如图所示：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image298.jpg" alt="img"></p><p>确定是门诊发药还是住院发药，选择药方名称，系统会调出相关的未发药的病人信息，如果病人过多的话，也可以通过输入诊疗号按回车键调出该病人的未发药的信息。如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image300.jpg" alt="img"></p><p>发完药后，点击‘确定’即可，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image302.jpg" alt="img"></p><p>点击‘确定’之后，会打印相应的发药单；</p><h3 id="3-2-2药房退药"><a href="#3-2-2药房退药" class="headerlink" title="3.2.2药房退药"></a>3.2.2药房退药</h3><p>双击右边的药房发药模块，如图所示：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image304.jpg" alt="img"></p><p>选择退药的部门，单击‘查询’，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image306.jpg" alt="img"></p><p>选择要退药的病人信息，单击‘确定’，然后双击该病人信息，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image308.jpg" alt="img"></p><p>选择要退的药品，单击‘确定’，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image310.jpg" alt="img"></p><p>单击是，即可完成退药，否则单击‘否’。</p><h3 id="3-2-3-药品有效期管理"><a href="#3-2-3-药品有效期管理" class="headerlink" title="3.2.3 药品有效期管理"></a>3.2.3 药品有效期管理</h3><p>双击右边的药品有效期管理模块，如图所示：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image312.jpg" alt="img"></p><p>根据提示，输入要查询的药品的有效期，单击‘查询’即可。</p><h3 id="3-2-4药房药品维护"><a href="#3-2-4药房药品维护" class="headerlink" title="3.2. 4药房药品维护"></a>3.2. 4药房药品维护</h3><p>双击右边的药房药品维护模块，如图所示：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image314.jpg" alt="img"></p><p>输入库存上下限，单击‘保存’即可。</p><h3 id="3-2-5药品医保类型维护"><a href="#3-2-5药品医保类型维护" class="headerlink" title="3.2.5药品医保类型维护"></a>3.2.5药品医保类型维护</h3><p>双击右边的药品医保类型维护模块，如图所示：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image316.jpg" alt="img"></p><p>输入要将修改的药品的汉语拼音的首字母或药品编号、药品名称等相关信息，调出该药品的信息，选择‘修改’按钮，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image318.jpg" alt="img"></p><p>选择该药品的医保类型，最后‘保存’即可。</p><h3 id="3-2-6药品划价"><a href="#3-2-6药品划价" class="headerlink" title="3.2. 6药品划价"></a>3.2. 6药品划价</h3><p>双击右边的药品划价模块，如图所示：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image320.jpg" alt="img"></p><p>左边列出了已挂号未划价的病人信息，对该病人信息进行双击，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image322.jpg" alt="img"></p><p>输入处方的药品名称，如图：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image324.jpg" alt="img"></p><p>单击保存即可：</p><p><img src="http://ovi3ob9p4.bkt.clouddn.com/yxmgr/clip_image326.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0111.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;本手册以系统中的各功能模块为线索，以医院服务主要流程为导向，简单描述了医院信息管理系统中各主要模块的功能及操作方法，主要面向广大的软东医院信息管理系统的用户，目的在于协助其尽快掌握软件的基础使用与操作，同时也可以作为集中培训的基础教材。&lt;br&gt;
    
    </summary>
    
      <category term="case" scheme="http://www.iskei.cn/categories/case/"/>
    
    
      <category term="case" scheme="http://www.iskei.cn/tags/case/"/>
    
  </entry>
  
  <entry>
    <title>技术变化那么快，如何做到不被淘汰</title>
    <link href="http://www.iskei.cn/posts/63607.html"/>
    <id>http://www.iskei.cn/posts/63607.html</id>
    <published>2018-02-03T07:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.041Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0110.jpg" alt="image"></p><p>在浩大的软件世界里，作为一名普通程序员，显得十分渺小，甚至会感到迷茫。我们内心崇拜技术，却也对日新月异的技术抱有深深的恐惧。有时候我会思考难道在技术领域内不断紧跟新潮，不断提升技能就是我的价值所在？那么我是技术的主人还是技术的奴隶？<br><a id="more"></a></p><p>人之所以迷茫往往是找不到工作生活的重心，感受不到工作或生活的价值。那么什么是价值呢？说的大一点就是我改变了世界，说的小一点就是我的所作所为改善了某些问题。如果不清楚自己的行为、目标、价值三者的关系，那么又何来重心？又如何能分得清重要性与优先级呢？</p><p>程序员的迷茫不仅仅是面对技术繁杂的无力感，更重要的是因为长期埋没于软件世界的浩大的分工体系中，无法看清从业务到软件架构的价值链条，无法清楚定位自己在分工体系的位置，处理不好自身与技术、业务的关系所致。</p><p>很多程序员打心底不喜欢业务，这一点我曾经也经历过，我更宁愿从事框架工具、技术组件研究的相关事情。我有个朋友经常吐槽我说：”你们天天加班加点写了那么多代码，然后呢？有改变什么吗？还不是写出了一堆垃圾。”仔细想想很多时候业务在我们脑海中存留的只是逻辑和流程，我们丢失的是对业务场景的感受，对用户痛点的体会，对业务发展的思考。这些都是与价值紧密相关的部分。我们很自然的用战术的勤快掩盖战略的懒惰！那么这样的后果就是我们把自己限死在流水线的工位上，阉割了自己能够发现业务价值的能力，而过多关注新技术对职场竞争力的价值。这也就是我们面对繁杂技术，而产生技术学习焦虑症的根本原因。</p><h4 id="业务、技术与软件系统的价值链"><a href="#业务、技术与软件系统的价值链" class="headerlink" title="业务、技术与软件系统的价值链"></a>业务、技术与软件系统的价值链</h4><p>那么什么是业务呢？就是指某种有目的的工作或工作项目，业务的目的就是解决人类社会与吃喝住行息息相关的领域问题，包括物质的需求和精神的需求，使开展业务活动的主体和受众都能得到利益。通俗的讲业务就是用户的痛点，是业务提供方（比如公司）的盈利点。而技术则是解决问题的工具和手段。比如为了解决用户随时随地购物的业务问题时，程序员利用web技术构建电子商务App，而当需求升级为帮助用户快速选购商品时，程序员会利用数据算法等技术手段构建推荐引擎。技术如果脱离了业务，那么技术应用就无法很好的落地，技术的研究也将失去场景和方向。而业务脱离了技术，那么业务的开展就变得极其昂贵和低效。</p><p>所以回过头来我们想想自己没日没夜写了那么多的代码从而构建起来的软件系统，它的价值何在呢？说白了就是为了解决业务问题，所以当你所从事的工作内容并不能为解决业务问题带来多大帮助的时候，你应该要及时做出调整。那么软件系统又是如何体现它自身的价值呢？在我看来有如下几个方面的体现：</p><p>业务领域与功能：比如支付宝立足支付领域而推出的转账、收款功能等，比如人工智能自动驾驶系统等。</p><p>服务能力：这就好比火车站购票窗口，评判它的服务能力的标准就是它能够同时处理多少用户的购票业务，能不能在指定时间内完成购票业务，能不能7*8小时持续工作。对应到软件系统领域，则表现为以下三个方面：</p><ul><li>系统正确性(程序能够正确表述业务流程，没有Bug)</li><li>可用性（可以7＊24小时＊365不间歇工作）</li><li>大规模（高并发，高吞吐量）</li></ul><p>互联网公司正是借助大规模的软件系统承载着繁多的业务功能，使其拥有巨大的服务能力并借助互联网技术突破了空间限制，高效低廉解决了业务问题，创造了丰厚的利润，这是人肉所不可比拟的。</p><p>理解了这一层面的概念，你就可以清楚这个价值链条：公司依靠软件系统提供业务服务而创造价值，程序员则是通过构建并持续演进软件系统服务能力以及业务功能以支撑公司业务发展从而创造价值。</p><p>有了这个价值链条，我们就可以反思自己的工作学习对软件系统的服务能力提升起到了多大的推动作用？可以反思自己的工作学习是否切实在解决领域的业务问题，还是只是做一些意义不大的重复性工作。</p><p>前两天面试了一个候选人，他的工作是从事票务系统开发，他说自己在研究linux内核与汇编语言，我就问他linux内核和汇编语言的学习对你的工作产生了哪些帮助？能否举一个例子？他哑口无言，我内心就觉得这样一个热爱学习的好苗子正迷茫找不到重心，正在做一件浪费精力的事情。正确的学习方式应该是将学习与具体业务场景结合起来，和公司通过软件系统开展业务服务而创造价值，程序员通过提升软件系统服务能力创造价值这一链条串接起来，从对这些价值产生帮助的程度去思考优先级。学习本身没有错，错的往往就是那颗初心。</p><p>现在你再来看高并发分布式相关的知识，你会发现并不是因为这些知识比较高深、比较时髦，很多公司有需求才值得学习，而是他们对价值链条有着实实在在的贡献。</p><h4 id="价值驱动的架构"><a href="#价值驱动的架构" class="headerlink" title="价值驱动的架构"></a>价值驱动的架构</h4><p>一谈到软件系统，人们免不了想起架构这件事来。之所以此处去谈及架构是因为每一个程序员本质都是软件架构体系中的一分子，我们可能深埋于体系流水线之中，感受不到位置和价值。但如果站在架构这一高度去看这些问题则将会非常透彻。那么架构究竟是什么？和上述的价值链又有什么关系呢？</p><h4 id="什么是架构？"><a href="#什么是架构？" class="headerlink" title="什么是架构？"></a>什么是架构？</h4><p>在我看来软件架构就是将人员、技术等资源组织起来以解决业务问题，支撑业务增长的一种活动。可能比较抽象，我想我们可以从架构师的一些具体工作任务来理解这句话含义：</p><p>组织业务：架构师通过探索和研究业务领域的知识，构建自身看待业务的”世界观”。他会基于这种认识拆分业务生命周期，确立业务边界，构建出了一套解决特定业务问题的领域模型，并且确认模型之间、领域之间的关系与协作方式，完成了对业务领域内的要素的组织工作。</p><p>组织技术：为了能在计算机世界中运作人类社会的业务模型，架构师需要选用计算机世界中合适的框架、中间件、编程语言、网络协议等技术工具依据之前设计方案组织起来形成一套软件系统方案，在我看来软件系统就像是一种技术组织，即技术组件、技术手段依据某种逻辑被组织起来了，这些技术工具被确定了职责，有了明确分工，并以实现业务功能为目标集合在了一起。比如RPC框架或消息队列被用于内部系统之间的通信服务就如同信使一般，而数据库则负责记录结果，它更像是一名书记员。</p><p>组织人员：为了能够实现利用软件系统解决业务问题的目标，架构师还需要关注软件系统的构建过程，他以实现软件系统为号召，从公司组织中聚集一批软件工程师，并将这些人员按不同工种、不同职责、不同系统进行组织，确定这些人员之间的协作方式，并关注这个组织系统是否运作良好比如沟通是否顺畅、产出是否达到要求、能否按时间完成等。</p><p>组织全局，对外输出：架构师的首要目标是解决业务问题，推动业务增长。所以他非常关心软件的运行状况。因为只有在软件系统运行起来后，才能对外提供服务，才能在用户访问的过程中，解决业务问题。架构师需要关注运行过程中产生的数据比如业务成功率，系统运行资源占用数据、用户反馈信息、业务增长情况等，这些信息将会帮助架构师制定下一步架构目标和方向。</p><p>所以软件架构不仅仅只是选用什么框架、选用什么技术组件这么简单。它贯穿了对人的组织、对技术的组织、对业务的组织，并将这三种组织以解决业务问题这一目标有机的结合在了一起。</p><p>很多面试的候选人在被问及他所开发的系统采用什么架构的问题时，只会罗列出一些技术组件、技术框架等技术要素，这样看来其根本没有理清架构的深层含义。也有一些架构师只专注对底层技术的研究，以为打造一个卓越的系统是非常牛逼的事情，可是他忽略了软件系统的价值是以解决业务问题的能力、支撑业务增长的能力为衡量标准，所以最后生产出了很多对组织，对业务没有帮助的系统。</p><h4 id="成本与收益"><a href="#成本与收益" class="headerlink" title="成本与收益"></a>成本与收益</h4><p>正如之前所说软件系统只有在运行的时候才能创造价值，也就是说软件系统能否7*24小时＊365天稳定的工作关系到公司的收益水平。所以开发团队对生产环境的发布总是小心翼翼，对解决生产环境的问题总是加班加点。而软件系统的成本则体现在软件构建过程，这时候我们就能理解那些工程技术如项目管理、敏捷开发、单元测试、持续集成、持续构建，版本管理等的价值了，他们有的是保证软件系统正确性，有的是为了降低沟通成本，有的是为了提升开发效率等但总的来说就是为了降低软件的构建成本。所以在提升系统服务能力，创造更多业务收益的同时，降低构建成本也是一种提升收益的有效手段。</p><p>作为一名软件工程师而言，我们往往处在软件构建过程体系中的某个环节，我们可以基于成本与收益的关系去思考自己每一项技能的价值，学习新的有价值的技能，甚至在工作中基于成本与收益的考量选择合适的技术。比如在逻辑不大发生变化的地方，没有必要去做过多的设计，应用各种花俏的设计模式等浪费时间。这样我们才能成为技术的主人。</p><h4 id="架构目标需要适应业务的发展"><a href="#架构目标需要适应业务的发展" class="headerlink" title="架构目标需要适应业务的发展"></a>架构目标需要适应业务的发展</h4><p>架构的目标就是为了支撑业务增长，就是提升软件系统的服务能力。可是话虽说如此，但真实却要做很多取舍。比如对初创团队而言，其产品是否解决业务问题这一设想还没得到确认，就立即去构造一个高性能、高可用的分布式系统，这样的架构目标远超出业务发展的需求，最后的结果就是浪费大量人力物力，却得不到任何起色。架构师需要审时度势，仔细衡量正确性、大规模、可用性三者的关系，比如今年业务蓬勃发展日均订单300万，基于对未来的可能预测，明年可能有3000万的订单，那么架构师应该要着重考虑大规模和可用性。而且每一点提升的程度，也需要架构师衡量把握，比如可用性要达到2个9还是3个9。</p><p>回顾自己以往的工作很多时候就是因为没有确立架构目标导致浪费了组织很多资源，比如在之前的创业团队中，由于本人有一定的代码洁癖，经常会花费很多时间和同事计较代码质量，这样本可以更快上线的功能却需要被延迟，当时过度追求正确性的行为是与创业团队快速验证想法的业务需求不匹配的。</p><p>另外一点比较深刻的案例则是在本人担任一个技术团队负责人的时候，在一次述职报告的时候，leader问我对接下来团队工作有什么计划？我当时说了一堆什么改进代码质量，每天晨会，任务透明化，建立迭代机制等等，然后就被各种批驳一通。当时团队基本以外包人员为主，人员水平较差，开发出来的金融系统也是千疮百孔而这条业务线最重要的业务价值则是按计划实现潜在投资方的需求，争取拉到投资。所以不久leader就召集测试架构的相关人员与我这边一同梳理对核心功能的测试工作，将研发、测试、上线的流程自动化。</p><p>当时并不理解这样做核心价值是什么。但回过头来看这样的工作方式恰好符合了业务发展的需求，即确保系统是符合设计需求的，保证系统达到可接受的正确性，为后续能过快速前进打下基础，最重要的是为企业降低了构建成本。所以程序员想要工作出业绩，必须认清楚系统背后的业务价值，按价值去梳理工作优先级，而不是像我一般过度纠结细节，追求技术理想化。</p><h4 id="成也分工，败也分工"><a href="#成也分工，败也分工" class="headerlink" title="成也分工，败也分工"></a>成也分工，败也分工</h4><p>正如在程序员的迷茫那一章节提到的：程序员的迷茫因为长期埋没于软件世界的浩大的分工体系中，无法看清从业务到软件架构的价值链条，无法清楚定位自己在分工体系的位置，处理不好自身与技术、业务的关系所致，所以在这里我想谈谈分工。架构师为了使软件系统更好的服务业务，必然将软件系统生命周期进行拆分，比如分出开发生命周期、测试生命周期、用户访问生命周期、软件运维生命周期，并根据不同的生命周期划分出不同的职责与角色。</p><p>比如开发人员负责开发周期负责完成软件研发，测试人员负责对开发人员交付的成果进行测试等，于是就形成了分工。一旦分工形成，每一个分工组织都会有自己的价值追求，架构师关注的顶层的价值即软件系统能否支撑业务增长被分工的形式打碎到各个组织中。分工是有其价值的，他使得复杂昂贵的任务可以被简单、并行、可替换的流水线方式解决。但久而久之，价值碎片化的问题就出现了，比如测试人员只关注找出更多问题，开发人员只关注快速开发更多的系统，运维人员只关注保障系统稳定。</p><p>三者之间常常都只站在自己的立场去要求对方怎么做，没有人再关注整体价值，产生诸多矛盾增加软件实施成本。而身处流水线中的一员，又因为困扰于重复性工作，迷茫于工作的意义，甚至感觉自己做为了人的创意与灵感都被扼杀了。所以我的朋友吐槽我说你写了那么多代码然后并没有怎么样是非常有道理的，那是因为我只关注着做为流水工人的价值要求，看不到生态链最顶端的价值。</p><p>我们仔细想想那些团队领导，精英领袖哪一个不是为着更广大的价值所负责，比如项目经理只需要关心自身项目的商业价值，而公司CEO则关心公司范畴内所有业务的总体商业价值。所以关注的价值越大且职位也就越高。这些高层领导者们把控着整体的价值链条，及时纠正底层分工组织的价值目标与整体价值目标出现偏差的问题。</p><h4 id="从价值出发－找寻学习与工作的新思路"><a href="#从价值出发－找寻学习与工作的新思路" class="headerlink" title="从价值出发－找寻学习与工作的新思路"></a>从价值出发－找寻学习与工作的新思路</h4><p>迷茫能引发思考，架构则塑造了视野，而价值则是我们之所以存活，之所以工作的逻辑起点。基于这样一种价值思维，对我们的学习和工作又可以有哪些改启示呢？</p><p>明确自身的业务相关主体：找出你工作的协作关系网内的业务方和客户方，这样你就可以从客户方中找到离你最近的业务价值点，从你的业务方中挖掘更多的资源。甚至你可以按这个思路顺着网络向上或向下挖掘价值链条，整合更多的上下游资源以实现更大的价值。</p><p>向前一步，为更大的价值负责：不要因为自己是开发人员就不去关注软件运维，不要因为只是测试就不关注软件开发，因为你关注的越多你越能看清全局的价值目标。如果只关注一亩三分地，那么注定这辈子只能困守在这一亩三分地里，成为一名流水线上焦虑至死的码农。试着转变思维，从架构师的角度思考价值问题，看看能否将技术贯穿到业务、到用户、到最终的价值去。之前我的朋友说过要把产品经理踢到运营位置去，把程序员踢到产品经理位置去，这样才是正确做事方式。这句话也是类似的意思，向前一步才能懂得怎么做的更好。</p><p>像架构师一样思考，用价值找寻重心：人的迷茫是因为找不到重心，而价值的意义在于引导我们思考做哪些事情才能实现价值，先做哪些事情会比后做哪些事情更能创造收益。像架构师那样全局性思考，把遇到问题进行拆分，把学习到的事物串联起来，努力构成完整的价值链条。</p><p>学会连接，构建体系：前几天看到一篇文章对今日头条的产品形态极尽批判之词，指责它的智能算法将人类封死在自己的喜好之中，将人类社会进一步碎片化。这似乎很有道理，有趣的是互联网将我们连接至广袤的世界，却也把我们封闭在独属于自己的小世界里。依旧是我的那位朋友，他说他的最大价值在于连接，将不同的人连接在一起，有趣的事情可能就会即将发生。</p><p>或许算法的天性就是顺从与迎合，但人最终想理解这个世界还是需要依靠自身的行动与不同人之间建立联系，这也是一种摆脱流水线限制的有效方式。另外，我们自身也是某种事物连接的产物，比如架构师，他是业务、技术、管理连接在一起的一种产物。所以我们应当树立自身的知识体系以吸收融合新知识，将孤立的概念连接起来，形成自身的价值链条。比如这篇文章将我从事技术开发经验、与对架构的理解以及自身过往经历结合起来，这也是一种内在的体系梳理。</p><blockquote><p>作者简介：空融，网名“D调的暖冬”。现就职蚂蚁金服，从事支付宝身份认证相关领域的技术开发。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0110.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;在浩大的软件世界里，作为一名普通程序员，显得十分渺小，甚至会感到迷茫。我们内心崇拜技术，却也对日新月异的技术抱有深深的恐惧。有时候我会思考难道在技术领域内不断紧跟新潮，不断提升技能就是我的价值所在？那么我是技术的主人还是技术的奴隶？&lt;br&gt;
    
    </summary>
    
      <category term="Think" scheme="http://www.iskei.cn/categories/Think/"/>
    
    
      <category term="Think" scheme="http://www.iskei.cn/tags/Think/"/>
    
  </entry>
  
  <entry>
    <title>gradle入门笔记</title>
    <link href="http://www.iskei.cn/posts/12275.html"/>
    <id>http://www.iskei.cn/posts/12275.html</id>
    <published>2018-02-01T07:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.037Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0108.jpg" alt="image"></p><p>gradle在语法上是基于Groovy语言的（<a href="http://www.groovy-lang.org/" target="_blank" rel="noopener">Groovy</a> 是一种基于JVM的敏捷开发语言，可以简单的理解为强类型语言java的弱类型版本），在项目管理上是基于Ant和Maven概念的项目自动化建构工具。<br><a id="more"></a></p><h4 id="基础知识准备"><a href="#基础知识准备" class="headerlink" title="基础知识准备"></a>基础知识准备</h4><ol><li><strong>Java基础，命令行使用基础</strong></li><li><strong>官方文档</strong>：<a href="https://docs.gradle.org/current/dsl/" target="_blank" rel="noopener">https://docs.gradle.org/current/dsl/</a></li><li><strong> Gradle使用指南：</strong> <a href="https://gradle.org/docs/current/userguide/userguide" target="_blank" rel="noopener">https://gradle.org/docs/current/userguide/userguide</a></li><li><strong>Android插件文档</strong>：<a href="https://github.com/google/android-gradle-dsl.git" target="_blank" rel="noopener">https://github.com/google/android-gradle…</a></li><li><strong>AndroidGradle使用文档</strong>：<a href="http://tools.android.com/tech-docs/new-build-system/user-guide" target="_blank" rel="noopener">http://tools.android.com/tech-docs/new-build-system/user-guide</a></li><li><strong>Groovy基础：</strong> <a href="http://attis-wong-163-com.iteye.com/blog/1239819" target="_blank" rel="noopener">http://attis-wong-163-com.iteye.com/blog/1239819</a></li><li><strong>Groovy闭包的Delegate机制</strong>：<a href="http://www.cnblogs.com/davenkin/p/gradle-learning-3.html" target="_blank" rel="noopener">http://www.cnblogs.com/davenkin/p/gradle-learning-3.html</a></li></ol><h2 id="搭建Gradle运行环境"><a href="#搭建Gradle运行环境" class="headerlink" title="搭建Gradle运行环境"></a>搭建Gradle运行环境</h2><ol><li>Gradle 运行依赖JVM，也就是java运行的环境。所以要安装jdk和jre，好像目前的Gradle的运行环境要求jdk的版本在1.6以上，应该的，现在jdk都到1.8了。</li><li>然后到Gradle官网现在Gradle的压缩包。<a href="https://gradle.org/gradle-download/" target="_blank" rel="noopener">地址</a>，这个页面里面又两种方式，一种手动安装，一种通过脚本安装。我一般喜欢自己动手，这样将来清理起来比较方便。</li><li>下载压缩包后，解压，然后配置环境变量，手动安装过jdk的人应该都配置环境变量很熟了吧。每个平台下配置环境变量的方式不一样</li></ol><p>MacOS 下配置。在<code>~/.bash_profile</code>中添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#gradle  注意gradle-2.14.1是自己解压的路径</span><br><span class="line">export GRADLE_HOME=$&#123;HOME&#125;/gradle-2.14.1</span><br><span class="line">PATH=$&#123;PATH&#125;:$&#123;GRADLE_HOME&#125;/bin</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p>保存后在终端输入<code>source ~/.bash_profile</code>回车执行让刚刚的配置生效。然后命令行输入<code>gradle -v</code>查看是否安装成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ gradle -v</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Gradle 2.14.1</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Build time:   2016-07-18 06:38:37 UTC</span><br><span class="line">Revision:     d9e2113d9fb05a5caabba61798bdb8dfdca83719</span><br><span class="line"></span><br><span class="line">Groovy:       2.4.4</span><br><span class="line">Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015</span><br><span class="line">JVM:          1.8.0_111 (Oracle Corporation 25.111-b14)</span><br><span class="line">OS:           Mac OS X 10.12.2 x86_64</span><br></pre></td></tr></table></figure><h2 id="有用的信息"><a href="#有用的信息" class="headerlink" title="有用的信息"></a>有用的信息</h2><ul><li>您可以每两个月通过Gradle核心工程师<a href="https://gradle.org/training" target="_blank" rel="noopener">免费注册现场培训</a></li><li>我们的<a href="https://gradle.org/guides" target="_blank" rel="noopener">指南</a>和<a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="noopener">参考文件</a>制作了很好的阅读材料</li><li>您可以使用<a href="https://gradle.com/scans/get-started" target="_blank" rel="noopener">构建扫描</a>来可视化和调试您的构建</li><li>该<a href="https://newsletter.gradle.com/" target="_blank" rel="noopener">摇篮通讯</a>是跟上最新与制作月度问题的好方法</li><li><a href="https://git.io/gradle-completion" target="_blank" rel="noopener">命令行完成</a>脚本可用于bash和zsh</li></ul><p>Gradle在所有主要操作系统上运行，只需要安装<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Java JDK或JRE</a>版本7或更高版本。检查，运行<code>java -version</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">java version &quot;1.8.0_121&quot;</span><br></pre></td></tr></table></figure><h2 id="安装gradle"><a href="#安装gradle" class="headerlink" title="安装gradle"></a>安装gradle</h2><h3 id="与包管理器一起安装"><a href="#与包管理器一起安装" class="headerlink" title="与包管理器一起安装"></a>与包管理器一起安装</h3><h4 id="安装SDKMAN"><a href="#安装SDKMAN" class="headerlink" title="安装SDKMAN"></a>安装SDKMAN</h4><p>安装SDKMAN！在类UNIX平台上一样简单。SDKMAN！在Mac OSX，Linux，Cygwin，Solaris和FreeBSD上顺利安装。我们也支持Bash和ZSH shell。<br>只需打开一个新的终端并输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s &quot;https://get.sdkman.io&quot; | bash</span><br></pre></td></tr></table></figure><p>按照屏幕上的说明完成安装。<br>接下来，打开一个新的终端<strong>或</strong>输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;</span><br></pre></td></tr></table></figure><p>最后，运行以下代码片段以确保安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sdk version</span><br></pre></td></tr></table></figure><p>如果一切顺利的话，应该显示版本。就像是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdkman 5.0.0+51</span><br></pre></td></tr></table></figure><h4 id="卸载SDKMAN"><a href="#卸载SDKMAN" class="headerlink" title="卸载SDKMAN"></a>卸载SDKMAN</h4><p>在不太可能发生的情况下，您想要卸载SDKMAN！，我们还没有自动执行此操作的方法。如果你确实想把它从你的系统中删除，那么这样做很容易。下面将指导你完成备份，然后从系统中删除整个安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zcvf ~/sdkman-backup_$(date +%F-%kh%M).tar.gz -C ~/ .sdkman</span><br><span class="line">$ rm -rf ~/.sdkman</span><br></pre></td></tr></table></figure><p>最后一个步骤涉及编辑和您删除初始化片段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.bashrc</span><br></pre></td></tr></table></figure><p>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.bash_profile</span><br></pre></td></tr></table></figure><p>和/或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.profile</span><br></pre></td></tr></table></figure><p>文件。如果您使用ZSH，请将其从</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.zshrc</span><br></pre></td></tr></table></figure><p>文件中删除。要删除的代码片段如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!</span><br><span class="line">[[ -s &quot;/home/dudette/.sdkman/bin/sdkman-init.sh&quot; ]] &amp;&amp; source &quot;/home/dudette/.sdkman/bin/sdkman-init.sh&quot;</span><br></pre></td></tr></table></figure><p>一旦删除，您已经成功卸载SDKMAN！从你的机器。</p><h4 id="安装SDKMAN到自定义位置"><a href="#安装SDKMAN到自定义位置" class="headerlink" title="安装SDKMAN到自定义位置"></a>安装SDKMAN到自定义位置</h4><p>可以安装SDKMAN！到一个自定义的位置以外</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$HOME/.sdkman</span><br></pre></td></tr></table></figure><p>。这可以通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SDKMAN_DIR</span><br></pre></td></tr></table></figure><p>在安装之前导出您的自定义位置来实现。</p><p>只需打开一个新的终端并输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export SDKMAN_DIR=&quot;/usr/local/sdkman&quot; &amp;&amp; curl -s &quot;https://get.sdkman.io&quot; | bash</span><br></pre></td></tr></table></figure><p>为了这个工作，至关重要的是你的用户有这个文件夹的完全访问权限。它也是重要的，该文件夹不存在作为SDKMAN！将尝试创建它。</p><h3 id="自动安装gradle"><a href="#自动安装gradle" class="headerlink" title="自动安装gradle"></a>自动安装gradle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sdk install gradle 4.5</span><br></pre></td></tr></table></figure><p><a href="http://brew.sh/" target="_blank" rel="noopener">Homebrew</a>是“macOS缺少的包管理器”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install gradle</span><br></pre></td></tr></table></figure><p><a href="http://scoop.sh/" target="_blank" rel="noopener">Scoop</a>是受Homebrew启发的Windows命令行安装程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scoop install gradle</span><br></pre></td></tr></table></figure><p><a href="https://chocolatey.org/" target="_blank" rel="noopener">chocolatey</a>是“Windows的包管理器”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ choco install gradle</span><br></pre></td></tr></table></figure><p><a href="https://www.macports.org/" target="_blank" rel="noopener">MacPorts</a>是一个在macOS上管理工具的系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo port install gradle</span><br></pre></td></tr></table></figure><h3 id="手动安装gradle"><a href="#手动安装gradle" class="headerlink" title="手动安装gradle"></a>手动安装gradle</h3><h4 id="下载最新的Gradle发行版"><a href="#下载最新的Gradle发行版" class="headerlink" title="下载最新的Gradle发行版"></a><a href="https://gradle.org/releases" target="_blank" rel="noopener">下载</a>最新的Gradle发行版</h4><p>目前的Gradle版本是在2018年1月24日发布的版本4.5。分发zip文件有两种版本：</p><ul><li><a href="https://services.gradle.org/distributions/gradle-4.5-bin.zip" target="_blank" rel="noopener">仅限二进制</a> （<a href="https://services.gradle.org/distributions/gradle-4.5-bin.zip.sha256" target="_blank" rel="noopener">sha256</a>）</li><li><a href="https://services.gradle.org/distributions/gradle-4.5-all.zip" target="_blank" rel="noopener">完整的</a>文档和来源（<a href="https://services.gradle.org/distributions/gradle-4.5-all.zip.sha256" target="_blank" rel="noopener">sha256</a>）</li></ul><p>如果有疑问，请选择仅二进制版本，并在线浏览<a href="https://docs.gradle.org/current" target="_blank" rel="noopener">文档</a>和<a href="https://github.com/gradle/gradle" target="_blank" rel="noopener">来源</a>。</p><h4 id="解压分发"><a href="#解压分发" class="headerlink" title="解压分发"></a>解压分发</h4><h5 id="Linux和MacOS用户"><a href="#Linux和MacOS用户" class="headerlink" title="Linux和MacOS用户"></a>Linux和MacOS用户</h5><p>解压缩您选择的目录中的分发zip文件，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /opt/gradle</span><br><span class="line">$ unzip -d /opt/gradle gradle-4.5-bin.zip</span><br><span class="line">$ ls /opt/gradle/gradle-4.5</span><br><span class="line">LICENSE  NOTICE  bin  getting-started.html  init.d  lib  media</span><br></pre></td></tr></table></figure><h5 id="Microsoft-Windows用户"><a href="#Microsoft-Windows用户" class="headerlink" title="Microsoft Windows用户"></a>Microsoft Windows用户</h5><p><code>C:\Gradle</code>用<strong>文件资源管理器</strong>创建一个新目录。</p><p>打开第二个<strong>文件资源管理器</strong>窗口，并转到下载Gradle分配的目录。双击ZIP存档以显示内容。将内容文件夹<code>gradle-4.5</code>拖到新创建的<code>C:\Gradle</code>文件夹中。</p><p>或者，您可以<code>C:\Gradle</code>使用您选择的归档工具将Gradle发行版ZIP解压缩。</p><h4 id="配置您的系统环境"><a href="#配置您的系统环境" class="headerlink" title="配置您的系统环境"></a>配置您的系统环境</h4><h5 id="Linux和MacOS用户-1"><a href="#Linux和MacOS用户-1" class="headerlink" title="Linux和MacOS用户"></a>Linux和MacOS用户</h5><p>配置您的<code>PATH</code>环境变量以包含<code>bin</code>解压缩分发的目录，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export PATH=$PATH:/opt/gradle/gradle-4.5/bin</span><br></pre></td></tr></table></figure><h5 id="Microsoft-Windows用户-1"><a href="#Microsoft-Windows用户-1" class="headerlink" title="Microsoft Windows用户"></a>Microsoft Windows用户</h5><p>在<strong>文件资源管理器中，</strong>右键单击<code>This PC</code>（或<code>Computer</code>）图标，然后单击<code>Properties</code>- &gt; <code>Advanced System Settings</code>- &gt; <code>Environmental Variables</code>。</p><p>在<code>System Variables</code>选择下<code>Path</code>，然后单击<code>Edit</code>。添加一个条目<code>C:\Gradle\gradle-4.5\bin</code>。点击确定保存。</p><h4 id="验证您的安装"><a href="#验证您的安装" class="headerlink" title="验证您的安装"></a>验证您的安装</h4><p>打开控制台（或Windows命令提示符）并运行<code>gradle -v</code>以运行gradle并显示版本，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gradle -v</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Gradle 4.5</span><br><span class="line">------------------------------------------------------------</span><br></pre></td></tr></table></figure><h2 id="用Gradle包装器升级"><a href="#用Gradle包装器升级" class="headerlink" title="用Gradle包装器升级"></a>用Gradle包装器升级</h2><p>如果您现有的基于Gradle的版本使用<a href="https://docs.gradle.org/4.5/userguide/gradle_wrapper.html" target="_blank" rel="noopener">Gradle Wrapper</a>，那么可以通过运行<code>wrapper</code>指定所需的Gradle版本的任务轻松升级：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./gradlew wrapper --gradle-version=4.5 --distribution-type=bin</span><br></pre></td></tr></table></figure><p>请注意，没有必要安装Gradle来使用Gradle包装器。下一次调用<code>gradlew</code>或<code>gradlew.bat</code>将下载并缓存指定版本的Gradle。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./gradlew tasks</span><br><span class="line">Downloading https://services.gradle.org/distributions/gradle-4.5-bin.zip</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="弄一个HelloWorld看看"><a href="#弄一个HelloWorld看看" class="headerlink" title="弄一个HelloWorld看看"></a>弄一个HelloWorld看看</h2><p>创建一个<code>test_gralde</code>文件夹。然后在文件夹里面创建一个<code>build.gradle</code>文件。注意文件名不要乱起。在<code>build.gradle</code>中添加如下代码：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">task helloworld&#123;</span><br><span class="line">    doLast&#123;</span><br><span class="line">        println<span class="string">'Hello World!'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#后者等同于下面的代码,</span><br><span class="line">task helloworld2 &lt;&lt;&#123;</span><br><span class="line">    println <span class="string">"Hello World!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后来运行一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">liuqiangs-MacBook-Pro:test_gralde liuqiang$ gradle helloworld</span><br><span class="line">:helloworld</span><br><span class="line">Hello World!</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 1.52 secs</span><br><span class="line"></span><br><span class="line">This build could be faster, please consider using the Gradle Daemon: https://docs.gradle.org/2.14.1/userguide/gradle_daemon.html</span><br></pre></td></tr></table></figure><p>我们分析一下执行步骤。build.gradle是Gradle默认的构建脚本文件，执行Gradle命令的时候，会默认加载当前目录下的build.gradle脚本文件，当然你也可以通过 -b 参数指定想要加载执行的文件。这只是个最简单的task例子，后面详细介绍task的常见定义。</p><p>这个构建脚本定义一个任务（Task），任务名字叫helloworld，并且给任务helloworld添加了一个动作，官方名字是Action，阅读Gradle源代码你会到处见到它，其实他就是一段Groovy语言实现的闭包，doLast就意味着在Task执行完毕之后要回调doLast的这部分闭包的代码实现。第二个方法中的“&lt;&lt;”表示向helloworld中加入执行代码。至于语法部分，基本是Groovy语法（包括一些语法糖，也就是写简写方式，如果写个JavaScript或者Python会好理解一些，但是还是建议去读一下groovy的基本语法），加上一些DSL（domain specific language）的约定。</p><h2 id="执行流程和基本术语"><a href="#执行流程和基本术语" class="headerlink" title="执行流程和基本术语"></a>执行流程和基本术语</h2><p>和Maven一样，Gradle只是提供了构建项目的一个框架，真正起作用的是Plugin。Gradle在默认情况下为我们提供了许多常用的Plugin，其中包括有构建Java项目的Plugin，还有Android等。与Maven不同的是，Gradle不提供内建的项目生命周期管理，只是java Plugin向Project中添加了许多Task，这些Task依次执行，为我们营造了一种如同Maven般项目构建周期。</p><p>Gradle是一种声明式的构建工具。在执行时，Gradle并不会一开始便顺序执行build.gradle文件中的内容，而是分为两个阶段，第一个阶段是配置阶段，然后才是实际的执行阶段。<br>配置阶段，Gradle将读取所有build.gradle文件的所有内容来配置Project和Task等，比如设置Project和Task的Property，处理Task之间的依赖关系等。</p><p>看一个基本结构的Android多Moudule（也就是gradle中的多Project  <strong>Multi-Projects Build</strong>）的基本项目结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">├── app #Android App目录</span><br><span class="line">│   ├── app.iml</span><br><span class="line">│   ├── build #构建输出目录</span><br><span class="line">│   ├── build.gradle #构建脚本</span><br><span class="line">│   ├── libs #so相关库</span><br><span class="line">│   ├── proguard-rules.pro #proguard混淆配置</span><br><span class="line">│   └── src #源代码，资源等</span><br><span class="line">├── module #Android 另外一个module目录</span><br><span class="line">│   ├── module.iml</span><br><span class="line">│   ├── build #构建输出目录</span><br><span class="line">│   ├── build.gradle #构建脚本</span><br><span class="line">│   ├── libs #so相关库</span><br><span class="line">│   ├── proguard-rules.pro #proguard混淆配置</span><br><span class="line">│   └── src #源代码，资源等</span><br><span class="line">├── build</span><br><span class="line">│   └── intermediates</span><br><span class="line">├── build.gradle #工程构建文件</span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">├── gradle.properties #gradle的配置</span><br><span class="line">├── gradlew #gradle wrapper linux shell脚本</span><br><span class="line">├── gradlew.bat</span><br><span class="line">├── LibSqlite.iml</span><br><span class="line">├── local.properties #配置Androod SDK位置文件</span><br><span class="line">└── settings.gradle #工程配置</span><br></pre></td></tr></table></figure><p>上面的是完整的AndroidStudio中的项目结构，我们抽象成Gradle多个Project的样子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── app </span><br><span class="line">│   ├── build.gradle #构建脚本</span><br><span class="line">├── module </span><br><span class="line">│   ├── build.gradle #构建脚本</span><br><span class="line">├── build.gradle #工程构建文件</span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper    #先不去管它</span><br><span class="line">├── gradle.properties #gradle的配置</span><br><span class="line">├── gradlew #gradle wrapper linux shell脚本</span><br><span class="line">├── gradlew.bat</span><br><span class="line">└── settings.gradle #工程配置</span><br></pre></td></tr></table></figure><ul><li>Gradle为每个build.gradle都会创建一个相应的Project领域对象，在编写Gradle脚本时，我们实际上是在操作诸如Project这样的Gradle领域对象。在多Project的项目中，我们会操作多个Project领域对象。Gradle提供了强大的多Project构建支持。</li><li>要创建多Project的Gradle项目，我们首先需要在根（Root）Project中加入名为settings.gradle的配置文件，该文件应该包含各个子Project的名称。Gradle中的Project可以简单的映射为AndroidStudio中的Module。</li><li>在最外层的build.gradle。一般干得活是：配置其他子Project的。比如为子Project添加一些属性。</li><li>在项目根目录下有个一个名为settings.gradle。这个文件很重要，名字必须是settings.gradle。它里边用来告诉Gradle，这个multiprojects包含多少个子Project（可以理解为AndroidStudio中Module）。</li></ul><h2 id="读懂Gradle配置语法"><a href="#读懂Gradle配置语法" class="headerlink" title="读懂Gradle配置语法"></a>读懂Gradle配置语法</h2><p>Gradle向我们提供了一整套DSL，所以在很多时候我们写的代码似乎已经脱离了groovy，但是在底层依然是执行的groovy所以很多语法还是Groovy的语法规则。<br>看一个AndroidStudio中app下的build.gradle的配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: 'com.android.application'</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 25</span><br><span class="line">    buildToolsVersion "25.0.0"</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId "me.febsky.demo"</span><br><span class="line">        minSdkVersion 15</span><br><span class="line">        targetSdkVersion 25</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName "1.0"</span><br><span class="line">        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(dir: 'libs', include: ['*.jar'])</span><br><span class="line">    compile 'com.android.support:appcompat-v7:25.1.0'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析第一行apply-plugin-39-com-android-application-39"><a href="#分析第一行apply-plugin-39-com-android-application-39" class="headerlink" title="分析第一行apply plugin: &#39;com.android.application&#39;"></a>分析第一行<code>apply plugin: &#39;com.android.application&#39;</code></h4><p>这句其实是Groovy语法糖，像Ruby和Js都有这种语法糖，apply实际上是个方法，补上括号后的脚本：<code>apply (plugin: &#39;com.android.application&#39;)</code>,看起来还是有点别扭是不？还有个语法糖，如果方法参数是个map类型，那么方括号可以省略，进一步还原<code>apply([ plugin: &#39;com.android.application&#39;])</code>,不理解的可以去看下Groovy的map的写法，和js一样。所以这行的意思是：apply其实是个方法，接收一个Map类型的参数。</p><blockquote><p><strong>总结两点</strong>：1. 方法调用，圆括号可以省略 2. 如果方法参数是个Map，方括号可以省略。</p></blockquote><h4 id="Groovy语言的闭包语法"><a href="#Groovy语言的闭包语法" class="headerlink" title="Groovy语言的闭包语法"></a>Groovy语言的闭包语法</h4><p>看上面的<code>dependencies</code> 这其实是个方法调用。调用了Project的dependencies方法。只不过参数是个闭包，闭包的用法在文章开始给出了链接。我们对其进行还原一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#方法调用省略了（）我们加上</span><br><span class="line">dependencies (&#123;</span><br><span class="line">    compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</span><br><span class="line">    compile &apos;com.android.support:appcompat-v7:25.1.0&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示一点</strong>：如果闭包是方法的最后一个参数，那么闭包可以放在圆括号外面</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#所以代码还能写成这样</span><br><span class="line">dependencies ()&#123;</span><br><span class="line">    compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</span><br><span class="line">    compile &apos;com.android.support:appcompat-v7:25.1.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Getter和Setter"><a href="#Getter和Setter" class="headerlink" title="Getter和Setter"></a>Getter和Setter</h4><p>Groovy语言中的两个概念，一个是Groovy中的Bean概念，一个是Groovy闭包的Delegate机制。<br>Java程序员对JavaBeans和Getter/Setter方法肯定不陌生，被设计用来获取/设置类的属性。但在Groovy中就不用那些没用的方法了。即Groovy动态的为每一个字段都会自动生成getter和setter，并且我们可以通过像访问字段本身一样调用getter和setter。比如Gradle的Project对象有个version属性（Property）下面这两行代码执行结果是一样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println project.version // Groovy  </span><br><span class="line">println(project.getVersion()) // Java</span><br></pre></td></tr></table></figure><h4 id="Project，Task-，Action"><a href="#Project，Task-，Action" class="headerlink" title="Project，Task ，Action"></a>Project，Task ，Action</h4><p>Gradle的Project之间的依赖关系是基于Task的，而不是整个Project的。</p><p><strong>Project:</strong>是Gradle最重要的一个领域对象，我们写的<strong>build.gradle</strong>脚本的全部作用，其实就是<strong>配置</strong>一个Project实例。在build.gradle脚本里，我们可以<strong>隐式</strong>的操纵Project实例，比如，apply插件、声明依赖、定义Task等，如上面<code>build.gradle</code>所示。apply、dependencies、task等实际上是Project的方法，参数是一个代码块。如果需要，也可以显示的操纵Project实例，比如：<code>project.ext.myProp = &#39;myValue&#39;</code></p><p><strong>Task:</strong>被组织成了一个<a href="http://en.wikipedia.org/wiki/Directed_acyclic_graph" target="_blank" rel="noopener">有向无环图（DAG）</a>。Gradle中的Task要么是由不同的Plugin引入的，要么是我们自己在build.gradle文件中直接创建的。Gradle保证Task按照依赖顺序执行，并且每个Task最多只被执行一次。</p><p>Gradle在默认情况下为我们提供了几个常用的Task，比如查看Project的Properties、显示当前Project中定义的所有Task等。可以通过一下命令行查看Project中所有的Task：<code>$ gradle tasks</code> （具体log不再贴出来）。可以看到，Gradle默认为我们提供了<code>dependencies、projects和properties</code>等Task。dependencies用于显示Project的依赖信息，projects用于显示所有Project，包括根Project和子Project，而properties则用于显示一个Project所包含的所有Property。</p><blockquote><p><strong>Tips: </strong>查看Project中所有的Task：<code>$ gradle tasks</code><br>查看Project中所有的properties：<code>$ gradle properties</code></p></blockquote><p>在上面的<code>build.gradle</code>中加入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">task myTask &#123;  </span><br><span class="line">    doFirst &#123;  </span><br><span class="line">        println &apos;hello&apos;  </span><br><span class="line">    &#125;  </span><br><span class="line">    doLast &#123;  </span><br><span class="line">        println &apos;world&apos;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>这段代码的含义</strong>：给Project添加一个名为“myTask”的任务<br>用一个闭包来配置这个任务,Task提供了doFirst和doLast方法来给自己添加Action。</p></blockquote><p>其实build.gradle脚本的真正作用，就是配置一个Project实例。在执行build脚本之前，Gradle会为我们准备好一个Project实例，执行完脚本之后，Gradle会按照DAG依次执行任务。</p><h2 id="自定义Task的写法"><a href="#自定义Task的写法" class="headerlink" title="自定义Task的写法"></a>自定义Task的写法</h2><p>看下面代码文件路径<code>~/Test/build.gradle</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#1</span><br><span class="line">task helloWorld &lt;&lt; &#123;</span><br><span class="line">    println &quot;Hello World&quot;</span><br><span class="line">&#125;</span><br><span class="line">#2 Test文件夹下建一个src目录，建一个dst目录，src目录下建立一个文件，命名为test.txt</span><br><span class="line">task copyFile(type: Copy)&#123;</span><br><span class="line">    from &quot;src&quot;</span><br><span class="line">    into &quot;dst&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个这里的helloWorld是一个DefaultTask类型的对象，这也是定义一个Task时的默认类型，当然我们也可以显式地声明Task的类型，甚至可以自定义一个Task类型。<br>第二个代码中（type：Copy）就是“显式地声明Task的类型”，执行<code>gradle copyFile</code> test.txt也跑到dst中去了。</p><p>如果task声明在根Project的build.gradle中的allprojects()方法中，那么这个Task会应用于所有的Project。</p><h4 id="task的依赖关系"><a href="#task的依赖关系" class="headerlink" title="task的依赖关系"></a>task的依赖关系</h4><p>Gradle不提供内建的项目生命周期管理，只是java Plugin向Project中添加了许多Task，这些Task依次执行，为我们营造了一种如同Maven般项目构建周期。那么这些task是如何依次执行的这就用到声明的依赖关系<code>taskA.dependsOn taskB</code>看下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">task taskA &lt;&lt; &#123;</span><br><span class="line">   println &apos;this is taskA from project 1&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task taskB &lt;&lt; &#123;</span><br><span class="line">   println &apos;this is taskB from project 1&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">taskA.dependsOn taskB</span><br></pre></td></tr></table></figure><p>然后我们在命令行运行：<br><code>$ gradle taskA</code><br>运行结果会先执行taskB的打印，然后执行taskA的打印</p><blockquote><p>如果是Muliti-Project的模式，依赖关系要带着所属的Project，如<code>taskA.dependsOn &#39;:other-project:taskC&#39;</code> 其中taskC位于和taskA不同的Project中，相对于AndroidStudio来说，就是位于不同的Module下的<code>build.gradle</code>中，而other-project为Module名字。</p></blockquote><h4 id="Task-的type可以自定义（没有深入研究）"><a href="#Task-的type可以自定义（没有深入研究）" class="headerlink" title="Task 的type可以自定义（没有深入研究）"></a>Task 的type可以自定义（没有深入研究）</h4><h2 id="自定义Plugin的写法"><a href="#自定义Plugin的写法" class="headerlink" title="自定义Plugin的写法"></a>自定义Plugin的写法</h2><p>没有深入研究，给出一个网上的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: DateAndTimePlugin</span><br><span class="line"></span><br><span class="line">dateAndTime &#123;</span><br><span class="line">    timeFormat = &apos;HH:mm:ss.SSS&apos;</span><br><span class="line">    dateFormat = &apos;MM/dd/yyyy&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DateAndTimePlugin implements Plugin&lt;Project&gt; &#123;</span><br><span class="line">    //该接口定义了一个apply()方法，在该方法中，我们可以操作Project，</span><br><span class="line">    //比如向其中加入Task，定义额外的Property等。</span><br><span class="line">    void apply(Project project) &#123;</span><br><span class="line">        project.extensions.create(&quot;dateAndTime&quot;, DateAndTimePluginExtension)</span><br><span class="line"></span><br><span class="line">        project.task(&apos;showTime&apos;) &lt;&lt; &#123;</span><br><span class="line">            println &quot;Current time is &quot; + new Date().format(project.dateAndTime.timeFormat)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        project.tasks.create(&apos;showDate&apos;) &lt;&lt; &#123;</span><br><span class="line">            println &quot;Current date is &quot; + new Date().format(project.dateAndTime.dateFormat)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//每个Gradle的Project都维护了一个ExtenionContainer，</span><br><span class="line">//我们可以通过project.extentions进行访问</span><br><span class="line">//比如读取额外的Property和定义额外的Property等。</span><br><span class="line">//向Project中定义了一个名为dateAndTime的extension</span><br><span class="line">//并向其中加入了2个Property，分别为timeFormat和dateFormat</span><br><span class="line">class DateAndTimePluginExtension &#123;</span><br><span class="line">    String timeFormat = &quot;MM/dd/yyyyHH:mm:ss.SSS&quot;</span><br><span class="line">    String dateFormat = &quot;yyyy-MM-dd&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个自定义的Plugin都需要实现Plugin接口，除了给Project编写Plugin之外，我们还可以为其他Gradle类编写Plugin。该接口定义了一个apply()方法，在该方法中，我们可以操作Project，比如向其中加入Task，定义额外的Property等。</p><p><a href="http://www.cnblogs.com/davenkin/p/gradle-learning-10.html" target="_blank" rel="noopener">原文地址</a></p><h2 id="Gradle-Wrapper"><a href="#Gradle-Wrapper" class="headerlink" title="Gradle Wrapper"></a>Gradle Wrapper</h2><p>Wrapper，顾名思义，其实就是对Gradle的一层包装，便于在团队开发过程中统一Gradle构建的版本，然后提交到git上，然后别人可以下载下来，这样大家都可以使用统一的Gradle版本进行构建，避免因为Gradle版本不统一带来的不必要的问题。（所以要明白这个东西可以没有，有了只是为了统一管理，更加方便）</p><h4 id="生成wrapper"><a href="#生成wrapper" class="headerlink" title="生成wrapper"></a>生成wrapper</h4><p>gradle 内置了生成wrapper的task，我们可以命令行下执行：<br><code>$ gradle wrapper</code></p><p>生成后的目录结构如下(用过AndroidStudio的很熟悉了)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── gradle-wrapper.jar</span><br><span class="line">│       └── gradle-wrapper.properties</span><br><span class="line">├── gradlew</span><br><span class="line">└── gradlew.bat</span><br></pre></td></tr></table></figure><ul><li>gradlew和gradlew.bat分别是Linux和Window下的可执行脚本，他们的用法和gradle原生命令是一样的，gradle怎么用，他们也就可以怎么用。在MacOS下运行<code>$ ./gradlew myTask</code></li><li>gradle-wrapper.jar是具体业务逻辑实现的jar包，gradlew最终还是使用java执行的这个jar包来执行相关gradle操作。</li><li>gradle-wrapper.properties是配置文件，用于配置使用哪个版本的gradle等</li></ul><h4 id="详细的看下gradle-wrapper-properties内容"><a href="#详细的看下gradle-wrapper-properties内容" class="headerlink" title="详细的看下gradle-wrapper.properties内容"></a>详细的看下gradle-wrapper.properties内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#Sat Jan 21 14:02:40 CST 2017</span><br><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=wrapper/dists</span><br><span class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-bin.zip</span><br></pre></td></tr></table></figure><p>从上面内容和文件的名称都可以看出，这就是个java的配置文件,上面看到的是自动生成的，我们也可以手动修改。然后看下各个字段的含义：</p><ul><li><strong>distributionBase</strong>  下载的gradle压缩包解压后存储的主目录</li><li><strong>distributionPath</strong>  相对于distributionBase的解压后的gradle压缩包的路径</li><li><strong>zipStoreBase</strong>  同distributionBase，只不过是存放zip压缩包的</li><li><strong>zipStorePath</strong>  同distributionPath，只不过是存放zip压缩包的</li><li><strong>distributionUrl</strong>   gradle发行版压缩包的下载地址，也就是你现在这个项目将要依赖的gradle的版本。</li></ul><h4 id="生成wrapper可以指定参数"><a href="#生成wrapper可以指定参数" class="headerlink" title="生成wrapper可以指定参数"></a>生成wrapper可以指定参数</h4><ul><li>生成wrapper可以通过指定参数的方式来指定gradle-wrapper.properties内容。</li><li>使用方法如<code>gradle wrapper –gradle-version 2.14</code>这样，这样就意味着我们配置wrapper使用2.14版本的gradle，它会影响<a href="http://gradle-wrapper.properties" target="_blank" rel="noopener">gradle-wrapper.properties</a>中的distributionUrl的值，该值的规则是<a href="http://services.gradle.org/distributions/gradle-%24" target="_blank" rel="noopener">http://services.gradle.org/distributions/gradle-$</a>{gradleVersion}-bin.zip</li><li>如果我们在调用gradle wrapper的时候不添加任何参数呢，那么就会使用你当前Gradle的版本作为生成的wrapper的gradle version。例如你当前安装的gradle是2.10版本的，那么生成的wrapper也是2.10版本的。注：当前版本指的是环境变量中配置的那个版本。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0108.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;gradle在语法上是基于Groovy语言的（&lt;a href=&quot;http://www.groovy-lang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Groovy&lt;/a&gt; 是一种基于JVM的敏捷开发语言，可以简单的理解为强类型语言java的弱类型版本），在项目管理上是基于Ant和Maven概念的项目自动化建构工具。&lt;br&gt;
    
    </summary>
    
      <category term="gradle" scheme="http://www.iskei.cn/categories/gradle/"/>
    
    
      <category term="gradle" scheme="http://www.iskei.cn/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>晋升研究员，阿里十年他都经历了什么</title>
    <link href="http://www.iskei.cn/posts/1042.html"/>
    <id>http://www.iskei.cn/posts/1042.html</id>
    <published>2018-02-01T07:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.041Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0109.jpg" alt="image"></p><p>在上海工作8年后，身为部门经理的钱磊，管理着一家ERP公司的百十来号员工，“再往上爬就是老板和他儿子了……从这个领域的技术角度来讲算是做到了顶。”05年，钱磊就开始关注一家名字奇怪，做事也奇怪的公司。<br><a id="more"></a></p><p>要不要折腾一下？2008年5月的一天钱磊对新婚的妻子说，想去杭州发展，那里有个公司叫阿里巴巴……</p><p>阿里技术人钱磊</p><blockquote><p>#侧面像马总，正面比马总帅#</p><p>——他的内网标签之一</p></blockquote><h4 id="01-不扒层皮，你怎么知道自己是谁？"><a href="#01-不扒层皮，你怎么知道自己是谁？" class="headerlink" title="01 不扒层皮，你怎么知道自己是谁？"></a>01 不扒层皮，你怎么知道自己是谁？</h4><p>告别上海的家和妻子，钱磊拖着行李箱独自来了杭州。</p><p>豪情万丈地入职，不料压根没有“蜜月期”……“刚来的那两周，时时刻刻觉得自己是不是要背着包回上海了……”钱磊并不回避刚入职时的囧境。</p><p>“不舒服，压力大。在原来的公司里，我就是拍板的人，来了以后发现其它人都挺厉害的。端着架子放不下，总想着自己好歹也是在业内干了八九年的人，在这里被刚毕业一两年的工程师挑战……”</p><p>像他这样外地来杭的人，一般入职后就开始着手找房子，钱磊则是在宾馆里住了整整两周。</p><p>“那段经历对我来说还是蛮宝贵的，不是有句阿里土话嘛，当你觉得不舒服的时候，就是成长的时候。一个人四平八稳时，很难获得成长。”</p><h4 id="02-主管搭了半条命，我学到了两个字“担当”"><a href="#02-主管搭了半条命，我学到了两个字“担当”" class="headerlink" title="02 主管搭了半条命，我学到了两个字“担当”"></a>02 主管搭了半条命，我学到了两个字“担当”</h4><p>“硬”着陆半个月后，扒了层“皮”的钱磊又被主管砸了块“石头”。</p><p>他们要用技术的手段彻底解决业务问题——为阿里巴巴最早的“产品后台”B2B的CRM做系统重构。这就好比开着汽车换引擎，百年老宅动地基……</p><p>“最重要的一个责任落在了我身上，研发框架。当时业务给我们的时间只有两个月。我用了两周时间搭框架、做论证。对于一个入职不久的新人来讲，挑战非常大。”</p><p>这种打仗的感觉，让钱磊渐渐忘记了自己是谁，业务在奔跑，系统延迟一天上线，影响就越大。每天几百人依靠这个系统工作。</p><p>“……我的主管被业务方总经理请去喝了两个小时的茶，他是把半条命都搭上了。做不好，没有退路。为了系统上线，当时还停了两天业务，对公司来说每一分钟都是损失。”</p><p>系统上线后虽然又经历了多次调试，但这是一次技术对业务的引领，而不是以往那样跟在后面打配合。因为框架的通用性还不错。直到现在，这套CRM还在使用。</p><p>把业务风险和技术风险搭在一起，并不是一个最好的选择，但却是当时唯一的选择。“我从主管身上学到了两个字‘担当’，这是一个管理者的气质。”</p><p>阿里管理者气质：担当</p><h4 id="03-离开场景和业务的修炼都是伪命题"><a href="#03-离开场景和业务的修炼都是伪命题" class="headerlink" title="03 离开场景和业务的修炼都是伪命题"></a>03 离开场景和业务的修炼都是伪命题</h4><p>接手用户权限中心的技术团队后，钱磊开始实打实地接触客户。在这几年里，他从偏技术的架构，转为偏业务的架构。“离业务太远，做出来的东西不是场景驱动，后续会有较多的问题。架构师别把自己修炼成仙了，给公司留下的却是与业务无关的垃圾。”</p><p>当时B2B的ICBU遇到了用户权益打包的问题，底层需要一个产品化的解决方案，“原来每年销售做完规划以后，技术同学都要算，会花掉多少人力去做一个新的产品配置。每次都靠研发同学冲到代码里面写一大堆。我们做了权益包功能后，只花几个小时就能配置好了。权益的产品化解决了ICBU的一个大问题。这又是一次技术引领业务的实例。”</p><blockquote><p>阿里土话：业绩永远都是附属品</p></blockquote><h4 id="04-越想证明自己-死得越快"><a href="#04-越想证明自己-死得越快" class="headerlink" title="04 越想证明自己 死得越快"></a>04 越想证明自己 死得越快</h4><p>两年前，钱磊调到共享平台，做会员和安全。他们团队从技术和产品端入手，解决了移动端与PC端会员整体链路兼容的问题。降低了一半与帐户相关的客服电话量。“现在帐户相关的客服量在7%左右，我们的目标是三年后降到0。”</p><p>从中间件到信息平台，再到共享平台，钱磊接的摊子越来越大，2015年，入职的第7年，他获得了一次提名晋升P10（研究员）的机会。</p><p>“面试的时候，自我感觉还不错，毕竟这几年也做了几件拿得出手的东西……”一个月后，钱磊却得知了自己晋升失败的消息。</p><p>“心里肯定有波动啊。”提起两年前的那次晋升面试，钱磊坦白：“我当时还请了两天假，出去放空了一下。想明白了几件事，第一，这几年我在阿里巴巴学到的东西是不是已经远远超出过去？第二，公司给予的平台和空间是不是足够我成长？第三，我为业务创造最大化的价值了吗？当我连续问了自己几个问题后，一下子就看透了。证明自己没什么大意思，给业务和用户创造价值才是最踏实的。越想证明自己的人，死得越快。”</p><blockquote><p>阿里土话：总是想要证明自己时，就没有了投入工作的心态</p></blockquote><h4 id="05-善于总结才能获得加速度"><a href="#05-善于总结才能获得加速度" class="headerlink" title="05 善于总结才能获得加速度"></a>05 善于总结才能获得加速度</h4><p>钱磊觉得自己这九年来做得最正确的事，就是坚持总结和反思。“我几乎每个月都会给自己留出做总结的时候，这个月自己和团队做了什么事，还有哪些提升空间。一定要趁热打铁记录下来，反思能让我保持头脑的清晰。</p><p>我觉得一个不善于总结的人，就是在吃老本，吃惯性，吃你的智商和知识。反思就是获得加速度的那个点。这是工作多年来，让我最受益的一个习惯。”</p><h4 id="06-技术人千万别陷在技术的圈子里"><a href="#06-技术人千万别陷在技术的圈子里" class="headerlink" title="06 技术人千万别陷在技术的圈子里"></a>06 技术人千万别陷在技术的圈子里</h4><p>钱磊在自己的内网签名里写着“知行合一”四个字。身为技术男，在业务相关的书之外，他独爱王阳明和南怀瑾，“王阳明的知行合一，是我的座右铭，倾听内心的声音，力量强大。南怀瑾的《庄子》我读了好几遍，佩服他为人的格局。我觉得技术同学特别需要打开思路，千万不要局限在技术这个圈子里。要有自己丰富的阅历，去看很多东西，触类旁通，在某些时候形成链接，对你的技术思考、业务思考都有帮助。”</p><blockquote><p>阿里土话：成长是自己的事</p></blockquote><h4 id="07-好奇心与三个Why"><a href="#07-好奇心与三个Why" class="headerlink" title="07 好奇心与三个Why"></a>07 好奇心与三个Why</h4><p>带了七八年团队，最多的时候钱磊一年要参加50多场面试，有招聘新人的，也有晋升的。他选人用人会特别看重对方的心态：</p><p>“我觉得心态非常重要，我们面试人的时候，一定要去看他的进取心和好奇心。我觉得这两者是面向未来的能力。</p><p>我会问三个Why：为什么这样做？这样做背后有什么问题和思考？你的业务价值支撑点是什么？我对技术同学的要求是：至少你自己做的事儿，如果到‘P7’这个级别，一定是问不倒的，一定经得起我问三个‘为什么’。如果你经不起问的话，我认为你做这个事要么是需求驱动，要么你就是一个吃瓜群众。我非常在意一个人的独立思考能力。”</p><blockquote><p>终极三问，why,how,who</p></blockquote><h4 id="08-一个计较KPI的主管"><a href="#08-一个计较KPI的主管" class="headerlink" title="08 一个计较KPI的主管"></a>08 一个计较KPI的主管</h4><p>肯定会带出一个计较KPI的团队</p><p>钱磊说自己的管理之道就是四个字“言传身教”，“首先，要做好自己，不要对别人要求很高，对自己要求很低。再有，你是业务驱动、客户价值驱动，还是KPI驱动？一个天天计较自己KPI的人，肯定带不出一个不计较KPI的团队。</p><p>我们团队的KPI很简单，就是回归到业务场景。我的KPI已经连续几年都是以客服量为衡量点。你这个产品怎么样，上了多少功能，都不是最主要的因素，关键是你最终解决了客户的什么问题。客户用脚来投票。我会带着团队的D（业务负责人）一起review团队的KPI。</p><blockquote><p>阿里土话：刚工作的几年比谁更踏实，再过几年比谁更激情</p></blockquote><h4 id="09-人生没有白走的路"><a href="#09-人生没有白走的路" class="headerlink" title="09 人生没有白走的路"></a>09 人生没有白走的路</h4><p>2017年7月，钱磊通过“绿色通道”（免试）晋升为P10（研究员），既在意料之中，又在意料之外。尽管不做要求，他还是准备了一个简单的PPT，那是写给自己的9年总结。</p><p>钱磊的办公桌面一如典型的技术男那样简单。桌上摆着他5岁女儿的照片。问起他印象最深刻的一个瞬间，他不加思索地回答：“2015年双11，连续熬了两个通宵后，11月13日的凌晨，我走到园区一号楼取车，眼前的夜空很美，身后是灯火通明的楼宇。就是一种很幸福的感觉。我，在这里，和大家在一起。我们和这家公司，挺伟大的……”</p><p>这就是一个阿里技术男的成长史。哪有那么多成长快乐，每一步都不是白走的路。你怎样选择和对待人生，人生就怎么样待你。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0109.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;在上海工作8年后，身为部门经理的钱磊，管理着一家ERP公司的百十来号员工，“再往上爬就是老板和他儿子了……从这个领域的技术角度来讲算是做到了顶。”05年，钱磊就开始关注一家名字奇怪，做事也奇怪的公司。&lt;br&gt;
    
    </summary>
    
      <category term="Think" scheme="http://www.iskei.cn/categories/Think/"/>
    
    
      <category term="Think" scheme="http://www.iskei.cn/tags/Think/"/>
    
  </entry>
  
  <entry>
    <title>hybrid app技术开发APP应用</title>
    <link href="http://www.iskei.cn/posts/3405.html"/>
    <id>http://www.iskei.cn/posts/3405.html</id>
    <published>2018-01-30T07:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.021Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0107.jpg" alt="image"></p><p>hybrid app技术开发APP应用。而现在主流的<strong>Hybrid app</strong>框架是<strong>phonegap</strong>。在使用phonegap做混合式开发之前需要下载很多软件及插件。如：<strong>JavaJDK、node.js、cordova、ionic、Android studio、AndroidSDK</strong>等软件及相应的插件。（请不要下载phonegap应用程序，不要混淆）<br>下面就来简单介绍一下，如何安装cordova和ionic及常用的命令总结。<br><a id="more"></a></p><h2 id="第一部分-安装时总结"><a href="#第一部分-安装时总结" class="headerlink" title="第一部分  安装时总结"></a>第一部分  安装时总结</h2><h4 id="win系统下nodejs安装及环境配置"><a href="#win系统下nodejs安装及环境配置" class="headerlink" title="win系统下nodejs安装及环境配置"></a>win系统下nodejs安装及环境配置</h4><h5 id="第一步：下载nodejs"><a href="#第一步：下载nodejs" class="headerlink" title="第一步：下载nodejs"></a>第一步：下载nodejs</h5><p>官网：<a href="http://nodejs.org/download/" target="_blank" rel="noopener">http://nodejs.org/download/</a></p><h5 id="第二步：安装nodejs"><a href="#第二步：安装nodejs" class="headerlink" title="第二步：安装nodejs"></a>第二步：安装nodejs</h5><ol><li><p>下载完成之后，双击”node-v0.10.28-x86.msi”，开始安装nodejs，自定义安装在D:\dev\nodejs下面。</p></li><li><p>在cmd控制台输入：node -v，控制台将打印出：v0.10.28，出现版本提示表示安装成功。</p></li><li>该引导步骤会将node.exe文件安装到D:\dev\nodejs\目录下，并将该目录添加进PATH环境变量。</li></ol><h5 id="第三步：npm安装"><a href="#第三步：npm安装" class="headerlink" title="第三步：npm安装"></a>第三步：npm安装</h5><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以使用cmd命令行输入”npm -v”来测试是否成功安装。出现版本提示表示安装成功。</p><h5 id="第四步：安装相关环境"><a href="#第四步：安装相关环境" class="headerlink" title="第四步：安装相关环境"></a>第四步：安装相关环境</h5><pre><code>npm install -g express-generatornpm install jade -gnpm install mysql -g</code></pre><p>默认情况下上述组件都是安装在D:\dev\nodejs\node_modules文件夹下，这也是nodejs相关组件的自动查找路径。</p><h5 id="第五步：安装CoffeeScript"><a href="#第五步：安装CoffeeScript" class="headerlink" title="第五步：安装CoffeeScript"></a>第五步：安装CoffeeScript</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install coffee-script -g</span><br></pre></td></tr></table></figure><p>确认安装的命令：coffee -v，出现版本号表示成功安装。</p><p>补充说明：<br>所有命令都是-g进行全局安装的，这样安装的安装包都在当前用户下，在磁盘的所有其他地方都可以访问到，比较方面。否则安装在当前目录下，只能在当前目录下使用。</p><p>安装express问题<br>安装nodejs安装包后，通过npm安装express后，运行express提示” express”不是内部或外部命令，原因是版本问题，当前版本是4.0.0，改成3.5.0即可运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g express@3.5.0</span><br></pre></td></tr></table></figure><p>注意：express 测试版本用大写V</p><p>npm命令集合：</p><ol><li>npm install moduleNames：安装Node模块</li></ol><ul><li><p>npm install express<br>默认会安装express的最新版本，也可以通过在后面加版本号的方式安装指定版本，如npm install express@3.0.6</p></li><li><p>npm install <name> -g<br>将包安装到全局环境中</name></p><p>但是代码中，直接通过require()的方式是没有办法调用全局安装的包的。全局的安装是供命令行使用的，就好像全局安装了vmarket后，就可以在命令行中直接运行vm命令</p></li><li><p>npm install <name> –save<br>安装的同时，将信息写入package.json中项目路径中如果有package.json文件时，直接使用npm install方法就可以根据dependencies配置安装所有的依赖包，这样代码提交到github时，就不用提交node_modules这个文件夹了。</name></p></li></ul><ol><li>全局安装命令为npm install -g moduleName。</li><li>npm view moduleNames：查看node模块的package.json文件夹</li><li>npm list：查看当前目录下已安装的node包</li><li>npm help：查看帮助命令</li><li>npm view moudleName dependencies：查看包的依赖关系</li><li>npm view moduleName repository.url：查看包的源文件地址</li><li>npm view moduleName engines：查看包所依赖的Node的版本</li><li>npm help folders：查看npm使用的所有文件夹</li><li>npm rebuild moduleName：用于更改包内容后进行重建</li><li>npm outdated：检查包是否已经过时，此命令会列出所有已经过时的包，可以及时进行包的更新</li><li>npm update moduleName：更新node模块</li><li>npm uninstall moudleName：卸载node模块</li><li>一个npm包是包含了package.json的文件夹，package.json描述了这个文件夹的结构。访问npm的json文件夹的方法如下：</li></ol><ul><li>$ npm help json 此命令会以默认的方式打开一个网页，如果更改了默认打开程序则可能不会以网页的形式打开。</li></ul><ol><li>发布一个npm包的时候，需要检验某个包名是否已存在 $ npm search packageName</li><li>npm init：会引导你创建一个package.json文件，包括名称.  版本.  作者这些信息等</li><li>npm root：查看当前包的安装路径</li><li>npm root -g：查看全局的包的安装路径</li><li>npm -v：查看npm安装的版本</li><li>npm install –save moduleName 安装模块到本目录</li></ol><p>更多命令请参看npm官方文档：<a href="https://www.npmjs.org/doc/" target="_blank" rel="noopener">https://www.npmjs.org/doc/</a></p><ol><li>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org（npm镜像源指向淘宝）" target="_blank" rel="noopener">https://registry.npm.taobao.org（npm镜像源指向淘宝）</a> </li><li>cnpm install -g cordova ionic（安装cordova ionic） </li><li>cnpm update -g cordova ionic（更新cordova ionic） </li><li>ionic -help（查看帮助） </li><li>ionic -v（查看版本） </li><li>ionic start myApp blank（空项目） </li><li>ionic start myApp tabs（带导航条） </li><li>ionic start myApp sidemenu（带侧滑菜单） </li><li>ionic platform add android（添加android平台） </li><li>ionic platform remove android（移除android平台） </li><li>ionic build android（编译项目apk）</li><li>ionic emulate android（运行项目apk 手机连接在手机运行 模拟器连接在模拟器运行） </li><li>ionic run android （相当于build + emulate） </li><li>ionic serve （开启服务调试） </li><li>ionic build ios（编译项目ipk）</li><li>ionic emulate ios（运行项目ipk） </li></ol><h5 id="第六步：创建项目"><a href="#第六步：创建项目" class="headerlink" title="第六步：创建项目"></a>第六步：创建项目</h5><pre><code>express /tmp/foo &amp;&amp; cd /tmp/foonpm install //下载依赖包npm start //启动项目</code></pre><p>目录介绍:</p><pre><code>node_moduls  存放所有的项目依赖库package.json  项目依赖配置及开发者信息app.js 程序启动文件public 静态文件（css js img）routes 路由文件（MVC中的C，controller）Viesws 页面文件（Ejs模板）</code></pre><h5 id="第七步-创建cordova项目"><a href="#第七步-创建cordova项目" class="headerlink" title="第七步 创建cordova项目"></a>第七步 创建cordova项目</h5><p>（注意：当第一次创建或编译项目的时候，可能系统会自动下载一些东西，需要一些时间。）</p><ol><li>在某个目录下创建cordova项目，打开命令行</li></ol><p>输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova  create  test  com.cordova.test   test</span><br></pre></td></tr></table></figure><p> （创建cordova工程  &lt;文件夹名&gt; &lt;包名&gt; <app名>）</app名></p><ol><li>文件夹目录</li></ol><ul><li>hooks：存放自定义cordova命令的脚本文件。每个project命令都可以定义before和after的Hook，比如：before_build、after_build。没用过，不展开了。</li><li>platforms：平台目录，各自的平台代码就放在这里，可以放一下平台专属的代码，现在这个目录应该是空的，后面会介绍如何创建平台。</li><li>plugins：插件目录，安装的插件会放在这里。后面会有专门的文章介绍开发插件。</li><li>www：最重要的目录，存放项目主题的HTML5和JS代码的目录。app一开始打开的就是这个目录中index.html文件。</li><li>config.xml：主要是cordova的一些配置，比如：项目使用了哪些插件、应用图标icon和启动页面SplashScreen，修改app的版本，名字等信息，还有平台的配置。</li></ul><ol><li>添加平台支持</li></ol><p>用命令行打开对应的文件夹，</p><p>添加平台 输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova platforms add android</span><br></pre></td></tr></table></figure><p>移除平台 输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova platforms rm android</span><br></pre></td></tr></table></figure><p> （移除android平台支持）</p><p>也可以通过@版本号，来添加不同版本的android平台，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova platforms rm android @4.1.1</span><br></pre></td></tr></table></figure><p>现在就可以在www文件夹内写自己的js和html代码了。</p><p>添加插件 输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin add cordova-plugin-file</span><br></pre></td></tr></table></figure><p> (cordova plugin add &lt;插件官方名称&gt;)</p><p>插件搜索地址：<a href="http://cordova.apache.org/plugins/" target="_blank" rel="noopener">http://cordova.apache.org/plugins/</a></p><p>也可以通过github查找一些第三方插件 输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin add https://github.com/phonegap/phonegap-plugin-barcodescanner.git //这个是扫描二维码插件  (github项目地址)</span><br></pre></td></tr></table></figure><p>github地址：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><p>删除插件 输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin rm cordova-plugin-file</span><br></pre></td></tr></table></figure><p>（使用rm和remove都可以）</p><p>插件列表 输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin list</span><br></pre></td></tr></table></figure><p>（查看当前安装了哪些插件）</p><p>编译调试程序</p><p>不是每一句代码都需要运行，根据自己的需求进行选择。</p><ul><li>cordova install android //将编译好的应用程序安装到模拟器上。</li><li>cordova emulate android //在模拟器上运行（前提是创建好AVD）</li><li>cordova serve android //在浏览器运行</li><li>cordova build android //打包cordova项目到android平台。</li><li>cordova run android //通过USB直接安装到真机（该语句已经包括了build命令）</li></ul><p>例如：我现在是手边直接连着测试手机，所以我就会直接用cordova run android</p><p>中间省略…</p><p>出现LAUNCH SUCCESS则编译成功，已经安装到手机上了。</p><h5 id="第八步-安装Android-SDK"><a href="#第八步-安装Android-SDK" class="headerlink" title="第八步 安装Android SDK"></a>第八步 安装Android SDK</h5><ol><li>下载Android SDK，点击安装，直接默认路径即可！</li></ol><p>下载地址：<a href="http://developer.android.com/sdk/index.html" target="_blank" rel="noopener">http://developer.android.com/sdk/index.html</a></p><ol><li>默认路径安装后，安装完成，开始配置环境变量。</li><li><p>打开计算机属性——高级系统设置——环境变量（如上文）</p></li><li><p>新建一个环境变量，变量名：ANDROID_HOME，变量值：C:\Program Files (x86)\Android\android-sdk（以你安装目录为准,确认里面有tools和add-ons等多个文件夹），点击确认。</p></li><li>在变量PATH后面加上变量值%ANDROID_HOME%\tools;点击确认即可。 如果没有这个变量，新建一个即可！新建方法见上文！</li><li><p>Android SDK配置完成，接下来验证配置是否成功。</p></li><li><p>点击运行——输入cmd——回车——输入android -h——回车</p></li><li>ionic  Android 环境搭建过程遇到的问题 <a href="http://bbs.ionic-china.com/read.php?tid=7&amp;fid=4" target="_blank" rel="noopener">http://bbs.ionic-china.com/read.php?tid=7&amp;fid=4</a> </li></ol><h5 id="第九步-安装Ionic"><a href="#第九步-安装Ionic" class="headerlink" title="第九步 安装Ionic"></a>第九步 安装Ionic</h5><ol><li>执行npm install -g ionic</li><li>创建一个Ionic APP 执行ionic start myapp[template]<br>Template 有如下三种 默认是tabs project:<br>tabs（默认）.  sidemenu.  blank</li><li>安装模板  ionic install –save 模板</li><li>cordova 是页面与设备桥接</li><li>npm install –save bower</li></ol><h5 id="第十步-安装gulp相关代码合并-混淆工具"><a href="#第十步-安装gulp相关代码合并-混淆工具" class="headerlink" title="第十步 安装gulp相关代码合并.  混淆工具"></a>第十步 安装gulp相关代码合并.  混淆工具</h5><pre><code>npm install gulp  npm install gulp-concat:合并文件npm install gulp-rename:重命名文件npm install gulp-sass:支持sassnpm install gulp-minify-css:压缩css npm install gulp-connect  配置一个web服务器</code></pre><h5 id="第十一步-编译测试"><a href="#第十一步-编译测试" class="headerlink" title="第十一步 编译测试"></a>第十一步 编译测试</h5><ol><li><p>android版本</p><p> cd myapp<br> ionic platform add android<br> ionic build android<br> ionic run android<br> 如果要在虚拟机中测试，可以改用<br> ionic emulate android</p></li><li><p>ios版本</p><p> $ ionic start myapp tabs<br> $ cd myapp<br> $ ionic platform add ios<br> $ ionic build ios<br> $ ionic emulate ios</p></li><li><p>浏览器同时修改端口号</p><p> cd myapp<br> ionic serve -p 8105</p></li><li><p>连接数据线直接测试</p><p> ionic run android</p></li></ol><h4 id="重点集合"><a href="#重点集合" class="headerlink" title="重点集合"></a>重点集合</h4><h5 id="ionic安装失败或者cordova安装失败解决方法"><a href="#ionic安装失败或者cordova安装失败解决方法" class="headerlink" title="ionic安装失败或者cordova安装失败解决方法"></a>ionic安装失败或者cordova安装失败解决方法</h5><p>镜像使用方法（三种办法任意一种都能解决问题，建议使用##### 第三种，将配置写死，下次用的时候配置还在）:</p><ol><li><p>通过config命令</p><p> npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br> npm info underscore （如果上面配置正确这个命令会有字符串response）</p></li><li><p>命令行指定</p><p> npm –registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> info underscore </p></li><li><p>编辑 ~/.npmrc 加入下面内容</p><p> registry = <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br> 搜索镜像: <a href="https://npm.taobao.org" target="_blank" rel="noopener">https://npm.taobao.org</a><br> 建立或使用镜像,参考: <a href="https://github.com/cnpm/cnpmjs.org" target="_blank" rel="noopener">https://github.com/cnpm/cnpmjs.org</a></p></li><li><p>使用cnpm(强烈建议)</p><p> 安装cnpm<br> npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br> 以后所有的npm可用cnpm代替，如:cnpm install ionic</p></li><li><p>如果还是一直失败，将ionic文件下载解压后放到C:\Users\Auser\AppData\Roaming\npm\node_modules中</p></li><li><p>配置环境变量</p><p>node的npm命令Path : C:\Documents and Settings\Administrator\Application Data\npm</p><p>补齐npm文件夹下有关于ionic的文件 <a href="http://download.csdn.net/detail/superjunjin/8417723" target="_blank" rel="noopener">http://download.csdn.net/detail/superjunjin/8417723</a></p><p>补齐ionic项目下node_modules等文件 <a href="http://download.csdn.net/detail/superjunjin/8417731" target="_blank" rel="noopener">http://download.csdn.net/detail/superjunjin/8417731</a><br>（具体文件见最后的压缩包）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ionic start myApp sidemenu  //创建带有左侧带有menu栏的示例项目</span><br><span class="line">ionic start myApp blank   //创建空白项目</span><br></pre></td></tr></table></figure></li></ol><h2 id="第二部分-开发过程总结"><a href="#第二部分-开发过程总结" class="headerlink" title="第二部分 开发过程总结"></a>第二部分 开发过程总结</h2><h4 id="Angular-提供3种方法创建并注册服务"><a href="#Angular-提供3种方法创建并注册服务" class="headerlink" title="Angular 提供3种方法创建并注册服务"></a>Angular 提供3种方法创建并注册服务</h4><ol><li>Provider  </li><li>Factory  </li><li>Service</li></ol><p>Providers 是唯一一种你可以传进 .config() 函数的 service。当你想要在 service对象启用之前，先进行模块范围的配置，那就应该用 provider。</p><h4 id="bower安装restangular失败"><a href="#bower安装restangular失败" class="headerlink" title="bower安装restangular失败"></a>bower安装restangular失败</h4><p>（报错：Bower : ENOGIT git is not installed or not in the PATH）</p><ol><li>添加git路径到环境变量PATH中（命令：set PATH=%PATH%;D:\Program Files\Git\bin）</li><li>运行bower install restangular 即可安装成功</li><li><a href="http://www.ng-newsletter.com/posts/restangular.html" target="_blank" rel="noopener">http://www.ng-newsletter.com/posts/restangular.html</a></li><li>restangular文档：<a href="https://github.com/mgonto/restangular#element-methods" target="_blank" rel="noopener">https://github.com/mgonto/restangular#element-methods</a></li><li>安装bower install underscore</li></ol><h4 id="restangular需要用到的js"><a href="#restangular需要用到的js" class="headerlink" title="restangular需要用到的js"></a>restangular需要用到的js</h4><p>(js少引入报错：Uncaught ReferenceError: _ is not defined from restangular)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.4.4/underscore-min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://cdn.jsdelivr.net/restangular/latest/restangular.min.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="跨域错误解决办法"><a href="#跨域错误解决办法" class="headerlink" title="跨域错误解决办法"></a>跨域错误解决办法</h4><p>（XMLHttpRequest cannot load  ‘’. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘ ‘ is therefore not allowed access. ）</p><p>Java代码中返回结果集前增加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br></pre></td></tr></table></figure><h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4><p> <a href="http://yijiebuyi.com/blog/3b55056c87b73ba606c19e9338dca679.html" target="_blank" rel="noopener">http://yijiebuyi.com/blog/3b55056c87b73ba606c19e9338dca679.html</a></p><ol><li>安装bower install angular-translate</li><li>安装bower install angular-translate-loader-static-files</li><li>angular国际化不存在乱码，如果出现乱码可能是中文json文件编码非UTF-8格式</li><li>国际化使用（移动端有问题  无法使用）：</li></ol><p>需要引入JS</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"lib/angular/angular.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"lib/angular-translate/angular-translate.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"lib/angular-translate-loader-static-files/angular-translate-loader-static-files.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>建立文件夹i18n存放cn.json /en.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">en.json：&#123;&quot;100001&quot;:&quot;Login&quot;,&quot;100002&quot;:&quot;Register&quot;&#125;</span><br><span class="line">cn.json：&#123;&quot;100001&quot;:&quot;登录&quot;,&quot;100002&quot;:&quot;注册&quot;&#125;</span><br></pre></td></tr></table></figure><p>在app.js中config里配置如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//国际化配置</span></span><br><span class="line">$translateProvider.preferredLanguage(<span class="string">'cn'</span>);</span><br><span class="line">$translateProvider.useStaticFilesLoader(&#123;</span><br><span class="line">  prefix: <span class="string">'/i18n/'</span>,</span><br><span class="line">  suffix: <span class="string">'.json'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>html页面使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">'100001'</span> | translate &#125;&#125;</span><br><span class="line"><span class="number">5.</span>按钮切换语种</span><br><span class="line">.controller(<span class="string">'LanguageSwitchingCtrl'</span>, [<span class="string">'$scope'</span>, <span class="string">'$translate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">scope, $translate</span>) </span>&#123;</span><br><span class="line">scope.switching = <span class="function"><span class="keyword">function</span> (<span class="params">lang</span>) </span>&#123;</span><br><span class="line">  $translate.use(lang);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><h4 id="AngularJS-iframe跨域打开内容时报错误的解决办法"><a href="#AngularJS-iframe跨域打开内容时报错误的解决办法" class="headerlink" title="AngularJS iframe跨域打开内容时报错误的解决办法"></a>AngularJS iframe跨域打开内容时报错误的解决办法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"myFrame"</span> <span class="attr">ng-src</span>=<span class="string">"&#123;&#123;url&#125;&#125;"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">seamless</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="打开不同域的内容时报下面的错误"><a href="#打开不同域的内容时报下面的错误" class="headerlink" title="打开不同域的内容时报下面的错误"></a>打开不同域的内容时报下面的错误</h4><p><code>Blocked loading resource from url not allowed by $sceDelegate policy</code></p><p>解决方案：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.config(<span class="function"><span class="keyword">function</span>(<span class="params">$sceDelegateProvider</span>) </span>&#123;</span><br><span class="line">   $sceDelegateProvider.resourceUrlWhitelist([</span><br><span class="line">       <span class="comment">// Allow same origin resource loads.</span></span><br><span class="line">       <span class="string">'self'</span>,</span><br><span class="line">       <span class="comment">// Allow loading from our assets domain.  Notice the difference between * and **.</span></span><br><span class="line">       <span class="string">'http://media.w3.org/**'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0107.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;hybrid app技术开发APP应用。而现在主流的&lt;strong&gt;Hybrid app&lt;/strong&gt;框架是&lt;strong&gt;phonegap&lt;/strong&gt;。在使用phonegap做混合式开发之前需要下载很多软件及插件。如：&lt;strong&gt;JavaJDK、node.js、cordova、ionic、Android studio、AndroidSDK&lt;/strong&gt;等软件及相应的插件。（请不要下载phonegap应用程序，不要混淆）&lt;br&gt;下面就来简单介绍一下，如何安装cordova和ionic及常用的命令总结。&lt;br&gt;
    
    </summary>
    
      <category term="ionic" scheme="http://www.iskei.cn/categories/ionic/"/>
    
    
      <category term="ionic" scheme="http://www.iskei.cn/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的Bind，Call和Apply</title>
    <link href="http://www.iskei.cn/posts/55294.html"/>
    <id>http://www.iskei.cn/posts/55294.html</id>
    <published>2018-01-29T07:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.029Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0105.jpg" alt="image"></p><p>js 中的 <em>上下文 Context</em>，可以说是一个，你即使不知道，没听过，也不影响你继续写 js 代码的一个概念。但是，它又确确实实是无所不在的一个东西，是的，无所不在。<br><a id="more"></a></p><h3 id="上下文解释"><a href="#上下文解释" class="headerlink" title="上下文解释"></a>上下文解释</h3><p>所谓上下文，它是用来存储系统的一些初始化信息，例如在jboss中通过配置文件指定了数据源，那么在jboss启动的时候就把这个文件的相关信息上下文中，于是在我们使用这个数据源的时候，就需要先获得系统的上下文，然后再通过一定的方式将数据源取出来。至于在系统启动时，是如何将这些初始化信息加载到上下文中，而上下文在程序中具体又是以什么形式体现的，应该随着系统的不同而不同。</p><p>　　上下文即ServletContext,是一个全局的储存信息的空间，服务器启动，其就存在，服务器关闭，其才释放。所有用户共用一个ServletContext。所以，为了节省空间，提高效率，ServletContext中，要放必须的、重要的、所有用户需要共享的线程又是安全的一些信息。如，做一个购物类的网站，要从数据库中提取物品信息，如果用session保存这些物品信息，每个用户都访问一便数据库，效率就太低了；所以要用来Servlet上下文来保存，在服务器开始时，就访问数据库，将物品信息存入Servlet上下文中，这样，每个用户只用从上下文中读入物品信息就行了。</p><p>　　获取ServletContext的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br><span class="line">　 session.getServletContext();</span><br></pre></td></tr></table></figure><p>从我自己的经验来看，对上下文的认识，算是分成了三个阶段，每一个阶段，都让我从外在的表现中，理解了一些更本质上的东西。</p><h3 id="1-第一阶段，不知"><a href="#1-第一阶段，不知" class="headerlink" title="1. 第一阶段，不知"></a>1. 第一阶段，不知</h3><p>我最开始接触 js 的时候，看到了它的 <code>new</code> ，看到了它的 <code>this</code> ，很自然地会把 js 和其它的一些 OOP 语言等同起来看待，并且，好像，也是这么回事。比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Class = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.a = a;</span><br><span class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ins = <span class="keyword">new</span> Class(<span class="number">1</span>);</span><br><span class="line">ins.add();</span><br><span class="line"><span class="built_in">console</span>.log(ins.a); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>上面的代码，可以按预期的那样，最后得到 <code>2</code> 的输出。</p><p>但是，如果仅仅是 <em>类，实例</em> 这种层面的认识，我无法解释下面的问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ins = <span class="keyword">new</span> Class(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> func = ins.add;</span><br><span class="line">func();</span><br><span class="line"><span class="built_in">console</span>.log(ins.a); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>甚至解释不清楚下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.add();</span><br><span class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>这里可没有 <em>类</em> ，也没有 <em>实例</em> 。</p><p>我上面的最开始对 js 的认识当中，局限就在于，把 <code>this</code> 理解成了 <em>实例</em> 。也许在其它语言中（比如 Python 常用的实例方法第一个参数 <code>self</code>），是这样。但是在 js 中， <code>this</code> 跟 <em>实例</em> 完全没有关系。</p><h3 id="2-第二阶段，this"><a href="#2-第二阶段，this" class="headerlink" title="2. 第二阶段，this"></a>2. 第二阶段，this</h3><p>当我明白问题出在 <code>this</code> 上，或者说，当我终于理解了 <code>this</code> 这个东西之后，上面的代码，再也不会困扰我了。</p><p>我知道了， js 中有一个东西叫 <em>上下文</em> ，可惜的是，这时，我对上下文的概念，仅仅停留在 <code>this</code>上。</p><p>这时我的理解是： <code>this</code> 表示的是，函数调用时的 <em>上下文</em> 。</p><p>说得详细一点，就是 <code>this</code> 不是表示的 <em>实例</em> ，而是函数调用时的 <em>上下文</em> 。 <em>上下文</em> 这个东西，默认是 <code>window</code> ，即 <em>全局</em> 。但是，你可以明确地为函数指定一个 <em>上下文</em> 。回到 <code>this</code> 上，就是在定义时你根本不知道 <code>this</code> 是什么，因为在调用时，它可以是任何东西（因为 <em>上下文</em> 是可以人为指定的）。</p><p>回到刚开始的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Class = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.a = a;</span><br><span class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ins = <span class="keyword">new</span> Class(<span class="number">1</span>);</span><br><span class="line">ins.add();</span><br><span class="line"><span class="built_in">console</span>.log(ins.a); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>这段代码的结构之所以是 <code>2</code> ，不是因为 <em>实例</em> ，而是因为 <em>上下文</em> 。</p><p>首先说一下 <code>new</code> 。 <code>new</code> 在 js 中，不考虑原型链它的作用，相当于是先创建了一个空的对象，然后把这个空的对象，作为 <em>构造函数</em> 的 <em>上下文</em> ，再去执行 <em>构造函数</em> ，最后再返回这个当初的空对象。即：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> what_new = <span class="function"><span class="keyword">function</span>(<span class="params">func, a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = &#123;&#125;;</span><br><span class="line">  func.apply(context, [a]);</span><br><span class="line">  <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Class = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.a = a;</span><br><span class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ins = what_new(Class, <span class="number">1</span>);</span><br><span class="line">ins.add();</span><br><span class="line"><span class="built_in">console</span>.log(ins.a);</span><br></pre></td></tr></table></figure><p>当然， <code>new</code> 除了上面的 <code>func.apply</code> 的作用之外， <strong>它还会处理原型链</strong> ，这里就不介绍了。上面的代码仅是为了说明 <code>new</code> 对于所谓的构造函数做了什么事。</p><p>有了上下文，就不难解释 <code>ins</code> 这个东西了。所谓的构造函数，只是在指定了 <code>this</code> 到底是哪一个对象之后，作了相应的赋值操作而已，最后得到这个对象的返回，经过了一些赋值操作，对象中就有了新的东西了。</p><p>同样，对于一个在定义时包含了 <code>this</code> 的函数，比如前面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果来一句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = obj.add;</span><br><span class="line">func(); <span class="comment">//undefined</span></span><br><span class="line">func.apply(&#123;<span class="attr">a</span>: <span class="number">0</span>&#125;) <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>这些都很容易明白了。 js 中的函数，都是一些很单纯的函数，所有的函数跟它在哪里定义完全没有关系（考虑闭包的情况除外）。所以上面的代码，虽然 <code>add</code> 函数是写在 <code>obj</code> 中的，但是，它跟你在 <code>window</code> 中写一个函数是 <strong>完全一样</strong> 的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.a++&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  add: add</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然 <code>add</code> 函数中有 <code>this</code> ，那么这个函数执行时的行为，就要小心一点了。所以上面明确地指定了一个上下文给它 <code>func.apply({a: 0})</code> 。</p><p>还是回到开始的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面的代码，我知道了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.add();</span><br></pre></td></tr></table></figure><p>和：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = obj.add();</span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p>会得到不一样的结果。并且知道，这个不一样的结果是上下文引起的，还知道，后者 <code>func()</code> 执行时，上下文是全局的 <code>window</code> 了。</p><p>我虽然知道是这样的一个情况，但是，为什么？执行同一个函数结果怎么就不一样了呢？</p><p>我在很长时间里，都没有去细细考虑过这个问题。不过，因为知道了“上下文是一个在定义时无意义，其具体值完全由执行时决定”这点之后，我都尽量避免去使用 <code>this</code> ，实在要用，在调用时，我都会通过 <code>apply</code> 或 <code>call</code> 明确指定上下文，这样，至少不会踩坑里。</p><h3 id="3-第三阶段，一切都是上下文"><a href="#3-第三阶段，一切都是上下文" class="headerlink" title="3. 第三阶段，一切都是上下文"></a>3. 第三阶段，一切都是上下文</h3><p>某天，我在网上看到了这样一段代码（原始出处不知道）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bind = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Function</span>.prototype.bind)</span><br></pre></td></tr></table></figure><p>这个新定义的 <code>bind</code> 函数具体做什么事先不管它，我好奇的是 <code>call.bind()</code> 这个调用。因为 <code>call</code> 这个函数，之前一直以为它是 <code>Function</code> 对象的一个方法（它本身也是一个函数），但是，如果按“对象的方法”这个角度去想的话，那对它绑定一个上下文（ <code>bind()</code> 的调用 ）不就完全没有意义了么？（因为对象的方法应该是跟上下文无关的）</p><p>不久之前，我在一条tweet上看到了这样一段js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bind = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Function</span>.prototype.bind);</span><br></pre></td></tr></table></figure><p>第一眼看上去，我能猜出它究竟是用来做什么的。它把x.y(z)转化成了y(x,z)。我欣喜万分的给我的同事看这段代码。他们问我这是什么意思。而我当我正要开口向他们解释时却发现不知道怎么说才好。我徘徊了一会然后郁闷的走开了。</p><p>编写良好的代码会向人们传达它的作用。在读完Functional Javascript和 JavaScript Allongé （两本都是相当好的书）这两本书之后，再加上我在Javascript函数式编程方面有些经验，弄懂上面这段代码的意思毫无压力。但是应该怎么向没有函数式编程经验的人解释呢（正如大多数人关心的那样）？</p><p>我决定亲自来完成这个任务，通过简单地例子和注释。我的结果如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//设立一个简单地对象作为“上下文”</span></span><br><span class="line"><span class="keyword">var</span> context = &#123; <span class="attr">foo</span>: <span class="string">"bar"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个在this上下文中指向foo变量的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnFoo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.foo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量在作用域中不存在，因此显示undefined</span></span><br><span class="line">returnFoo(); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果我们把它绑定在context上下文中</span></span><br><span class="line"><span class="keyword">var</span> bound = returnFoo.bind(context);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在的作用域中有这个变量了</span></span><br><span class="line">bound(); <span class="comment">// =&gt; "bar"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 这就是Function.prototype.bind的作用.    </span></span><br><span class="line"><span class="comment">//由于returnFoo也是函数，因此它继承了function的原型</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 如果你觉得享受，接着往下读，下面更精彩</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有许多方法将函数绑定在一个上下文中</span></span><br><span class="line"><span class="comment">// Call和Apply让你能在上下文中调用函数</span></span><br><span class="line">returnFoo.call(context); <span class="comment">// =&gt; bar</span></span><br><span class="line">returnFoo.apply(context); <span class="comment">// =&gt; bar</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将函数添加到对象中</span></span><br><span class="line">context.returnFoo = returnFoo;</span><br><span class="line">context.returnFoo(); <span class="comment">// =&gt; bar</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 现在我们来玩一点诡异的东西</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.prototype 中有一个叫做slice的方法</span></span><br><span class="line"><span class="comment">// 对一个数组调用slice，可以返回一个从start index到end index的数组</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].slice(<span class="number">0</span>,<span class="number">1</span>); <span class="comment">// =&gt; [1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因此我们把Array.slice赋值给一个本地变量slice</span></span><br><span class="line"><span class="keyword">var</span> slice = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在的slice是"自由的"，由于Array.prototype中的slice一般指定了上下文</span></span><br><span class="line"><span class="comment">//或者默认为this,此时slice将不起作用</span></span><br><span class="line">slice(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">// =&gt; TypeError: can't convert undefined to object</span></span><br><span class="line">slice([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// =&gt; TypeError: ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是如果我们使用call或者apply，slice又将在一个上下文中执行</span></span><br><span class="line">slice.call([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// =&gt; [1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Apply和Call差不多，知识参数要放在一个数组中</span></span><br><span class="line">slice.apply([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">0</span>,<span class="number">1</span>]); <span class="comment">// =&gt; [1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用call没错了，那么能不呢使用bind呢？</span></span><br><span class="line"><span class="comment">// 没错，我们来把"call"绑定在slice上</span></span><br><span class="line">slice = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.slice);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在slice可以把第一个参数作为上下文了</span></span><br><span class="line">slice([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// =&gt; [1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 很酷，对吧。现在再来完成一件事</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在我们对bind本身做一件刚才对silce做的事</span></span><br><span class="line"><span class="keyword">var</span> bind = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Function</span>.prototype.bind);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里总结一下，好好想想</span></span><br><span class="line"><span class="comment">// 发生了什么事? 我们改变了call，</span></span><br><span class="line"><span class="comment">// 返回一个接收一个函数和一个上下文作为ic桉树的函数</span></span><br><span class="line"><span class="comment">//并且返回了一个完全绑定的函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回到最初的例子</span></span><br><span class="line"><span class="keyword">var</span> context = &#123; <span class="attr">foo</span>: <span class="string">"bar"</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnFoo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.foo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在来使用神奇的"bind"函数</span></span><br><span class="line"><span class="keyword">var</span> amazing = bind(returnFoo, context);</span><br><span class="line">amazing(); <span class="comment">// =&gt; bar</span></span><br></pre></td></tr></table></figure><p>其中以 <code>slice</code> 函数举的例子让我恍然大悟：</p><ul><li>上下文控制不仅仅是 <code>apply</code> / <code>call</code>，所有的点 <code>.</code> ，都是在指定上下文。</li><li>js 中的函数比我想像的还要纯，根本没有“对象中的方法”这个东西，即使是“原生对象”中。（它仅仅起一个名字空间的作用）</li></ul><p>所有的函数调用，都有两层意义，比如 <code>c.f()</code>：</p><ul><li><code>f</code> 这个函数，它在 <code>c</code> 中。（名字空间的问题）</li><li>把 <code>c</code> 作为 <code>f</code> 的上下文，去调用 <code>f</code> 。（前提是 <code>f</code> 没有绑定过上下文）</li></ul><p>如果 <code>c</code> 没有，则默认是 <code>window</code> 。</p><p>所有的，js 中所有的函数调用，都是如此。即使是 <code>f.call(context, x)</code> ，我之前只看到了第一层意义（ <code>f</code> 中有一个 <code>call</code> 方法可以使用），则忽略了第二层意义 —— 把 <code>f</code> 作为 <code>call</code> 的上下文。</p><p>简单来说，我们可以相像 <code>call</code> 这个函数，它的代码大概是这样的（可变参数的问题先不管）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> call = <span class="function"><span class="keyword">function</span>(<span class="params">context, a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> new_func = <span class="keyword">this</span>.bind(context);</span><br><span class="line">    retur new_func(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的作用，就是把 <em>指定的上下文（context）</em> 作为 <em>自己的上下文（this）</em> 的 <em>上下文</em> ，然后再调用 <em>自己的上下文（绑定上下文之后的 this）</em> 。</p><p>上面一句话有些纠结哈，主要搞明白多种上下文的关系， <code>f.call(context, x)</code> 当中， <em>自己的上下文</em>上面是 <code>f</code> 。 <em>指定的上下文</em> 上面是 <code>context</code> 。</p><p>再看 <code>f.call(context, x)</code> 这个代码，结合“函数是单纯”这点，我想到，即使是原生对象的那些方法， <strong>也不过是把一些单纯的函数放到了 prototype 中而已</strong> ，比如把 <code>call</code> 函数放到了 <code>Function.prototype</code> 当中。</p><p>至此，再看 <code>c.f()</code> ， <code>a.b.c()</code> 这些，不要去想是调用 <code>c</code> 对象中的 <code>f</code> 方法（这么说没错，但是名字空间的问题是显而易见的嘛），而是想成，调用时把 <code>c</code> 作为 <code>f</code> 的上下文。</p><p>好了，回到开始的那行例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new_bind = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Function</span>.prototype.bind)</span><br></pre></td></tr></table></figure><p>这个就非常好理解了（为了描述方便，我改成 <code>new_bind</code> 了），把 <code>bind</code> 作为上下文绑定到 <code>call</code>中。</p><p>这里注意一下，绑定了上下文的 <code>call</code> 函数，还是 <code>call</code> 函数，但是 “此 <code>call</code> 已经非彼 <code>call</code>” 了。</p><p>所以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_bind != <span class="built_in">Function</span>.prototype.call</span><br></pre></td></tr></table></figure><p>虽然调用形式上， <code>new_bind</code> 和 <code>call</code> 完全一样，但是他们的上下文行为不一样：</p><ul><li><code>call</code> 是未绑定状态，所以 <code>f.call()</code> 会在执行时把 <code>f</code> 作为上下文绑定到 <code>call</code> 函数中。</li><li><code>new_bind</code> 是已绑定状态，所以 <code>f.new_bind()</code> 对 <code>new_bind()</code> 的执行完全没影响。</li></ul><p>我们可以以这样的流程来帮助我们理解：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_bind =&gt; <span class="function"><span class="params">call</span> =&gt;</span> bind.call =&gt; bind.call(f, context) =&gt; f.bind(context)</span><br></pre></td></tr></table></figure><p>一步一步解释：</p><ul><li><p><code>new_bind =&gt; call</code></p><p><code>new_bind</code> 在形式上就是 <code>call</code> 。</p></li><li><p><code>call =&gt; bind.call</code></p><p>只是这个 <code>call</code> ，是指定了 <code>bind</code> 作为它的上下文的。既然是 <code>bind</code> 作为它的上下文，那我们可以写成是 <code>bind.call</code> 的样式。</p></li><li><p><code>bind.call(f, context) =&gt; f.bind(context)</code></p><p><code>new_bind</code> 的调用 <code>new_bind(f, context)</code> 就相当于是 <code>bind.call(f, context)</code> 。考虑 <code>call</code> 函数之前的行为： <code>f.call(context, a)</code> 是把 <code>context</code> 作为 <code>f</code> 的上下文，也就是 <code>context.f(a)</code> ，那么 <code>bind.call(f, context)</code> 对应的就是 <code>f.bind(context)</code> 。</p></li><li><p><code>f.bind(context)</code></p><p>不用多说了吧，把 <code>context</code> 绑定到 <code>f</code> 上，返回一个绑定了上下文的新函数。</p></li></ul><p>完全是最基本的代数推导嘛，形式上，上下文前置总是没有问题的。</p><h3 id="4-结语"><a href="#4-结语" class="headerlink" title="4. 结语"></a>4. 结语</h3><p>我一直认同，要理解 js 的东西，从函数式语言入手，非常合适。硬要往面向对象的那套东西上套，太纠结了（我不管概念上到底什么样才叫面向对象，原生没有类定义，没有继承，没有实例化，就别扯这些就完了。对了，我认为原型追溯那不叫继承哈）。</p><p>当然，我不知道弄明白了最后那个“代数推导”到底有什么好处，也许没有，因为就算不明白这些也不影响我写了很多可以正常工作的 js 代码嘛。只是，我以后再写，思路上的可能会有一些不同了。比如代码组织的形式上，可以尝试把很多的小函数做到不同的“名字空间”中，然后再在业务层面，通过 <em>Mixin</em> 来拼出不同的业务对象。这些函数中可能到处充斥着 <code>this</code> ，我能控制好它们了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0105.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;js 中的 &lt;em&gt;上下文 Context&lt;/em&gt;，可以说是一个，你即使不知道，没听过，也不影响你继续写 js 代码的一个概念。但是，它又确确实实是无所不在的一个东西，是的，无所不在。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.iskei.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.iskei.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>AngularJs技术</title>
    <link href="http://www.iskei.cn/posts/39022.html"/>
    <id>http://www.iskei.cn/posts/39022.html</id>
    <published>2018-01-26T07:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.021Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0103.jpg" alt="image"></p><p>前端技术的发展是如此之快，各种优秀技术、优秀框架的出现简直让人目不暇接，紧跟时代潮流，学习掌握新知识自然是不敢怠慢。<br><a id="more"></a></p><h1 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h1><p>这是一个AngularJS Guide的中文分支版本，提供关于AngularJS的视频、入门、使用与论坛等中文互联网内容，这里的分类并没有完全参照英文版，也并不固定，如果你有发现新的内容需要添加新类别，直接加吧。</p><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><ul><li><a href="http://i.youku.com/u/UMzQyMDgyODk2/videos" target="_blank" rel="noopener">Angular教学视频youku转载</a></li></ul><h2 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a>入门指南</h2><ul><li><a href="http://www.infoq.com/cn/news/2013/02/angular-web-app" target="_blank" rel="noopener">使用AngularJS构建大型Web应用</a></li><li><a href="http://www.ituring.com.cn/article/13471" target="_blank" rel="noopener">AngularJS入门教程</a></li><li><a href="http://www.cnblogs.com/lcllao/archive/2012/10/18/2728787.html" target="_blank" rel="noopener">AngularJS学习笔记</a></li></ul><h2 id="使用经验"><a href="#使用经验" class="headerlink" title="使用经验"></a>使用经验</h2><ul><li><a href="http://www.cnblogs.com/whitewolf/archive/2013/03/24/2979344.html" target="_blank" rel="noopener">AngularJS开发一些经验总结</a></li><li><a href="http://www.cnblogs.com/whitewolf/archive/2012/09/11/2680659.html" target="_blank" rel="noopener">再谈AngularJS DI(Dependency Injection)</a></li><li><a href="http://www.cnblogs.com/whitewolf/archive/2013/03/27/2983806.html" target="_blank" rel="noopener">Angularjs的IOC Inject分析</a></li><li><a href="http://www.cnblogs.com/whitewolf/archive/2013/05/22/3092184.html" target="_blank" rel="noopener">细说Angular ng-class</a></li><li><a href="http://www.cnblogs.com/whitewolf/archive/2013/04/16/3024843.html" target="_blank" rel="noopener">AngularJS Controller 间通信机制</a></li><li><a href="http://www.cnblogs.com/whitewolf/archive/2012/09/14/2684186.html" target="_blank" rel="noopener">AngularJS表达式-Expression</a></li><li><a href="http://key232323.iteye.com/blog/1769376" target="_blank" rel="noopener">AngularJS关于依赖和模块与amd/cmd的区别，分享下结合使用示例</a></li><li><a href="http://blog.miniasp.com/post/2013/05/12/AngularJS-ng-module-select-ngOptions-usage-samples.aspx" target="_blank" rel="noopener">搞懂 AngularJS 預設模組 select 標籤的 ngOptions 參數用法</a></li><li><a href="http://blog.miniasp.com/post/2013/05/08/AngularJS-Intellisense-in-Visual-Studio-2012.aspx" target="_blank" rel="noopener">如何讓 Visual Studio 2012 支援 AngularJS 的 Intellisense</a></li><li><a href="http://www.csdn.net/article/2013-04-27/2815077-code-organization-angularjs-javascript" target="_blank" rel="noopener">如何组织大型JavaScript应用中的代码？</a></li></ul><h2 id="论坛"><a href="#论坛" class="headerlink" title="论坛"></a>论坛</h2><ul><li><a href="http://www.angularjs.cn/" target="_blank" rel="noopener">AngularJS中文社区</a></li><li><a href="http://www.angulargirl.com/bbs/forum.php" target="_blank" rel="noopener">angulargirl</a></li></ul><p>繁体中文翻译</p><h1 id="学习AngularJS"><a href="#学习AngularJS" class="headerlink" title="学习AngularJS"></a>学习AngularJS</h1><p>译者: 这是jmcunningham/AngularJS-Learning的简体中文翻译 我会尽量依照原文翻译 某些专有名词就不另外翻译 如果翻译错误也请提出建议指教 希望大家可以帮忙提供更多更好的AngularJS学习资源 谢谢</p><p>这里提供一些学习AngularJS的部落格链接, 文章, 和影片. 这个列表还在持续成长中. 如果你有想提供的链接与资源, 欢迎提出pull request. 我也会尽量确认以下的资源是有用的(不是只有两段文字的灌水文). 如果你有更好的方法来分类这些资源, 请让我知道. 在一般主题分类中的类似文章, 我之后也会把他们另外分类出来.</p><p>注意：**开头的链接是讨论ANGULAR 1.2版的新功能. 许多人希望快速了解Angular 1.2版的新功能, 所以我也会在之后开出新的分类标题. 等内容整理差不多或者1.2版分类变得太大我再来编辑, 不过现在的话Angular 1.2链接可以在两处同时看到.</p><h2 id="Angular-1-2-的新功能"><a href="#Angular-1-2-的新功能" class="headerlink" title="Angular 1.2 的新功能"></a>Angular 1.2 的新功能</h2><ul><li><a href="http://www.youtube.com/watch?v=W13qDdJDHp8&amp;feature=youtu.be" target="_blank" rel="noopener">**AngularJS 1.2 &amp; Beyond</a></li><li><a href="http://kensheedlo.com/2013/08/15/error-message-minification-with-minerr.html" target="_blank" rel="noopener">**Error Message Minification with MinErr</a></li><li><a href="http://weblogs.asp.net/dwahlin/archive/2013/08/14/angularjs-routing-changes.aspx" target="_blank" rel="noopener">**AngularJS路由的变化</a></li><li><a href="http://blog.jasoncust.com/2013/08/angularjs-missing-directives-focus-blur_14.html" target="_blank" rel="noopener">**AngularJS缺失的指令: Focus &amp; Blur</a></li><li><a href="http://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html" target="_blank" rel="noopener">**Remastered Animation in AngularJS 1.2</a></li><li><a href="http://www.johnpapa.net/preparing-for-animations-in-angular-1-2-0/" target="_blank" rel="noopener">**Preparing for Animations in Angular 1.2.0</a></li><li><a href="http://www.neevtech.com/blog/2013/08/17/5-cool-features-in-angularjs-1-2/" target="_blank" rel="noopener">**AngularJS 1.2中的5个超酷新特性</a></li><li><a href="https://www.exratione.com/2013/09/replacing-jqueryslidedown-with-nganimate-in-angularjs-120/" target="_blank" rel="noopener">**在AngularJS 1.2.0中使用ngAnimate替代jQuery.slideDown()</a></li><li><a href="http://wildermuth.com/2013/9/18/Getting_Ready_for_AngularJS_1_2" target="_blank" rel="noopener">**为AngularJS 1.2做好准备</a></li></ul><h2 id="书籍-Books"><a href="#书籍-Books" class="headerlink" title="书籍 Books"></a>书籍 Books</h2><ul><li><a href="http://shop.oreilly.com/product/0636920028055.do" target="_blank" rel="noopener">AngularJS</a></li><li><a href="http://www.packtpub.com/angularjs-to-build-dynamic-web-applications/book" target="_blank" rel="noopener">立刻快速开发 AngularJS</a></li><li><a href="https://leanpub.com/recipes-with-angular-js" target="_blank" rel="noopener">AngularJS 菜单</a></li><li><a href="http://www.manning.com/bford/" target="_blank" rel="noopener">AngularJS 在行动</a></li><li><a href="http://henriquat.re/" target="_blank" rel="noopener">AngularJS For .Net 开发员</a></li><li><a href="http://www.packtpub.com/angularjs-web-application-development/book" target="_blank" rel="noopener">AngularJS 浏览器应用程序开发</a></li><li><a href="http://bleedingedgepress.com/our-books/developing-an-angularjs-edge/" target="_blank" rel="noopener">发现自己的 AngularJS 优势</a></li><li><a href="http://www.packtpub.com/angularjs-directives/book" target="_blank" rel="noopener">AngularJS Directives</a></li><li><a href="http://www.ng-book.com/" target="_blank" rel="noopener">ng-book</a></li><li><a href="http://teropa.info/build-your-own-angular/" target="_blank" rel="noopener">打造你的AngularJS</a></li><li><a href="http://www.packtpub.com/dependency-injection-angularjs/book" target="_blank" rel="noopener">AngularJS依赖注入</a></li><li><a href="http://www.packtpub.com/learning-web-development-with-bootstrap-and-angular/book" target="_blank" rel="noopener">通过Bootstrap和AngularJS学习Web开发</a></li><li><a href="http://www.packtpub.com/angularjs-design-patterns/book" target="_blank" rel="noopener">AngularJS 设计模式</a></li><li><a href="http://www.packtpub.com/angularjs-web-application-development-blueprints/book" target="_blank" rel="noopener">AngularJS 网路应用开发蓝图</a></li><li><a href="https://leanpub.com/Practical_AngularJS" target="_blank" rel="noopener">实用 AngularJS</a></li></ul><h2 id="影片-Videos"><a href="#影片-Videos" class="headerlink" title="影片 Videos"></a>影片 Videos</h2><ul><li><a href="http://www.egghead.io/" target="_blank" rel="noopener">Egghead.io</a> — 44 videos of about 4 minutes each — <a href="https://github.com/msfrisbie/egghead-angularjs" target="_blank" rel="noopener">source code</a></li><li><a href="http://weblogs.asp.net/dwahlin/archive/2013/04/12/video-tutorial-angularjs-fundamentals-in-60-ish-minutes.aspx" target="_blank" rel="noopener">视频教程: 60分钟教你 AngularJS 基础入门</a> — 1:10:50</li><li><a href="http://www.youtube.com/user/angularjs" target="_blank" rel="noopener">AngularJS YouTube 主页</a> — several videos, mostly presentations of 1h or more</li><li><a href="http://www.youtube.com/watch?v=8ILQOFAgaXE" target="_blank" rel="noopener">Angular JS 入门</a> — 50:05</li><li><a href="http://www.youtube.com/watch?v=hqAyiqUs93c" target="_blank" rel="noopener">Angular JS 端对端测试</a> — 52:59</li><li><a href="http://www.youtube.com/watch?v=18ifoT-Id54" target="_blank" rel="noopener">Angular JS 安全性</a> — 29:45</li><li><a href="http://www.youtube.com/watch?v=fSAgFxjFSqY" target="_blank" rel="noopener">Grunt 和 Angular JS 前端开发流程</a> — 1:02:37</li><li><a href="http://www.youtube.com/watch?v=WuiHuZq_cg4" target="_blank" rel="noopener">AngularJS 教程</a> — 12:19</li><li><a href="http://tekpub.com/products/angular" target="_blank" rel="noopener">AngularJS 秀 (Tekpub)</a> — 8 videos (paid)</li><li><a href="https://tutsplus.com/course/easier-js-apps-with-angular/" target="_blank" rel="noopener">用 AngularJS 快速开发 Javascript 应用程序(Tuts+)</a> — 22 videos of about 5 minutes each, in 8 sections (paid)</li><li><a href="http://pluralsight.com/training/Courses/TableOfContents/angularjs-fundamentals" target="_blank" rel="noopener">AngularJS 基础入门 (Pluralsight)</a> - 6 hours 15 minutes total (paid)</li><li><a href="http://www.youtube.com/watch?v=W13qDdJDHp8&amp;feature=youtu.be" target="_blank" rel="noopener">**AngularJS 1.2 和未来</a></li><li><a href="http://www.youtube.com/playlist?list=PLfLN8Jd9-DVEQ0-PEnVeeUYyO0yg28mhN" target="_blank" rel="noopener">AngularJS 实例</a> - Growing list of 5 minute or less videos</li><li><a href="http://www.youtube.com/watch?v=C7ZI7z7qnHU" target="_blank" rel="noopener">用 AngularJS 和 Firebase 开发实时程序</a></li><li><a href="https://www.youtube.com/watch?v=XwSFg8nqBFA" target="_blank" rel="noopener">MongoDB 和 AngularJS， MEAN 堆</a></li><li><a href="http://www.youtube.com/watch?v=mVjpwia1YN4" target="_blank" rel="noopener">AngularJS, EmberJS 和 KnockoutJS 双向绑定的比较</a></li><li><a href="http://pluralsight.com/training/courses/TableOfContents?courseName=angular-best-practices&amp;highlight=" target="_blank" rel="noopener">Angular最佳实践</a> - 64 videos(paid)</li><li><a href="http://www.youtube.com/channel/UCdaEMffiYgTf_E7uTMxM4og/videos" target="_blank" rel="noopener">Neosavvy的 Angular &amp; Jasmine 视频系列</a> - 16 videos of about 2-3 minutes each</li><li><a href="http://www.youtube.com/channel/UCNhQ8pYS9U1EbwCx42NKaYQ" target="_blank" rel="noopener">AngularJS 视频集合</a> — Collection of Videos from Various websites.</li><li><a href="http://www.youtube.com/user/ngconfvideos" target="_blank" rel="noopener">ng-conf YouTube 页面</a> — YouTube channel with all the presentations given at the Angular Conference in January 2014.</li><li><a href="https://www.youtube.com/watch?v=TRrL5j3MIvo&amp;feature=youtu.be" target="_blank" rel="noopener">通过50个例子学习 Angular.js (第1部分)</a></li></ul><h2 id="在线课程-Courses"><a href="#在线课程-Courses" class="headerlink" title="在线课程 Courses"></a>在线课程 Courses</h2><ul><li><a href="http://www.thinkster.io/" target="_blank" rel="noopener">Thinkster.io - 学习 AngularJS 更好的方法</a> - 免費的線上 AngularJS 課程</li><li><a href="http://ng-tutorial.mgechev.com/" target="_blank" rel="noopener">AngularJS互动教程</a></li><li><a href="https://www.udemy.com/angularjs-jumpstart/?sl=E0EYdlw9RBMALEwzBwZX" target="_blank" rel="noopener">和Dan Wahlin一起学习AngularJS</a></li><li><a href="https://tutsplus.com/course/hands-on-angular/" target="_blank" rel="noopener">Tuts+: 开始使用 Angular</a></li><li><a href="https://www.codeschool.com/courses/shaping-up-with-angular-js" target="_blank" rel="noopener">Code School Shaping Up with Angular.js</a></li><li><a href="http://www.lynda.com/AngularJS-tutorials/Up-Running-AngularJS/154414-2.html" target="_blank" rel="noopener">Lynda Up and Running with AngularJS</a></li><li><a href="http://www.codecademy.com/courses/javascript-advanced-en-2hJ3J/0/1" target="_blank" rel="noopener">Codecademy AngularJs</a></li></ul><h2 id="帮助-Help"><a href="#帮助-Help" class="headerlink" title="帮助 Help"></a>帮助 Help</h2><ul><li><a href="http://stackoverflow.com/questions/tagged/angularjs" target="_blank" rel="noopener">StackOverflow</a></li><li><a href="http://groups.google.com/group/angular" target="_blank" rel="noopener">AngularJS 邮件列表（谷歌小组）</a></li><li><a href="http://webchat.freenode.net/?channels=angularjs&amp;uio=d4" target="_blank" rel="noopener">Chatroom （基于浏览器的在线聊天系统）</a></li><li><a href="https://plus.google.com/u/0/communities/115368820700870330756" target="_blank" rel="noopener">AngularJS Google+的社区</a></li><li><a href="http://www.reddit.com/r/angularjs" target="_blank" rel="noopener">reddit</a></li></ul><h2 id="一般主题-General-Topics"><a href="#一般主题-General-Topics" class="headerlink" title="一般主题 General Topics"></a>一般主题 General Topics</h2><ul><li><a href="http://www.cheatography.com/proloser/cheat-sheets/angularjs/" target="_blank" rel="noopener">AngularJS 速查表</a></li><li><a href="http://devgirl.org/2013/03/21/fun-with-angularjs/" target="_blank" rel="noopener">AngularJS 乐趣</a></li><li><a href="http://onehungrymind.com/angularjs-philly-ete-slides/" target="_blank" rel="noopener">AngularJS Philly ETE 幻灯</a></li><li><a href="http://blog.tomaka17.com/2012/12/random-tricks-when-using-angularjs/" target="_blank" rel="noopener">随机技巧使用 AngularJS</a></li><li><a href="http://www.peterbe.com/plog/what-stumped-me-about-angularjs" target="_blank" rel="noopener">AngularJS 难倒我的是什么</a></li><li><a href="http://oscarvillarreal.com/2013/05/07/5-reasons-to-use-angularjs-in-the-corporate-app-world/" target="_blank" rel="noopener">5个理由在企业应用程序世界中使用 AngularJS</a></li><li><a href="http://ify.io/lazy-loading-in-angularjs/" target="_blank" rel="noopener">在 AngularJS 中实现延迟加载</a></li><li><a href="http://www.yearofmoo.com/2012/10/more-angularjs-magic-to-supercharge-your-webapp.html" target="_blank" rel="noopener">用更多 AngularJS 魔力来大力增压你的浏览器应用程序</a></li><li><a href="http://www.bennadel.com/blog/2472-HashKeyCopier-An-AngularJS-Utility-Class-For-Merging-Cached-And-Live-Data.htm" target="_blank" rel="noopener">HashKeyCopier - 一个 AngularJS 合并缓存和实时数据的实用工具类</a></li><li><a href="http://www.bennadel.com/blog/2444-Exploring-Directives-scope-DOM-Rendering-And-Timing-In-AngularJS.htm" target="_blank" rel="noopener">在 AngularJS 中探索 Directive 指令，$scope，DOM 渲染和时序</a></li><li><a href="http://www.bennadel.com/blog/2432-Applying-A-Cached-Response-To-An-AngularJS-Resource.htm" target="_blank" rel="noopener">在 AngularJS 资源上应用缓存的响应</a></li><li><a href="http://www.blogeek.com.ar/2013/06/03/angularytics-the-solution-to-tracking-page-views-and-events-in-a-spa-with-angularjs/" target="_blank" rel="noopener">Angularytics: 在 SPA 中用 AngularJS 来跟踪页面访问量和事件的解决方案</a></li><li><a href="http://www.blogeek.com.ar/2013/05/01/sharing-data-state-on-angularjs-alternatives-comparison-and-my-solution/" target="_blank" rel="noopener">在 AngularJS 上共享数据，状态和模型： 方案选择，比较和我的解决方案</a></li><li><a href="http://www.jefclaes.be/2013/06/angularjs-and-ie8-caching.html" target="_blank" rel="noopener">Angular.js 和 IE8 缓存</a></li><li><a href="http://www.yearofmoo.com/2012/11/angularjs-and-seo.html" target="_blank" rel="noopener">AngularJS 和 SEO</a></li><li><a href="http://sravi-kiran.blogspot.com/2013/03/TemplatesRoutingAndSharingDataBetweenViewsInAnAngularJsApplication.html" target="_blank" rel="noopener">模板，路由和共享数据视图之间的一个 AngularJS 的应用</a></li><li><a href="http://blog.thousandeyes.com/improving-end-user-experience-with-angularjs/" target="_blank" rel="noopener">用 AngularJS 改善最终用户体验</a></li><li><a href="http://viralpatel.net/blogs/angularjs-controller-tutorial/" target="_blank" rel="noopener">AngularJS 控制器教程与实例</a></li><li><a href="http://amitavroy.com/justread/content/articles/html5-local-storage-angular-js" target="_blank" rel="noopener">HTML5 本地存储与 Angular JS</a></li><li><a href="http://gonzalo123.com/2013/07/08/dynamic-routes-with-angularjs-and-silex/" target="_blank" rel="noopener">动态路由和 AngularJS 以及 Silex</a></li><li><a href="http://joelhooks.com/blog/2013/04/24/modeling-data-and-state-in-your-angularjs-application/" target="_blank" rel="noopener">在你的 AngularJS 应用中建模数据和状态</a></li><li><a href="http://www.phase2technology.com/blog/code-reuse-in-angularjs/" target="_blank" rel="noopener">AngularJS 代码重用</a></li><li><a href="http://weblogs.asp.net/dwahlin/archive/2013/05/22/dynamically-loading-controllers-and-views-with-angularjs-and-requirejs.aspx" target="_blank" rel="noopener">在 AngularJS 和 RequireJS 中动态加载控制器和视图</a></li><li><a href="http://htmlcssjavascript.com/javascript/sorting-by-multiple-fields-with-different-sort-orders-using-the-angularjs-orderby-filter/" target="_blank" rel="noopener">用AngularJS的orderby筛选器对多个字段用不同顺序排序</a></li><li><a href="http://blog.brunoscopelliti.com/http-response-interceptors" target="_blank" rel="noopener">$http 响应拦截器</a></li><li><a href="http://trochette.github.io/Angular-Design-Patterns-Best-Practices/#/intro" target="_blank" rel="noopener">AngularJS: 先进的设计模式和最佳实践</a></li><li><a href="http://aboutcode.net/2013/07/27/json-date-parsing-angularjs.html" target="_blank" rel="noopener">AngularJS 的自动 JSON 数据解析</a></li><li><a href="http://odetocode.com/blogs/scott/archive/2013/05/01/angularjs-abstractions-modules.aspx" target="_blank" rel="noopener">AngularJS 抽象：模块</a></li><li><a href="http://www.bennadel.com/blog/2507-Mixing-Static-Content-With-ngSwitch-And-ngSwitchWhen-In-AngularJS.htm" target="_blank" rel="noopener">在 AngularJS 中用 ngSwitch 和 ngSwitchWhen 来混合静态内容</a></li><li><a href="http://pseudobry.com/building-large-apps-with-angularjs.html" target="_blank" rel="noopener">AngularJS 构建大型应用程序</a></li><li><a href="http://kensheedlo.com/2013/08/15/error-message-minification-with-minerr.html" target="_blank" rel="noopener">**错误信息与微小MinErr</a></li><li><a href="http://blog-it.hypoport.de/2013/08/24/how-to-make-your-angularjs-app-work-in-ie-8/" target="_blank" rel="noopener">如何让你的AngularJS 应用程序在IE8工作</a></li><li><a href="http://tech.small-improvements.com/2013/09/10/angularjs-performance-with-large-lists/" target="_blank" rel="noopener">AngularJS 性能优化的长列表</a></li><li><a href="http://www.innerhtml.com/responsive-website-using-angularjs.html" target="_blank" rel="noopener">AngularJS 响应网站</a></li><li><a href="https://medium.com/p/f8ae57e2cec3" target="_blank" rel="noopener">在 AngularJS 减少初始化时间</a></li><li><a href="http://www.sitepoint.com/kickstart-your-angularjs-development-with-yeoman-grunt-and-bower/" target="_blank" rel="noopener">用 Yeoman, Grunt 和 Bower快速开发 Angular 程序</a></li><li><a href="http://wildermuth.com/2013/9/18/Getting_Ready_for_AngularJS_1_2" target="_blank" rel="noopener">**AngularJS 1.2 准备</a></li><li><a href="http://wintellect.com/blogs/jlikness/10-reasons-web-developers-should-learn-angularjs" target="_blank" rel="noopener">10个理由网页开发人员应该了解AngularJS</a></li><li><a href="http://blog.mgechev.com/2013/10/01/angularjs-partials-lazy-prefetching-strategy-weighted-directed-graph/" target="_blank" rel="noopener">AngularJS partials 的懒惰预取</a></li><li><a href="http://net.tutsplus.com/articles/resources-to-get-you-up-to-speed-in-angularjs/" target="_blank" rel="noopener">让你加快速度 AngularJS 开发的资源</a></li><li><a href="http://solutionoptimist.com/2013/10/07/enhance-log-using-angularjs-decorators/" target="_blank" rel="noopener">使用装饰提升 AngularJS $log</a></li><li><a href="http://www.bennadel.com/blog/2542-Logging-Client-Side-Errors-With-AngularJS-And-Stacktrace-js.htm" target="_blank" rel="noopener">使用 AngularJS 和 Stacktrace.js 记录客户端错误</a></li><li><a href="http://timothy.userapp.io/post/63412334209/form-autocomplete-and-remember-password-with-angularjs" target="_blank" rel="noopener">AngularJS表单自动完成，并记住密码</a></li><li><a href="http://blog.scalyr.com/2013/10/31/angularjs-1200ms-to-35ms/" target="_blank" rel="noopener">优化AngularJS: 从1200ms到35ms</a></li><li><a href="http://www.bennadel.com/blog/2551-Creating-A-RequireJS-Service-For-AngularJS-Applications.htm" target="_blank" rel="noopener">为AngularJS应用创建一个RequireJS服务</a></li><li><a href="http://www.bennadel.com/blog/2553-Loading-AngularJS-Components-After-Your-Application-Has-Been-Bootstrapped.htm" target="_blank" rel="noopener">在你的应用开始后加载AngularJS组件</a></li><li><a href="http://blog.getelementsbyidea.com/load-a-module-on-demand-with-angularjs/" target="_blank" rel="noopener">根据需求加载AngularJS模块</a></li><li><a href="http://newtriks.com/2013/11/29/environment-specific-configuration-in-angularjs-using-grunt/" target="_blank" rel="noopener">用Grunt来配置AngularJS环境</a></li><li><a href="http://weblogs.asp.net/dwahlin/archive/2014/02/18/what-s-the-role-of-the-server-in-single-page-applications-spas.aspx" target="_blank" rel="noopener">服务器在单页应用(SPAs)中的作用?</a></li><li><a href="http://blog.pusher.com/making-angular-js-realtime-with-pusher/" target="_blank" rel="noopener">通过Websockets将Angular.js实时化</a></li><li><a href="http://blog.shinetech.com/2014/02/04/rich-object-models-and-angular-js/" target="_blank" rel="noopener">丰富的对象模型和Angular.js</a></li><li><a href="http://blog.shinetech.com/2014/02/28/rich-object-models-and-angular-identity-maps/" target="_blank" rel="noopener">丰富的对象模型和Angular: 一致性映射</a></li><li><a href="http://www.webdeveasy.com/interceptors-in-angularjs-and-useful-examples/" target="_blank" rel="noopener">AngularJS中的障碍和实用例子</a></li><li><a href="http://www.undefinednull.com/2014/02/17/resolve-in-angularjs-routes-explained-as-story/" target="_blank" rel="noopener">通过故事理解AngularJS路径</a></li><li><a href="http://blog.safaribooksonline.com/2014/04/08/refactoring-angularjs-get-hands-filthy/" target="_blank" rel="noopener">重构AngularJS</a></li><li><a href="https://medium.com/opinionated-angularjs/2e6a067c73bc" target="_blank" rel="noopener">Angular模型和javascript的类</a></li><li><a href="http://jonathancreamer.com/the-state-of-angularjs-controllers/" target="_blank" rel="noopener">angularjs控制器的状态</a></li><li><a href="http://www.yearofmoo.com/2014/05/how-to-use-ngmessages-in-angularjs.html" target="_blank" rel="noopener">怎么使用AngularJS的ngMessages</a></li><li><a href="http://toddmotto.com/digging-into-angulars-controller-as-syntax/" target="_blank" rel="noopener">深度挖掘Angular的控制器</a></li><li><a href="http://toddmotto.com/everything-about-custom-filters-in-angular-js/" target="_blank" rel="noopener">AngularJS自定义过滤器</a></li><li><a href="http://toddmotto.com/all-about-angulars-emit-broadcast-on-publish-subscribing/" target="_blank" rel="noopener">理解Angular的$scope和$rootScope事件系统中的$emit,$broadcast和$on</a></li><li><a href="http://www.garbl.es/angularjs/preload/2014/06/07/frictionless-data-preloading-in-angularjs/" target="_blank" rel="noopener">AngularJS无阻碍数据预载</a></li></ul><h2 id="介绍-开始学习-AngularJS"><a href="#介绍-开始学习-AngularJS" class="headerlink" title="介绍/开始学习 AngularJS"></a>介绍/开始学习 AngularJS</h2><ul><li><a href="http://www.adobe.com/devnet/html5/articles/getting-started-with-angularjs.html" target="_blank" rel="noopener">AngularJS 入门</a></li><li><a href="http://stephanebegaudeau.tumblr.com/post/48776908163/everything-you-need-to-understand-to-start-with" target="_blank" rel="noopener">你需要开始了解的 AngularJS 的一切</a></li><li><a href="http://codigovivo.com/2013/06/09/what-to-know-to-be-an-expert-in-angularjs/" target="_blank" rel="noopener">要成为 AngularJS 专家必备的知识</a></li><li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/5-awesome-angularjs-features/" target="_blank" rel="noopener">5个很棒的 AngularJS 功能</a></li><li><a href="http://blog.artlogic.com/2013/03/06/angularjs-for-jquery-developers/" target="_blank" rel="noopener">AngularJS for jQuery 开发者</a></li><li><a href="http://www.webdesignerdepot.com/2013/04/an-introduction-to-angularjs/" target="_blank" rel="noopener">AngularJS 入门指南</a></li><li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/building-a-web-app-from-scratch-in-angularjs/" target="_blank" rel="noopener">用 AngularJS 从头开始写应用程序</a></li><li><a href="http://glennstovall.com/blog/2013/06/27/angularjs-an-overview/" target="_blank" rel="noopener">AngularJS: 概述</a></li><li><a href="http://www.sitepoint.com/angularjs-tutorial-build-an-app-using-directives-and-data-binding/" target="_blank" rel="noopener">AngularJS教程 - 建立一个应用程序使用的指令和数据绑定</a></li><li><a href="http://www.revillwebdesign.com/angularjs-tutorial/" target="_blank" rel="noopener">在30分钟内教会你 AngularJS</a></li><li><a href="http://www.sitepoint.com/kickstart-your-angularjs-development-with-yeoman-grunt-and-bower/" target="_blank" rel="noopener">用 Yeoman, Grunt 和 Bower 快速开发</a></li><li><a href="http://www.sitepoint.com/10-reasons-use-angularjs/" target="_blank" rel="noopener">10个你需要开始用 AngularJS 的理由</a></li><li><a href="http://www.kidsil.net/2013/09/filtering-with-angularjs/" target="_blank" rel="noopener">AngularJS 筛选器</a></li><li><a href="http://toddmotto.com/ultimate-guide-to-learning-angular-js-in-one-day/" target="_blank" rel="noopener">一天学会 AngularJS</a></li><li><a href="http://learnangularjs.net/2013/10/24/7-ways-to-be-successful-with-angularjs/" target="_blank" rel="noopener">7 种成功学习Angular的方法</a></li><li><a href="http://scotch.io/tutorials/javascript/creating-a-single-page-todo-app-with-node-and-angular" target="_blank" rel="noopener">用Node and Angular创建单页应用</a></li><li><a href="http://tutorialzine.com/2013/08/learn-angularjs-5-examples" target="_blank" rel="noopener">通过 5 个实例学习Angular</a></li><li><a href="https://www.exratione.com/2013/12/considering-speed-and-slowness-in-angularjs/" target="_blank" rel="noopener">考虑的AngularJS的效率</a></li><li><a href="http://newtriks.com/2013/11/29/environment-specific-configuration-in-angularjs-using-grunt/" target="_blank" rel="noopener">Environment Specific Configuration in AngularJS Using Grunt</a></li><li><a href="http://solutionoptimist.com/2013/10/07/enhance-angularjs-logging-using-decorators/" target="_blank" rel="noopener">用装饰来提升Angular日志</a></li><li><a href="https://github.com/deontologician/pipr/blob/master/tut.org" target="_blank" rel="noopener">Picking Up Angular, build a twitter-like application</a></li><li><a href="http://blog.loadimpact.com/2014/06/03/exception-handling-in-an-angularjs-web-application-tutorial/" target="_blank" rel="noopener">AngularJS网页应用的异常处理</a></li><li><a href="http://www.pubnub.com/blog/angularjs-101-from-zero-to-angular-in-seconds/" target="_blank" rel="noopener">AngularJS 101: 从0开始学 Angular</a></li></ul><h2 id="使用及学习心得-Lessons-Learned"><a href="#使用及学习心得-Lessons-Learned" class="headerlink" title="使用及学习心得 Lessons Learned"></a>使用及学习心得 Lessons Learned</h2><ul><li><a href="http://joelhooks.com/blog/2013/05/22/lessons-learned-kicking-off-an-angularjs-project/" target="_blank" rel="noopener">经验教训：一年一个大AngularJS项目</a></li><li><a href="http://branchandbound.net/blog/web/2013/08/some-angularjs-pitfalls/" target="_blank" rel="noopener">一些AngularJS陷阱</a></li><li><a href="http://ruoyusun.com/2013/05/25/things-i-wish-i-were-told-about-angular-js.html" target="_blank" rel="noopener">我希望我事先被告知关于 Angular.js 的事实</a></li><li><a href="http://www.objectpartners.com/2013/08/09/i-wish-i-knew-then-what-i-know-now-life-with-angularjs/" target="_blank" rel="noopener">我希望我当时就知道我现在知道的东西 — 我和AngularJS</a></li><li><a href="https://gocardless.com/blog/building-a-large-angular-application/" target="_blank" rel="noopener">如何建立一个大型Angular.js应用</a></li><li><a href="http://www.bytesforthought.com/angularjs-tips/" target="_blank" rel="noopener">对新手和全能好奇的开发人员的 AngularJS 提示和技巧</a></li></ul><h2 id="分段式文章-Multipart-Articles"><a href="#分段式文章-Multipart-Articles" class="headerlink" title="分段式文章 Multipart Articles"></a>分段式文章 Multipart Articles</h2><ul><li>开始使用elasticsearch和AngularJS: <a href="http://www.fullscale.co/blog/2013/02/28/getting_started_with_elasticsearch_and_AngularJS_searching.html" target="_blank" rel="noopener">Part1 - 搜索</a>, <a href="http://www.fullscale.co/blog/2013/03/07/getting_started_with_elasticsearch_and-AngularJS_faceting.html" target="_blank" rel="noopener">Part 2: Faceting</a>, <a href="http://www.fullscale.co/blog/2013/03/20/getting_started_with_elasticsearch_and_AngularJS_d3.html" target="_blank" rel="noopener">Part 3: Visualization</a></li><li>用AngularJS开发可维护网络应用: <a href="http://blog.akquinet.de/2013/01/22/maintainable-rich-web-applications-with-angularjs/" target="_blank" rel="noopener">Part 1</a>, <a href="http://blog.akquinet.de/2013/03/21/maintainable-rich-web-applications-with-angularjs-part-2/" target="_blank" rel="noopener">Part 2</a></li><li>Google,Twitter和AngularJS: <a href="http://dailyjs.com/2013/04/11/angularjs-1/" target="_blank" rel="noopener">1: Google, Twitter, and AngularJS</a>, <a href="http://dailyjs.com/2013/04/18/angularjs-2/" target="_blank" rel="noopener">2: Let’s Make a Feed Reader</a>, <a href="http://dailyjs.com/2013/04/25/angularjs-3/" target="_blank" rel="noopener">3: 生成源</a>, <a href="http://dailyjs.com/2013/05/09/angularjs-4/" target="_blank" rel="noopener">4: 管理源</a>, <a href="http://dailyjs.com/2013/05/16/angularjs-5/" target="_blank" rel="noopener">5: 测试</a>, <a href="http://dailyjs.com/2013/05/30/angularjs-6/" target="_blank" rel="noopener">6: 增加依赖</a>, <a href="http://dailyjs.com/2013/06/06/angularjs-7/" target="_blank" rel="noopener">7: 表格验证</a>, <a href="http://dailyjs.com/2013/06/13/angularjs-8/" target="_blank" rel="noopener">8: 迭代程序 &amp; 过滤器</a>, <a href="http://dailyjs.com/2013/07/18/angularjs-9/" target="_blank" rel="noopener">9: 安装</a></li><li>用AnuglarJS打造 SignalR Stock Ticker: <a href="http://sravi-kiran.blogspot.in/2013/05/ImplementingSignalRStockTickerUsingAngularJSPart1.html" target="_blank" rel="noopener">Part 1</a>, <a href="http://sravi-kiran.blogspot.in/2013/05/ImplementingSignalRStockTickerUsingAngularJSPart2.html" target="_blank" rel="noopener">Part 2</a></li><li>AngularJS 最佳实践: 我之前都做错了!: <a href="http://blog.artlogic.com/2013/05/02/ive-been-doing-it-wrong-part-1-of-3/" target="_blank" rel="noopener">Part 1</a>, <a href="http://blog.artlogic.com/2013/05/06/angularjs-best-practices-ive-been-doing-it-wrong-part-2-of-3/" target="_blank" rel="noopener">Part 2</a>, <a href="http://blog.artlogic.com/2013/05/08/angularjs-best-practices-ive-been-doing-it-wrong-part-3-of-3/" target="_blank" rel="noopener">Part 3</a></li><li>AngularJS简介 <a href="http://www.raweng.com/blog/2013/01/30/introduction-to-angularjs-part-1/" target="_blank" rel="noopener">Part 1</a>, <a href="http://www.raweng.com/blog/2013/05/16/introduction-to-angularjs-part-2/" target="_blank" rel="noopener">Part 2</a></li><li>深入AngularJS : <a href="http://suhairhassan.com/2013/06/07/angularjs-in-depth-part-1.html" target="_blank" rel="noopener">Part 1</a>, <a href="http://suhairhassan.com/2013/07/25/angularjs-in-depth-part-2.html" target="_blank" rel="noopener">Part 2: 过滤器</a></li><li><a href="http://www.ng-newsletter.com/posts/beginner2expert-how_to_start.html" target="_blank" rel="noopener">The 7 成为Angularjs大师</a>, <a href="http://www.ng-newsletter.com/posts/beginner2expert-scopes.html" target="_blank" rel="noopener">Part 2: Scopes</a>, <a href="http://www.ng-newsletter.com/posts/beginner2expert-data-binding.html" target="_blank" rel="noopener">Part 3: 双向绑定</a>, <a href="http://www.ng-newsletter.com/posts/beginner2expert-directives.html" target="_blank" rel="noopener">Part 4 and 5: Expressions and directives</a>, <a href="http://www.ng-newsletter.com/posts/beginner2expert-services.html" target="_blank" rel="noopener">Part 6: 服务</a></li><li>AngularJS 概况: <a href="http://msmvps.com/blogs/theproblemsolver/archive/2013/04/05/getting-started-with-angularjs.aspx" target="_blank" rel="noopener">1:开始 AngularJS编程</a>, <a href="http://msmvps.com/blogs/theproblemsolver/archive/2013/04/10/creating-an-angularjs-controller.aspx" target="_blank" rel="noopener">2:创造 一个 AngularJS 控制器</a>, <a href="http://msmvps.com/blogs/theproblemsolver/archive/2013/04/15/the-angularjs-scope-is-not-the-mvc-model.aspx" target="_blank" rel="noopener">3: AngularJS $scope 不是MVC 模型</a>, <a href="http://msmvps.com/blogs/theproblemsolver/archive/2013/05/10/using-repeating-elements-in-angularjs.aspx" target="_blank" rel="noopener">4:在 AngularJS中重复使用元素</a>, <a href="http://msmvps.com/blogs/theproblemsolver/archive/2013/05/13/filtering-the-data-in-an-angularjs-ngrepeat-element.aspx" target="_blank" rel="noopener">5: 在一个 AngularJS ngRepeat 元素中过滤数据</a>, <a href="http://msmvps.com/blogs/theproblemsolver/archive/2013/08/19/using-the-angularjs-formcontroller-to-control-form-submission.aspx" target="_blank" rel="noopener">6:用 #AngularJS 表格控制器来控制表格提交</a>, <a href="http://msmvps.com/blogs/theproblemsolver/archive/2013/08/29/creating-an-angularjs-directive.aspx" target="_blank" rel="noopener">7:创造 #AngularJS Directive</a>, <a href="http://msmvps.com/blogs/theproblemsolver/archive/2013/09/05/using-the-dom-in-an-angularjs-application.aspx" target="_blank" rel="noopener">8:在一个 AngularJS 应用中使用DOM</a></li><li>打造一个基于MongoDB, ExpressJS, AngularJS, 和 Node.js的Google日历订阅App <a href="http://www.jonathanbroquist.com/blog/2013/10/building-a-google-calendar-booking-app-with-mongodb-expressjs-angularjs-and-node-js-part-1/" target="_blank" rel="noopener">Part 1</a></li><li>创造组建: <a href="http://blog.thousandeyes.com/creating-extensible-widgets-part-1-jquery-to-angularjs/" target="_blank" rel="noopener">Part 1: 30秒将jQuery转成AngularJS</a>, <a href="http://blog.thousandeyes.com/creating-extensible-widgets-part-2-angularjs-directive-controllers/" target="_blank" rel="noopener">Part 2: AngularJS Directive 控制器</a></li></ul><h2 id="范例应用程序-Sample-Apps"><a href="#范例应用程序-Sample-Apps" class="headerlink" title="范例应用程序 Sample Apps"></a>范例应用程序 Sample Apps</h2><ul><li><a href="http://www.codeproject.com/Articles/576246/A-Shopping-Cart-Application-Built-with-AngularJS" target="_blank" rel="noopener">建有AngularJS购物车应用程序</a></li><li><a href="http://cacodaemon.de/index.php?id=51" target="_blank" rel="noopener">用谷歌feed API 和 AngularJS建立一个 feed 阅读器</a></li></ul><h2 id="Scopes-amp-Compile"><a href="#Scopes-amp-Compile" class="headerlink" title="Scopes &amp; Compile"></a>Scopes &amp; Compile</h2><ul><li><a href="http://jimhoskins.com/2012/12/17/angularjs-and-apply.html" target="_blank" rel="noopener">AngularJS 和 scope.$apply</a></li><li><a href="http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs" target="_blank" rel="noopener">AngularJS 什么是范围原型/原型继承的细微之处？</a></li><li><a href="http://eburley.github.io/2013/01/31/angularjs-watch-pub-sub-best-practices.html" target="_blank" rel="noopener">angularjs.org watch, on pub sub, 和你.</a></li><li><a href="http://www.befundoo.com/blog/use-ng-bind-in-angularjs/" target="_blank" rel="noopener">AngularJS 中使用 Ng-bind</a></li><li><a href="http://www.bennadel.com/blog/2480-Unbinding-watch-Listeners-In-AngularJS.htm" target="_blank" rel="noopener">In AngularJS 中解除绑定 $watch() Listeners</a></li><li><a href="http://www.bennadel.com/blog/2457-Accessing-scope-On-The-DOM-Using-AngularJS.htm" target="_blank" rel="noopener">使用AngularJS 对DOMZ中的 $scope 进行访问</a></li><li><a href="http://www.bennadel.com/blog/2449-Directive-Link-observe-And-watch-Functions-Execute-Inside-An-AngularJS-Context.htm" target="_blank" rel="noopener">指令链路, $observe, 和 $watch 功能在AngularJS语境执行的内部</a></li><li><a href="http://codingsmackdown.tv/blog/2013/04/29/hailing-all-frequencies-communicating-in-angularjs-with-the-pubsub-design-pattern/" target="_blank" rel="noopener">Hailing All Frequencies – 在 AngularJS 用 Pub / Sub 设计模式进行内部沟通</a></li><li><a href="http://jimhoskins.com/2012/12/14/nested-scopes-in-angularjs.html" target="_blank" rel="noopener">AngularJS 嵌套作用域</a></li><li><a href="http://thenittygritty.co/angularjs-pitfalls-using-scopes" target="_blank" rel="noopener">AngularJS: 6个常见的使用作用域的陷阱</a></li><li>Scoping AngularJS Directives: <a href="http://spectaclelabs.io/blog/2013/06/22/scoping-angularjs-directives-part-1/" target="_blank" rel="noopener">Part 1</a>, <a href="http://spectaclelabs.io/blog/2013/06/23/scoping-angularjs-directives-part-2/" target="_blank" rel="noopener">Part 2</a></li><li><a href="http://angular-tips.com/blog/2013/08/watch-how-the-apply-runs-a-digest/" target="_blank" rel="noopener">$watch $apply 是怎么运行 $digest 的</a></li><li><a href="http://www.benlesh.com/2013/08/angularjs-watch-digest-and-apply-oh-my.html" target="_blank" rel="noopener">AngularJS: $watch, $digest 和 $apply</a></li><li><a href="http://angular-tips.com/blog/2013/08/removing-the-unneeded-watches/" target="_blank" rel="noopener">删除不需要的 Watches</a></li><li><a href="http://www.benlesh.com/2013/08/angular-compile-how-it-works-how-to-use.html" target="_blank" rel="noopener">Angular - $compile: 它是如何工作，如何使用它。</a></li><li><a href="http://ruoyusun.com/2013/08/24/a-glimpse-of-angularjs-scope-via-example.html" target="_blank" rel="noopener">通过实例来了解 Angular.js $scope</a></li><li><a href="https://variadic.me/posts/2013-10-15-share-state-between-controllers-in-angularjs.html" target="_blank" rel="noopener">在AngularJS控制器之间共享状态</a></li></ul><h2 id="依賴注入-Dependency-Injection"><a href="#依賴注入-Dependency-Injection" class="headerlink" title="依賴注入 Dependency Injection"></a>依賴注入 Dependency Injection</h2><ul><li><a href="http://www.alexrothenberg.com/2013/02/11/the-magic-behind-angularjs-dependency-injection.html" target="_blank" rel="noopener">AngularJS依赖注入背后的魔法</a></li><li><a href="http://dailyjs.com/2013/05/23/angularjs-injection/" target="_blank" rel="noopener">AngularJS: 更多关于依赖注入</a></li><li><a href="http://diegobarahona.com/javascript/angularjs/2013/06/13/angularjs-dependency-injection/" target="_blank" rel="noopener">Angularjs 依赖注入</a></li><li><a href="http://joelhooks.com/blog/2013/08/18/configuring-dependency-injection-in-angularjs/" target="_blank" rel="noopener">在 AngularJS 中配置依赖注入</a></li><li><a href="http://www.bennadel.com/blog/2527-Defining-Instantiatable-Classes-In-The-AngularJS-Dependency-Injection-Framework.htm" target="_blank" rel="noopener">在AngularJS依赖注入框架中定义实例化的类</a></li></ul><h2 id="指令-Directives"><a href="#指令-Directives" class="headerlink" title="指令 Directives"></a>指令 Directives</h2><ul><li><a href="http://www.adobe.com/devnet/html5/articles/angularjs-directives-and-the-computer-science-of-javascript.html" target="_blank" rel="noopener">AngularJS指令和JavaScript的计算机科学</a></li><li><a href="http://henriquat.re/directives/introduction-to-directives/introductionToDirectives.html" target="_blank" rel="noopener">AngularJS指令 - 特定于域的扩展为HTML</a></li><li><a href="http://www.befundoo.com/university/tutorials/angularjs-directives-tutorial/" target="_blank" rel="noopener">AngularJS指令教程</a></li><li><a href="http://panthersoftware.com/blog/2013/05/30/commentable-a-polymorphic-nested-comments-directive-for-angularjs/" target="_blank" rel="noopener">Commentable： AngularJS 的多态嵌套注释指令</a></li><li><a href="http://blog.brunoscopelliti.com/the-ngform-directive-of-angularjs" target="_blank" rel="noopener">AngularJS的ngForm指令</a></li><li><a href="http://blog.brunoscopelliti.com/run-a-directive-after-the-dom-has-finished-rendering" target="_blank" rel="noopener">执行指令后，DOM完成渲染</a></li><li><a href="http://blog.brunoscopelliti.com/use-cases-of-angularjs-directives" target="_blank" rel="noopener">使用AngularJS指令的案例</a></li><li><a href="http://www.bennadel.com/blog/2476-My-Approach-To-Building-AngularJS-Directives-That-Bind-To-JavaScript-Events.htm" target="_blank" rel="noopener">我的方法来构建绑定到JavaScript的事件的 AngularJS指令</a></li><li><a href="http://www.bennadel.com/blog/2471-Delegating-Nested-Directive-Behavior-To-Parent-Directive-In-AngularJS.htm" target="_blank" rel="noopener">AngularJS 委派嵌套指令行为转到父指令</a></li><li><a href="http://www.bennadel.com/blog/2447-Exploring-Directive-Controllers-Compiling-Linking-And-Priority-In-AngularJS.htm" target="_blank" rel="noopener">AngularJS 探索指令控制器，编译，链接和优先级</a></li><li><a href="http://www.bennadel.com/blog/2446-Using-Controllers-In-Directives-In-AngularJS.htm" target="_blank" rel="noopener">AngularJS 在指令中使用控制器</a></li><li><a href="http://www.grobmeier.de/angular-js-directives-with-json-arguments-08012013.html" target="_blank" rel="noopener">Angular.js 使用JSON参数的指令</a></li><li><a href="http://amitgharat.wordpress.com/2013/06/08/the-hitchhikers-guide-to-the-directive/" target="_blank" rel="noopener">指令的漫游指南</a></li><li><a href="http://codingsmackdown.tv/blog/2012/12/14/creating-a-simple-angularjs-directive/" target="_blank" rel="noopener">创建一个简单的AngularJS指令</a></li><li><a href="http://www.codeproject.com/Articles/607873/Extending-HTML-with-AngularJS-Directives" target="_blank" rel="noopener">扩展的HTML AngularJS指令</a></li><li><a href="http://sporto.github.io/blog/2013/06/24/nested-recursive-directives-in-angular/" target="_blank" rel="noopener">Angular 嵌套递归指令</a></li><li><a href="http://icelab.com.au/articles/an-all-in-one-directive-controller-with-angularjs/" target="_blank" rel="noopener">AngularJS一个全功能于一身的指令控制器</a></li><li><a href="http://icelab.com.au/articles/levelling-up-with-angularjs-building-a-reusable-click-to-edit-directive/" target="_blank" rel="noopener">平了 AngularJS 的战场: 构建可重用点击编辑指令</a></li><li><a href="http://joelhooks.com/blog/2013/07/15/a-look-at-angularjs-internal-directives-that-override-standard-html-tags/" target="_blank" rel="noopener">AngularJS 覆盖标准的HTML标签的指令</a></li><li><a href="http://ngokevin.com/blog/angularslider/" target="_blank" rel="noopener">AngularJS 移动滑块指令</a></li><li><a href="http://www.bennadel.com/blog/2494-Using-Namespaces-For-One-Off-Directives-In-AngularJS.htm" target="_blank" rel="noopener">在AngularJS中使用命名空间一次性指令</a></li><li><a href="http://www.phase2technology.com/blog/angularjs-and-compile/" target="_blank" rel="noopener">AngularJS 和 $compile</a></li><li><a href="http://www.ng-newsletter.com/posts/directives.html" target="_blank" rel="noopener">深度了解指令</a></li><li><a href="http://www.grobmeier.de/angularjs-referencing-parent-scope-directive-23082013.html" target="_blank" rel="noopener">AngularJS: 引用父作用域的指令</a></li><li><a href="http://angular-tips.com/blog/2013/08/tip-directives-with-the-same-name/" target="_blank" rel="noopener">提示：具有相同的名称的指令</a></li><li><a href="http://odetocode.com/blogs/scott/archive/2013/09/11/moving-data-in-an-angularjs-directive.aspx" target="_blank" rel="noopener">将数据移入一个AngularJS指令</a></li><li><a href="http://weblogs.asp.net/dwahlin/archive/2013/09/24/building-a-custom-angularjs-unique-value-directive.aspx" target="_blank" rel="noopener">构建自定义 AngularJS 指令的独特价值</a></li><li><a href="http://toddmotto.com/creating-an-angularjs-directive-from-one-of-your-existing-plugins-scripts/" target="_blank" rel="noopener">从现有的插件/脚本之一创建 AngularJS 指令</a></li><li><a href="http://jasonmore.net/angular-js-directives-difference-controller-link/" target="_blank" rel="noopener">Angular.js指令 - 控制器和链路之间的区别</a></li><li><a href="http://www.befundoo.com/university/tutorials/angularjs-directives-tutorial/" target="_blank" rel="noopener">AngularJS指令教程</a></li><li><a href="http://seanhess.github.io/2013/10/14/angularjs-directive-design.html" target="_blank" rel="noopener">AngularJS指令设计一点通</a></li><li><a href="http://suhairhassan.com/2013/10/21/refactoring-to-angularjs-directive.html" target="_blank" rel="noopener">重构 AngularJS 指令</a></li></ul><h2 id="服务-供应商-Services-Providers"><a href="#服务-供应商-Services-Providers" class="headerlink" title="服务/供应商 Services/Providers"></a>服务/供应商 Services/Providers</h2><ul><li><a href="http://iffycan.blogspot.com/2013/05/angular-service-or-factory.html" target="_blank" rel="noopener">Angular service 还是 factory?</a></li><li><a href="http://blog.jdriven.com/2013/03/how-to-create-singleton-angularjs-services-in-4-different-ways/" target="_blank" rel="noopener">如何在4种不同的方式创建 （Singleton） AngularJS服务</a></li><li><a href="http://sravi-kiran.blogspot.com/2013/03/MovingAjaxCallsToACustomServiceInAngularJS.html" target="_blank" rel="noopener">Angular JS 中移动AJAX调用到定制服务</a></li><li><a href="http://angular-tips.com/blog/2013/08/consuming-services/" target="_blank" rel="noopener">消费服务</a></li><li><a href="http://angular-tips.com/blog/2013/08/understanding-service-types/" target="_blank" rel="noopener">了解服务的类型</a></li><li><a href="http://djds4rce.wordpress.com/2013/08/13/understanding-angular-http-interceptors/" target="_blank" rel="noopener">理解 angular $http 拦截器</a></li><li><a href="http://blog.xebia.com/2013/09/01/differences-between-providers-in-angularjs/" target="_blank" rel="noopener">在 AngularJS 中 provider 供应商之间的差异</a></li><li><a href="https://docs.google.com/document/d/1gkDp8HJU5Hdgse6d0Ol0_nsi9MQulVTbRCkEThW0RRY/edit#" target="_blank" rel="noopener">Angular 的模块：工厂服务，服务，价值，噢，我的天啊</a></li></ul><h2 id="路由-Routing"><a href="#路由-Routing" class="headerlink" title="路由 Routing"></a>路由 Routing</h2><ul><li><a href="http://blog.brunoscopelliti.com/how-to-defer-route-definition-in-an-angularjs-web-app" target="_blank" rel="noopener">如何在AngularJS Web应用程序中推迟路由定义</a></li><li><a href="http://txt.fliglio.com/2013/05/angularjs-state-management-with-ui-router/" target="_blank" rel="noopener">AngularJS UI路由器状态管理</a></li><li><a href="http://www.bennadel.com/blog/2441-Nested-Views-Routing-And-Deep-Linking-With-AngularJS.htm" target="_blank" rel="noopener">AngularJS 嵌套视图，路由和深层链接</a></li><li><a href="http://angular-ui.github.io/ui-router/sample/#/" target="_blank" rel="noopener">Angular UI 路由器</a></li><li><a href="http://joelhooks.com/blog/2013/07/22/the-basics-of-using-ui-router-with-angularjs/" target="_blank" rel="noopener">AngularJS 使用UI路由器基础</a></li><li><a href="http://weblogs.asp.net/dwahlin/archive/2013/08/14/angularjs-routing-changes.aspx" target="_blank" rel="noopener">**AngularJS 路由变化</a></li></ul><h2 id="承诺-递延-Promises-Deferred"><a href="#承诺-递延-Promises-Deferred" class="headerlink" title="承诺/递延 Promises/Deferred"></a>承诺/递延 Promises/Deferred</h2><ul><li><a href="http://www.blogeek.com.ar/2013/05/02/enhancing-angular-promises-returning-new-promise-of-field-or-method-called-from-original-promises-result/" target="_blank" rel="noopener">加强 Angular 承诺: 从当初的诺言的结果中返回字段或方法的新的承诺</a></li><li><a href="http://blog.brunoscopelliti.com/angularjs-promise-or-dealing-with-asynchronous-requests-in-angularjs" target="_blank" rel="noopener">AngularJS 承诺，或在AngularJS处理异步请求</a></li><li><a href="http://imownbey.github.io/skinny_controllers_for_yeezus.html" target="_blank" rel="noopener">在 AngularJS 中利用 Futures</a></li><li><a href="http://markdalgleish.com/2013/06/using-promises-in-angularjs-views/" target="_blank" rel="noopener">在 AngularJS 视图中使用承诺</a></li><li><a href="http://liamkaufman.com/blog/2013/09/09/using-angularjs-promises/" target="_blank" rel="noopener">使用 AngularJS 承诺</a></li><li><a href="http://blog.brunoscopelliti.com/show-route-only-after-all-promises-are-resolved" target="_blank" rel="noopener">只有在所有的承诺都解决了再显示路由</a></li></ul><h2 id="表单-Forms"><a href="#表单-Forms" class="headerlink" title="表单 Forms"></a>表单 Forms</h2><ul><li><a href="http://blog.brunoscopelliti.com/form-validation-the-angularjs-way" target="_blank" rel="noopener">AngularJS 表单验证</a></li><li><a href="http://blog.brunoscopelliti.com/angularjs-directive-to-test-the-strength-of-a-password" target="_blank" rel="noopener">AngularJS指令来测试密码强度</a></li><li><a href="http://blog.brunoscopelliti.com/angularjs-directive-to-check-that-passwords-match" target="_blank" rel="noopener">AngularJS 指令来检查密码是否匹配</a></li><li><a href="http://www.bennadel.com/blog/2452-Mixing-Static-And-Dynamic-Data-In-An-AngularJS-Select-Menu.htm" target="_blank" rel="noopener">在 AngularJS 选择菜单中混合静态和动态数据</a></li><li><a href="http://www.grobmeier.de/angular-js-ng-select-and-ng-options-21112012.html" target="_blank" rel="noopener">Angular.js: ng-select 和 ng-options</a></li><li><a href="http://www.grobmeier.de/angular-js-autocomplete-and-enabling-a-form-with-watch-and-blur-19112012.html" target="_blank" rel="noopener">Angular.js: 用 $watch和 blur自动完成和启用表单</a></li><li><a href="http://kazimanzurrashid.com/posts/create-angularjs-directives-to-remove-duplicate-codes-in-form" target="_blank" rel="noopener">创建AngularJS指令在表格中来删除重复的代码</a></li><li><a href="http://www.bennadel.com/blog/2468-Forced-Repaints-In-Directive-Can-Cause-Accidental-Scrolling-In-AngularJS.htm" target="_blank" rel="noopener">In AngularJS 在指令中强制重绘会导致意外滚动</a></li><li><a href="http://odetocode.com/blogs/scott/archive/2013/06/19/using-ngoptions-in-angularjs.aspx" target="_blank" rel="noopener">在 AngularJS 中使用 ngOptions</a></li><li><a href="http://sravi-kiran.blogspot.com/2013/06/ShowingValidationMessagesInBulkWhileValidatingFormUsingAngularJS.html" target="_blank" rel="noopener">用 Angular JS 验证表单显示大量验证消息</a></li><li><a href="http://blog.brunoscopelliti.com/a-directive-to-manage-file-upload-in-an-angularjs-application" target="_blank" rel="noopener">在AngularJS应用程序管理文件上传的指令</a></li><li><a href="http://odetocode.com/blogs/scott/archive/2013/06/25/radio-buttons-with-angularjs.aspx" target="_blank" rel="noopener">AngularJS 单选按钮</a></li><li><a href="http://shazwazza.com/post/Reference-the-current-form-controller-in-AngularJS" target="_blank" rel="noopener">AngularJS Referece 当前的 FormController</a></li><li><a href="http://shazwazza.com/post/Listening-for-validation-changes-in-AngularJS" target="_blank" rel="noopener">在AngularJS 中监听变化的验证</a></li><li><a href="http://www.bennadel.com/blog/2492-What-A-Select-watch-Teaches-Me-About-ngModel-And-AngularJS.htm" target="_blank" rel="noopener">A Select $watch() 教我关于 ngModel 和 AngularJS</a></li><li><a href="http://code.realcrowd.com/on-the-bleeding-edge-advanced-angularjs-form-validation/" target="_blank" rel="noopener">最前沿的：高级AngularJS表单验证</a></li><li><a href="http://aboutcode.net/2013/07/13/twitter-bootstrap-control-group-directive-for-angularjs.html" target="_blank" rel="noopener">Twitter Bootstrap control-group directive for AngularJS</a></li><li><a href="http://blog.codebrag.com/post/57412530001/preventing-duplicated-requests-in-angularjs" target="_blank" rel="noopener">在AngularJS 中防止重复的请求</a></li><li><a href="http://blog.jasoncust.com/2013/08/angularjs-missing-directives-native.html" target="_blank" rel="noopener">AngularJS 缺少的指令：原表单复位</a></li><li><a href="http://blog.jasoncust.com/2013/08/angularjs-missing-directives-focus-blur_14.html" target="_blank" rel="noopener">**AngularJS 缺少的指令：焦点和模糊</a></li><li><a href="http://www.benlesh.com/2013/03/angular-js-validating-form-elements-in.html" target="_blank" rel="noopener">Angular JS: 重复验证表单元素</a></li><li><a href="http://www.benlesh.com/2012/12/angular-js-custom-validation-via.html" target="_blank" rel="noopener">Angular JS: 通过指令自定义验证</a></li><li><a href="http://www.benlesh.com/2012/11/angular-js-form-validation.html" target="_blank" rel="noopener">Angular JS: 表单验证</a></li><li><a href="http://www.ng-newsletter.com/posts/validations.html" target="_blank" rel="noopener">深入学习表单验证</a></li><li><a href="http://jeremymarc.github.io/2013/08/20/ng-model-and-custom-form-validation/" target="_blank" rel="noopener">Ng-model 和自定义表单验证</a></li><li><a href="http://www.amitavroy.com/justread/content/articles/angular-js-ajax-dropdowns-date-picker-and-saving-data" target="_blank" rel="noopener">Angular JS Ajax 下拉菜单，日期选择器和保存数据</a></li><li><a href="http://mrbool.com/the-concepts-of-angularjs-forms/29117" target="_blank" rel="noopener">AngularJS 表单的概念</a></li></ul><h2 id="认证-Authentication"><a href="#认证-Authentication" class="headerlink" title="认证 Authentication"></a>认证 Authentication</h2><ul><li><a href="http://blog.brunoscopelliti.com/deal-with-users-authentication-in-an-angularjs-web-app" target="_blank" rel="noopener">AngularJS Web 应用程序处理用户身份验证</a></li><li><a href="http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/" target="_blank" rel="noopener">Angular.js 单页应用程序验证</a></li><li><a href="http://arthur.gonigberg.com/2013/06/29/angularjs-role-based-auth/" target="_blank" rel="noopener">AngularJS – 快速的基于角色的认证</a></li><li><a href="https://vickev.com/#!/article/authentication-in-single-page-applications-node-js-passportjs-angularjs" target="_blank" rel="noopener">单页应用验证</a></li></ul><h2 id="Collections-amp-ngRepeat-Stuff"><a href="#Collections-amp-ngRepeat-Stuff" class="headerlink" title="Collections (&amp; ngRepeat Stuff)"></a>Collections (&amp; ngRepeat Stuff)</h2><ul><li><a href="http://www.bennadel.com/blog/2485-Working-With-Inherited-Collections-In-AngularJS.htm" target="_blank" rel="noopener">使用 AngularJS 继承来的Collection</a></li><li><a href="http://www.bennadel.com/blog/2451-Adding-An-ngRepeat-List-Delimiter-In-AngularJS.htm" target="_blank" rel="noopener">在 AngularJS 中 添加 ngRepeat 列表分隔符</a></li><li><a href="http://www.bennadel.com/blog/2456-Grouping-Nested-ngRepeat-Lists-In-AngularJS.htm" target="_blank" rel="noopener">在 AngularJS 中分组嵌套 ngRepeat 列表</a></li><li><a href="http://www.bennadel.com/blog/2450-Using-ngController-With-ngRepeat-In-AngularJS.htm" target="_blank" rel="noopener">在 AngularJS 中使用 ngController 和 ngRepeat</a></li><li><a href="http://www.bennadel.com/blog/2443-Rendering-DOM-Elements-With-ngRepeat-In-AngularJS.htm" target="_blank" rel="noopener">在 AngularJS 中通过 ngRepeat 渲染DOM元素</a></li></ul><h2 id="原始码组织架构-Code-Organization"><a href="#原始码组织架构-Code-Organization" class="headerlink" title="原始码组织架构 Code Organization"></a>原始码组织架构 Code Organization</h2><ul><li><a href="http://briantford.com/blog/huuuuuge-angular-apps.html" target="_blank" rel="noopener">用 AngularJS 开发超大的应用程序</a></li><li><a href="http://cliffmeyers.com/blog/2013/4/21/code-organization-angularjs-javascript" target="_blank" rel="noopener">大 AngularJS 和 JavaScript 的应用的代码组织</a></li><li><a href="http://www.blogeek.com.ar/2013/05/18/proposed-angulars-project-structure/" target="_blank" rel="noopener">Angular 应用程序的网页结构构想</a></li><li><a href="http://www.blogeek.com.ar/2013/03/23/the-right-way-of-coding-angularjs-how-to-organize-a-regular-webapp/" target="_blank" rel="noopener">如何组织一个普通 Web 应用程序： 编码 AngularJS 的正确方法。基本示例</a></li><li><a href="http://codingsmackdown.tv/blog/2013/04/19/angularjs-modules-for-great-justice/" target="_blank" rel="noopener">AngularJS 模块</a></li><li><a href="https://github.com/Nikku/requirejs-angular-define" target="_blank" rel="noopener">ngDefine: AngularJS &amp; RequireJS</a></li><li><a href="http://clintberry.com/2013/modular-angularjs-application-design/" target="_blank" rel="noopener">模块化AngularJS应用设计</a></li><li><a href="http://solutionoptimist.com/2013/09/30/requirejs-angularjs-dependency-injection/" target="_blank" rel="noopener">在 AngularJS DI 中使用 RequireJS</a></li></ul><h2 id="测试-Testing"><a href="#测试-Testing" class="headerlink" title="测试 Testing"></a>测试 Testing</h2><ul><li><a href="http://www.yearofmoo.com/2013/01/full-spectrum-testing-with-angularjs-and-testacular.html" target="_blank" rel="noopener">用 AngularJS 和 Testacular 进行全频谱测试</a></li><li><a href="http://codingsmackdown.tv/blog/2012/12/28/mocking-promises-in-unit-tests/" target="_blank" rel="noopener">在单元测试中 Mocking 承诺</a></li><li><a href="http://newtriks.com/2013/04/26/how-to-test-an-angularjs-directive/" target="_blank" rel="noopener">如何测试AngularJS指令</a></li><li><a href="http://sravi-kiran.blogspot.com/2013/04/UnitTestingAngularJsControllerUsingJasmine.html" target="_blank" rel="noopener">用 Jasmine 单元测试 AngularJS 控制器</a></li><li><a href="http://sravi-kiran.blogspot.com/2013/06/UnitTestingAngularJsControllerUsingQUnitAndSinon.html" target="_blank" rel="noopener">使用 QUnit 和 Sinon 单元测试 AngularJS 控制器</a></li><li><a href="http://www.portlandwebworks.com/blog/testing-angularjs-directives-handling-external-templates" target="_blank" rel="noopener">测试 AngularJS Directive： 处理外部模板</a></li><li><a href="http://www.alexrothenberg.com/2013/08/06/how-to-unit-test-an-angular-app.html" target="_blank" rel="noopener">如何进行 Angular 应用程序的单元测试</a></li><li><a href="http://www.benlesh.com/2013/06/angular-js-unit-testing-directives.html" target="_blank" rel="noopener">单元测试 - 指令 Directives</a></li><li><a href="http://www.benlesh.com/2013/06/angular-js-unit-testing-services.html" target="_blank" rel="noopener">单元测试 - 服务</a></li><li><a href="http://www.benlesh.com/2013/05/angularjs-unit-testing-controllers.html" target="_blank" rel="noopener">单元测试 - 控制器</a></li><li><a href="http://flippinawesome.org/2013/09/09/mocking-server-dependencies-in-javascript-and-angularjs/" target="_blank" rel="noopener">在JavaScript 和 AngularJS 中 mock 服务器依赖性</a></li><li><a href="http://www.yearofmoo.com/2013/09/advanced-testing-and-debugging-in-angularjs.html" target="_blank" rel="noopener">AngularJS 先进的测试和调试的</a></li><li><a href="http://andyshora.com/unit-testing-best-practices-angularjs.html" target="_blank" rel="noopener">AngularJS 单元测试的最佳实践</a></li><li><a href="http://blogs.mulesoft.org/angularjs-using-decorators-for-unit-testing/" target="_blank" rel="noopener">在 AngularJS 中装饰你的测试</a></li></ul><h2 id="RESTful-Stuff"><a href="#RESTful-Stuff" class="headerlink" title="RESTful Stuff"></a>RESTful Stuff</h2><ul><li><a href="http://www.bennadel.com/blog/2433-Using-RESTful-Controllers-In-An-AngularJS-Resource.htm" target="_blank" rel="noopener">在 AngularJS 资源中使用 REST 风格的控制器</a></li><li><a href="http://www.blogeek.com.ar/2013/04/09/restangular-new-angular-framework-to-handle-restful-resources-properly-and-easily/" target="_blank" rel="noopener">Restangular: 新AngularJS框架来适当地，轻松地处理 REST API REST 风格的资源</a></li><li><a href="http://www.blogeek.com.ar/2013/04/26/new-features-on-restangular-the-ultimate-rest-api-client-for-angularjs/" target="_blank" rel="noopener">Restangular 新功能: 针对 Angular的终极 REST API 客户端</a></li><li><a href="http://weblogs.asp.net/dwahlin/archive/2013/08/16/using-an-angularjs-factory-to-interact-with-a-restful-service.aspx" target="_blank" rel="noopener">使用 AngularJS 厂服务与 RESTful 服务实现互动</a></li><li><a href="http://blog.brunoscopelliti.com/authentication-to-a-restful-web-service-in-an-angularjs-web-app" target="_blank" rel="noopener">在 AngularJS web应用程序中实现一个 REST 风格的 Web 服务身份验证</a></li></ul><h2 id="本地化-Localization"><a href="#本地化-Localization" class="headerlink" title="本地化 Localization"></a>本地化 Localization</h2><ul><li><a href="http://codingsmackdown.tv/blog/2013/04/23/localizing-your-angularjs-apps-update/" target="_blank" rel="noopener">Localizing Your AngularJS Apps</a></li><li><a href="http://blog.brunoscopelliti.com/internazionalization-i18n-with-angularjs" target="_blank" rel="noopener">Internazionalization (i18n) with AngularJS</a></li><li><a href="https://coderwall.com/p/uyrtpq" target="_blank" rel="noopener">AngularJS And i18n</a></li></ul><h2 id="界面-UI-Stuff"><a href="#界面-UI-Stuff" class="headerlink" title="界面 UI Stuff"></a>界面 UI Stuff</h2><ul><li><a href="http://angular-ui.github.io/" target="_blank" rel="noopener">Angular UI 套件（包括一些子项目）</a></li><li><a href="http://www.yearofmoo.com/2013/04/animation-in-angularjs.html" target="_blank" rel="noopener">AngularJS 动画</a></li><li><a href="http://www.yearofmoo.com/2013/05/enhanced-animations-in-angularjs.html" target="_blank" rel="noopener">在AngularJS增强的动画功能</a></li><li><a href="http://www.befundoo.com/blog/angularjs-popup-dialog/" target="_blank" rel="noopener">可重复使用的 AngularJS 弹出的对话框中服务</a></li><li><a href="http://www.bennadel.com/blog/2440-Creating-A-Custom-Show-Hide-Directive-In-AngularJS.htm" target="_blank" rel="noopener">在 AngularJS 中创建自定义显示/隐藏 Directive</a></li><li><a href="http://www.grobmeier.de/bootstrap-tabs-with-angular-js-25112012.html" target="_blank" rel="noopener">在 Angular.js 中实现 Bootstrap Tabs</a></li><li><a href="http://codingsmackdown.tv/blog/2013/01/02/using-response-interceptors-to-show-and-hide-a-loading-widget/" target="_blank" rel="noopener">使用拦截器的响应显示和隐藏一个装载小工具</a></li><li><a href="http://hueypetersen.com/posts/2013/06/24/typeahead-with-angular/" target="_blank" rel="noopener">用 AngularJS 建立一个 Typeahead Directive</a></li><li><a href="http://fundoo-solutions.github.io/angularjs-modal-service/" target="_blank" rel="noopener">AngularJS Modal 服务</a></li><li><a href="http://www.bennadel.com/blog/2497-Cross-Fading-Images-With-AngularJS.htm" target="_blank" rel="noopener">AngularJS 中实现交叉衰落图像</a></li><li><a href="http://dailyjs.com/2013/06/07/angular-svg/" target="_blank" rel="noopener">AngularJS 和 SVG</a></li><li><a href="http://jjperezaguinaga.wordpress.com/2013/07/16/angularjs-scroll-animations/" target="_blank" rel="noopener">AngularJS: 滚动动画</a></li><li><a href="http://flippinawesome.org/2013/08/05/animating-with-angularjs/" target="_blank" rel="noopener">AngularJS 动画</a></li><li><a href="http://buildinternet.com/2013/08/drag-and-drop-file-upload-with-angularjs/" target="_blank" rel="noopener">用 AngularJS 实现拖放文件上传</a></li><li><a href="http://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html" target="_blank" rel="noopener">**在 AngularJS 1.2 中重新掌握动画</a></li><li><a href="http://www.benlesh.com/2013/02/angular-js-scrolling-to-element-by-id.html" target="_blank" rel="noopener">Angular JS - 通过ID滚动到某个元素</a></li><li><a href="http://weblogs.asp.net/dwahlin/archive/2013/08/19/building-an-angularjs-dialog-service.aspx" target="_blank" rel="noopener">构建 AngularJS 对话服务</a></li><li><a href="http://www.johnpapa.net/preparing-for-animations-in-angular-1-2-0/" target="_blank" rel="noopener">**在 Angular 1.2.0 中准备使用动画</a></li><li><a href="https://www.exratione.com/2013/09/replacing-jqueryslidedown-with-nganimate-in-angularjs-120/" target="_blank" rel="noopener">**在 AngularJS 1.2.0 中用 ngAnimate 替换 jQuery.slideDown()</a></li><li><a href="http://veamospues.wordpress.com/2013/10/13/angularjs-blurred-image-directive/" target="_blank" rel="noopener">AngularJS: 模糊图像 directive</a></li><li><a href="http://julienrenaux.fr/2013/10/27/create-a-load-more-widget-using-angularjs-ajax-and-bootstrap-3/" target="_blank" rel="noopener">使用AngularJS，Ajax和 Bootstrap 3 来建立一个“加载更多”小工具</a></li></ul><h2 id="整合其他语言-框架-Integration-With-Other-Languages-Frameworks"><a href="#整合其他语言-框架-Integration-With-Other-Languages-Frameworks" class="headerlink" title="整合其他语言/框架 Integration With Other Languages/Frameworks"></a>整合其他语言/框架 Integration With Other Languages/Frameworks</h2><ul><li><a href="http://notebookheavy.com/2013/05/22/angularjs-and-typescript/" target="_blank" rel="noopener">AngularJS 和 TypeScript</a></li><li><a href="http://spiiice.net/using-angularjs-and-d3-to-create-a-wordcloud-directive/" target="_blank" rel="noopener">用 AngularJS 和 D3 来建立一个 WordCloud Directive</a></li><li><a href="http://www.bennadel.com/blog/2448-Using-jQuery-Event-Delegation-In-AngularJS.htm" target="_blank" rel="noopener">在 AngularJS 中用 jQuery Event Delegation</a></li><li><a href="http://sravi-kiran.blogspot.in/2013/05/HookingUpAspNetSignalRWithAngularJS.html" target="_blank" rel="noopener">Hooking up ASP.NET SignalR with Angular JS</a></li><li><a href="http://blog.brunoscopelliti.com/facebook-authentication-in-your-angularjs-web-app" target="_blank" rel="noopener">在你的 AngularJS 应用程序进行 Facebook 的身份验证</a></li><li><a href="http://newtriks.com/2013/06/11/automating-angularjs-with-yeoman-grunt-and-bower/" target="_blank" rel="noopener">用 Yeoman, Grunt &amp; Bower 来全面自动化你的 Angular 开发过程</a></li><li><a href="http://briantford.com/blog/angular-bower.html" target="_blank" rel="noopener">用 Bower 编写可重用的 AngularJS 组件</a></li><li><a href="http://wbyoko.co/angularjs/angularjs-google-maps-components.html" target="_blank" rel="noopener">用 ngularJS 开发谷歌地图的组件</a></li><li><a href="http://mircozeiss.com/sync-multiple-angularjs-apps-without-server-via-pouchdb/" target="_blank" rel="noopener">无需服务器来通过 PouchDB 来同步多个 AngularJS 应用程序</a></li><li><a href="http://mircozeiss.com/building-offline-applications-with-angularjs-and-pouchdb/" target="_blank" rel="noopener">用 AngularJS 和 PouchDB构建离线应用</a></li><li><a href="https://shellycloud.com/blog/2013/10/how-to-integrate-angularjs-with-rails-4" target="_blank" rel="noopener">如何AngularJS和Rails集成4</a></li></ul><h2 id="后端代管-Hosted-Backends"><a href="#后端代管-Hosted-Backends" class="headerlink" title="后端代管 Hosted Backends"></a>后端代管 Hosted Backends</h2><ul><li><a href="http://brandid.github.io/parse-angular-demo/#/features" target="_blank" rel="noopener">Parse.com boilerplate 建设大型，复杂 AngularJS 应用</a></li><li><a href="https://github.com/firebase/angularFire" target="_blank" rel="noopener">用 Firebase用于 Angular 应用程序的实时数据库</a></li><li><a href="https://blog.backlift.com/entry/angular-tut1" target="_blank" rel="noopener">用 Backlift开发针对 Angular 的 CRUD 后端</a></li><li><a href="http://mircozeiss.com/building-offline-applications-with-angularjs-and-pouchdb/" target="_blank" rel="noopener">用 AngularJS 和 PouchDB 构建离线应用</a></li><li><a href="http://www.dreamfactory.com/angularjs-example" target="_blank" rel="noopener">用 DreamFactory 开发 针对 Angular 的 CRUD 后端</a></li><li><a href="https://www.firebase.com/blog/2013-10-04-firebase-angular-data-binding.html" target="_blank" rel="noopener">Firebase 和 Angular 三个双向数据绑定</a></li></ul><h2 id="移动装置-Mobile"><a href="#移动装置-Mobile" class="headerlink" title="移动装置 Mobile"></a>移动装置 Mobile</h2><ul><li><a href="http://devgirl.org/2013/06/10/quick-start-guide-phonegap-and-angularjs/" target="_blank" rel="noopener">PhoneGap+AngularJS 快速入门指南</a></li><li><a href="http://briantford.com/blog/angular-phonegap.html" target="_blank" rel="noopener">用 AngularJS 开发 PhoneGap 引用程序</a></li><li><a href="http://tech.pro/tutorial/1357/phonegap-and-angularjs-in-app-browser" target="_blank" rel="noopener">PhoneGap 和 AngularJS: In App Browser</a></li><li><a href="http://tech.pro/tutorial/1349/phonegap-and-angularjs-notification-service" target="_blank" rel="noopener">PhoneGap 和 AngularJS: Notification Service</a></li><li><a href="http://abou-kone.com/2013/07/17/developing-a-mobile-app-with-phonegap-angularjs-and-expressjs-part-i/" target="_blank" rel="noopener">用 Phonegap, AngularJS 和 ExpressJS 开发移动程序第一部分</a></li></ul><h2 id="编译器-Text-editor-bundles-IDE-Stuff"><a href="#编译器-Text-editor-bundles-IDE-Stuff" class="headerlink" title="编译器 Text editor bundles/IDE Stuff"></a>编译器 Text editor bundles/IDE Stuff</h2><ul><li><a href="https://github.com/angular-ui/AngularJS-sublime-package" target="_blank" rel="noopener">Sublime text 2 包</a></li><li><a href="https://github.com/matthewsimo/angular-vim-snippets" target="_blank" rel="noopener">VIM UltiSnip &amp; Snipmate AngularJS 代码片段</a></li><li><a href="http://blog.jetbrains.com/webstorm/2013/10/running-javascript-tests-with-karma-in-webstorm-7/" target="_blank" rel="noopener">在 WebStorm 7 中运行 Javscript 测试</a></li><li><a href="http://www.microsoft.com/visualstudio" target="_blank" rel="noopener">Visual Studio</a></li></ul><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul><li><a href="https://github.com/angular/angularjs-batarang" target="_blank" rel="noopener">AngularJS Batarang Chrome 浏览器扩展</a></li><li><a href="http://spascaffold.azurewebsites.net/AngularJSScaffold" target="_blank" rel="noopener">从JSON或者 restful API生成 JavaScript 和 HTML，使用 AngularJS 和 JQuery</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0103.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;前端技术的发展是如此之快，各种优秀技术、优秀框架的出现简直让人目不暇接，紧跟时代潮流，学习掌握新知识自然是不敢怠慢。&lt;br&gt;
    
    </summary>
    
      <category term="AngularJs" scheme="http://www.iskei.cn/categories/AngularJs/"/>
    
    
      <category term="AngularJs" scheme="http://www.iskei.cn/tags/AngularJs/"/>
    
  </entry>
  
  <entry>
    <title>HTTP状态码（HTTP Status Code）</title>
    <link href="http://www.iskei.cn/posts/17073.html"/>
    <id>http://www.iskei.cn/posts/17073.html</id>
    <published>2018-01-24T14:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.029Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0098.jpg" alt="image"></p><p>HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。<br><a id="more"></a></p><h3 id="100"><a href="#100" class="headerlink" title="100"></a>100</h3><p>客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</p><h3 id="101"><a href="#101" class="headerlink" title="101"></a>101</h3><p>服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。 　　只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。</p><h3 id="102"><a href="#102" class="headerlink" title="102"></a>102</h3><p>由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</p><h3 id="200"><a href="#200" class="headerlink" title="200"></a>200</h3><p>请求已成功，请求所希望的响应头或数据体将随此响应返回。</p><h3 id="201"><a href="#201" class="headerlink" title="201"></a>201</h3><p>请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 ‘202 Accepted’。</p><h3 id="202"><a href="#202" class="headerlink" title="202"></a>202</h3><p>服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。 　　返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。</p><h3 id="203"><a href="#203" class="headerlink" title="203"></a>203</h3><p>服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超级。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</p><h3 id="204"><a href="#204" class="headerlink" title="204"></a>204</h3><p>服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。 　　如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。 　　由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</p><h3 id="205"><a href="#205" class="headerlink" title="205"></a>205</h3><p>服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。 　　与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</p><h3 id="206"><a href="#206" class="headerlink" title="206"></a>206</h3><p>服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。 　　该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。 　　响应必须包含如下的头部域： 　　Content-Range 用以指示本次响应中返回的内容的范围；如果是 Content-Type 为 multipart/byteranges 的多段下载，则每一 multipart 段中都应包含 Content-Range 域用以指示本段的内容范围。假如响应中包含 Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。 　　Date 　　ETag 和/或 Content-Location，假如同样的请求本应该返回200响应。 　　Expires, Cache-Control，和/或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 　　假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range 弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。 　　假如 ETag 或 Last-Modified 头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。 　　任何不支持 Range 以及 Content-Range 头的缓存都禁止缓存206响应返回的内容。</p><h3 id="207"><a href="#207" class="headerlink" title="207"></a>207</h3><p>由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p><h3 id="300"><a href="#300" class="headerlink" title="300"></a>300</h3><p>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。 　　除非这是一个 HEAD 请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由 Content-Type 定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。 　　如果服务器本身已经有了首选的回馈选择，那么在 Location 中应当指明这个回馈的 URI；浏览器可能会将这个 Location 值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</p><h3 id="301"><a href="#301" class="headerlink" title="301"></a>301</h3><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。 　　新的永久性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 　　如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 　　注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的 POST 请求得到了一个301响应的话，接下来的重定向请求将会变成 GET 方式。</p><h3 id="302"><a href="#302" class="headerlink" title="302"></a>302</h3><p>请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 　　新的临时性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 　　如果这不是一个 GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 　　注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用 GET 方式访问在 Location 中规定的 URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p><h3 id="303"><a href="#303" class="headerlink" title="303"></a>303</h3><p>对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。 　　新的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 　　注意：许多 HTTP/1.1 版以前的 浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p><h3 id="304"><a href="#304" class="headerlink" title="304"></a>304</h3><p>如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。 　　该响应必须包含以下的头信息： 　　Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将 Date 字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。 　　ETag 和/或 Content-Location，假如同样的请求本应返回200响应。 　　Expires, Cache-Control，和/或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 　　假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的 GET 请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。 　　假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。 　　假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值。</p><h3 id="305"><a href="#305" class="headerlink" title="305"></a>305</h3><p>被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。 　　注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。</p><h3 id="306"><a href="#306" class="headerlink" title="306"></a>306</h3><p>在最新版的规范中，306状态码已经不再被使用。</p><h3 id="307"><a href="#307" class="headerlink" title="307"></a>307</h3><p>请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 　　新的临时性的URI 应当在响应的 Location 域中返回。除非这是一个HEAD 请求，否则响应的实体中应当包含指向新的URI 的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的 URI 发出访问请求。 　　如果这不是一个GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p><h3 id="400"><a href="#400" class="headerlink" title="400"></a>400</h3><p>1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。 　　2、请求参数有误。</p><h3 id="401"><a href="#401" class="headerlink" title="401"></a>401</h3><p>当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。</p><h3 id="402"><a href="#402" class="headerlink" title="402"></a>402</h3><p>该状态码是为了将来可能的需求而预留的。</p><h3 id="403"><a href="#403" class="headerlink" title="403"></a>403</h3><p>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p><h3 id="404"><a href="#404" class="headerlink" title="404"></a>404</h3><p>请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p><h3 id="405"><a href="#405" class="headerlink" title="405"></a>405</h3><p>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。 　　鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p><h3 id="406"><a href="#406" class="headerlink" title="406"></a>406</h3><p>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。 　　除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由 Content-Type 头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p><h3 id="407"><a href="#407" class="headerlink" title="407"></a>407</h3><p>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。参见RFC 2617。</p><h3 id="408"><a href="#408" class="headerlink" title="408"></a>408</h3><p>请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</p><h3 id="409"><a href="#409" class="headerlink" title="409"></a>409</h3><p>由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。 　　冲突通常发生于对 PUT 请求的处理中。例如，在采用版本检查的环境下，某次 PUT 提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本。</p><h3 id="410"><a href="#410" class="headerlink" title="410"></a>410</h3><p>被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。 　　410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为’410 Gone’，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。</p><h3 id="411"><a href="#411" class="headerlink" title="411"></a>411</h3><p>服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。</p><h3 id="412"><a href="#412" class="headerlink" title="412"></a>412</h3><p>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p><h3 id="413"><a href="#413" class="headerlink" title="413"></a>413</h3><p>服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。 　　如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。</p><h3 id="414"><a href="#414" class="headerlink" title="414"></a>414</h3><p>请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括： 　　本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。 　　重定向URI “黑洞”，例如每次重定向把旧的 URI 作为新的 URI 的一部分，导致在若干次重定向后 URI 超长。 　　客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的 URI，当 GET 后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码。</p><h3 id="415"><a href="#415" class="headerlink" title="415"></a>415</h3><p>对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</p><h3 id="416"><a href="#416" class="headerlink" title="416"></a>416</h3><p>如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。 　　假如 Range 使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个 Content-Range 实体头，用以指明当前资源的长度。这个响应也被禁止使用 multipart/byteranges 作为其 Content-Type。</p><h3 id="417"><a href="#417" class="headerlink" title="417"></a>417</h3><p>在请求头 Expect 中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect 的内容无法被满足。</p><h3 id="421"><a href="#421" class="headerlink" title="421"></a>421</h3><p>从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</p><h3 id="422"><a href="#422" class="headerlink" title="422"></a>422</h3><p>从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</p><h3 id="422-1"><a href="#422-1" class="headerlink" title="422"></a>422</h3><p>请求格式正确，但是由于含有语义错误，无法响应。（RFC 4918 WebDAV）423 Locked 　　当前资源被锁定。（RFC 4918 WebDAV）</p><h3 id="424"><a href="#424" class="headerlink" title="424"></a>424</h3><p>由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。（RFC 4918 WebDAV）</p><h3 id="425"><a href="#425" class="headerlink" title="425"></a>425</h3><p>在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中。</p><h3 id="426"><a href="#426" class="headerlink" title="426"></a>426</h3><p>客户端应当切换到TLS/1.0。（RFC 2817）</p><h3 id="449"><a href="#449" class="headerlink" title="449"></a>449</h3><p>由微软扩展，代表请求应当在执行完适当的操作后进行重试。</p><h3 id="500"><a href="#500" class="headerlink" title="500"></a>500</h3><p>服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现。</p><h3 id="501"><a href="#501" class="headerlink" title="501"></a>501</h3><p>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。</p><h3 id="502"><a href="#502" class="headerlink" title="502"></a>502</h3><p>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p><h3 id="503"><a href="#503" class="headerlink" title="503"></a>503</h3><p>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。 　　注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。</p><h3 id="504"><a href="#504" class="headerlink" title="504"></a>504</h3><p>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。 　　注意：某些代理服务器在DNS查询超时时会返回400或者500错误</p><h3 id="505"><a href="#505" class="headerlink" title="505"></a>505</h3><p>服务器不支持，或者拒绝支持在请求中使用的 HTTP 版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</p><h3 id="506"><a href="#506" class="headerlink" title="506"></a>506</h3><p>由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</p><h3 id="507"><a href="#507" class="headerlink" title="507"></a>507</h3><p>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。WebDAV (RFC 4918)</p><h3 id="509"><a href="#509" class="headerlink" title="509"></a>509</h3><p>服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。</p><h3 id="510"><a href="#510" class="headerlink" title="510"></a>510</h3><p>获取资源所需要的策略并没有没满足。（RFC 2774）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0098.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。&lt;br&gt;
    
    </summary>
    
      <category term="Http" scheme="http://www.iskei.cn/categories/Http/"/>
    
    
      <category term="Http" scheme="http://www.iskei.cn/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>Gson和Jackson的使用</title>
    <link href="http://www.iskei.cn/posts/13911.html"/>
    <id>http://www.iskei.cn/posts/13911.html</id>
    <published>2018-01-24T07:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.041Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0102.jpg" alt="image"></p><p>现在json的第三方解析工作很多，如json-lib，gson，jackson，fastjson等，先学习下面两种。<br><a id="more"></a></p><h3 id="JackSON使用："><a href="#JackSON使用：" class="headerlink" title="JackSON使用："></a>JackSON使用：</h3><p>Jackson主要使用ObjectMapper对象来进行序列化以及反序列化操作。</p><p>使用Jackson可以毫无压力的将复杂对象进行完全序列化，也可以将各种类型的对象反序列化</p><p>以下代码均省略异常处理</p><p>普通对象</p><h4 id="序列化Order-order对象："><a href="#序列化Order-order对象：" class="headerlink" title="序列化Order order对象："></a>序列化Order order对象：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">Writer strWriter = <span class="keyword">new</span> StringWriter();</span><br><span class="line">mapper.writeValue(strWriter, order);</span><br><span class="line">String json = strWriter.toString();</span><br></pre></td></tr></table></figure><h4 id="反序列化："><a href="#反序列化：" class="headerlink" title="反序列化："></a>反序列化：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Order order = mapper.readValue(json, Order.class);</span><br></pre></td></tr></table></figure><p>链表、Map等</p><h4 id="序列化List-orderList："><a href="#序列化List-orderList：" class="headerlink" title="序列化List orderList："></a>序列化List<order> orderList：</order></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">Writer strWriter = <span class="keyword">new</span> StringWriter();</span><br><span class="line">mapper.writeValue(strWriter, orderList);</span><br><span class="line">String json = strWriter.toString();</span><br></pre></td></tr></table></figure><h4 id="反序列化：-1"><a href="#反序列化：-1" class="headerlink" title="反序列化："></a>反序列化：</h4><p>需要用到TypeReference</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Order&gt; orderList = mapper.readValue(json, <span class="keyword">new</span> TypeReference&lt;List&lt;Order&gt;&gt;() &#123;  </span><br><span class="line">   &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="反序列化List-lt-LinkedHashMap-gt"><a href="#反序列化List-lt-LinkedHashMap-gt" class="headerlink" title="反序列化List&lt;LinkedHashMap&gt;"></a>反序列化List&lt;LinkedHashMap<string,string>&gt;</string,string></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List orderList = mapper.readValue(json, List.class);</span><br></pre></td></tr></table></figure><h4 id="解析某个字段"><a href="#解析某个字段" class="headerlink" title="解析某个字段"></a>解析某个字段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JsonNode node = mapper.readTree(json);</span><br><span class="line">String name= node.get(<span class="string">"name"</span>);</span><br></pre></td></tr></table></figure><h4 id="Jackson的JSON操作方法"><a href="#Jackson的JSON操作方法" class="headerlink" title="Jackson的JSON操作方法"></a>Jackson的JSON操作方法</h4><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><p>首先去官网下载Jackson工具包，下载地址<a href="http://wiki.fasterxml.com/JacksonDownload。Jackson有1.x系列和2.x系列，截止目前2.x系列的最新版本是2.2.3，2.x系列有3个jar包需要下载：" target="_blank" rel="noopener">http://wiki.fasterxml.com/JacksonDownload。Jackson有1.x系列和2.x系列，截止目前2.x系列的最新版本是2.2.3，2.x系列有3个jar包需要下载：</a></p><p>jackson-core-2.2.3.jar（核心jar包，<a href="http://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-core/2.2.3/jackson-core-2.2.3.jar" target="_blank" rel="noopener">下载地址</a>）</p><p>jackson-annotations-2.2.3.jar（该包提供Json注解支持，<a href="http://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.2.3/jackson-annotations-2.2.3.jar" target="_blank" rel="noopener">下载地址</a>）</p><p>jackson-databind-2.2.3.jar（<a href="http://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.2.3/jackson-databind-2.2.3.jar" target="_blank" rel="noopener">下载地址</a>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSON序列化和反序列化使用的User类</span></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> birthday;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JAVA对象转JSON-JSON序列化"><a href="#JAVA对象转JSON-JSON序列化" class="headerlink" title="JAVA对象转JSON[JSON序列化]"></a>JAVA对象转JSON[JSON序列化]</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException, IOException </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setName(<span class="string">"小民"</span>);</span><br><span class="line">user.setEmail(<span class="string">"xiaomin@sina.com"</span>);</span><br><span class="line">user.setAge(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">SimpleDateFormat dateformat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">user.setBirthday(dateformat.parse(<span class="string">"1996-10-01"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ObjectMapper是JSON操作的核心，Jackson的所有JSON操作都是在ObjectMapper中实现。</span></span><br><span class="line"><span class="comment"> * ObjectMapper有多个JSON序列化的方法，可以把JSON字符串保存File、OutputStream等不同的介质中。</span></span><br><span class="line"><span class="comment"> * writeValue(File arg0, Object arg1)把arg1转成json序列，并保存到arg0文件中。</span></span><br><span class="line"><span class="comment"> * writeValue(OutputStream arg0, Object arg1)把arg1转成json序列，并保存到arg0输出流中。</span></span><br><span class="line"><span class="comment"> * writeValueAsBytes(Object arg0)把arg0转成json序列，并把结果输出成字节数组。</span></span><br><span class="line"><span class="comment"> * writeValueAsString(Object arg0)把arg0转成json序列，并把结果输出成字符串。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line"><span class="comment">//User类转JSON</span></span><br><span class="line"><span class="comment">//输出结果：&#123;"name":"小民","age":20,"birthday":844099200000,"email":"xiaomin@sina.com"&#125;</span></span><br><span class="line">String json = mapper.writeValueAsString(user);</span><br><span class="line">System.out.println(json);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java集合转JSON</span></span><br><span class="line"><span class="comment">//输出结果：[&#123;"name":"小民","age":20,"birthday":844099200000,"email":"xiaomin@sina.com"&#125;]</span></span><br><span class="line">List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">users.add(user);</span><br><span class="line">String jsonlist = mapper.writeValueAsString(users);</span><br><span class="line">System.out.println(jsonlist);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JSON转Java类-JSON反序列化"><a href="#JSON转Java类-JSON反序列化" class="headerlink" title="JSON转Java类[JSON反序列化]"></a>JSON转Java类[JSON反序列化]</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException, IOException </span>&#123;</span><br><span class="line">String json = <span class="string">"&#123;\"name\":\"小民\",\"age\":20,\"birthday\":844099200000,\"email\":\"xiaomin@sina.com\"&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ObjectMapper支持从byte[]、File、InputStream、字符串等数据的JSON反序列化。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">User user = mapper.readValue(json, User.class);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JSON注解"><a href="#JSON注解" class="headerlink" title="JSON注解"></a>JSON注解</h5><p>Jackson提供了一系列注解，方便对JSON序列化和反序列化进行控制，下面介绍一些常用的注解。</p><p>@JsonIgnore 此注解用于属性上，作用是进行JSON操作时忽略该属性。</p><p>@JsonFormat 此注解用于属性上，作用是把Date类型直接转化为想要的格式，如@JsonFormat(pattern = “yyyy-MM-dd HH-mm-ss”)。</p><p>@JsonProperty 此注解用于属性上，作用是把该属性的名称序列化为另外一个名称，如把trueName属性序列化为name，@JsonProperty(“name”)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不JSON序列化年龄属性</span></span><br><span class="line"><span class="meta">@JsonIgnore</span> </span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式化日期属性</span></span><br><span class="line"><span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy年MM月dd日"</span>)</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line"><span class="comment">//序列化email属性为mail</span></span><br><span class="line"><span class="meta">@JsonProperty</span>(<span class="string">"mail"</span>)</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> birthday;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException, IOException </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setName(<span class="string">"小民"</span>);</span><br><span class="line">user.setEmail(<span class="string">"xiaomin@sina.com"</span>);</span><br><span class="line">user.setAge(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">SimpleDateFormat dateformat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">user.setBirthday(dateformat.parse(<span class="string">"1996-10-01"</span>));</span><br><span class="line"></span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">String json = mapper.writeValueAsString(user);</span><br><span class="line">System.out.println(json);</span><br><span class="line"><span class="comment">//输出结果：&#123;"name":"小民","birthday":"1996年09月30日","mail":"xiaomin@sina.com"&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GSON的使用："><a href="#GSON的使用：" class="headerlink" title="GSON的使用："></a>GSON的使用：</h3><p>Gson（又称Google Gson）是Google公司发布的一个开放源代码的Java库，主要用途为串行化Java对象为JSON字符串，或反串行化JSON字符串成Java对象。GSON核心jar包不到1M，非常精简，但提供的功能无疑是非常强大的，如果使用JDK自带的JSON解析API，使用起来相对比较繁琐一点，而且代码量较多。</p><h4 id="GSON目前的发展状况"><a href="#GSON目前的发展状况" class="headerlink" title="GSON目前的发展状况"></a>GSON目前的发展状况</h4><p>初始版本    2008年5月22日<br>最新版本(稳定版本)    2.2.4/2013年5月13日；2个月前<br>编程语言    Java<br>操作平台    各种平台<br>许可协议    Apache License 2.0<br>官方网站    <a href="http://code.google.com/p/google-gson/" target="_blank" rel="noopener">http://code.google.com/p/google-gson/</a><br>下载地址    <a href="http://code.google.com/p/google-gson/downloads/list" target="_blank" rel="noopener">http://code.google.com/p/google-gson/downloads/list</a><br>GSON帮助文档    <a href="http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/index.html" target="_blank" rel="noopener">http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/index.html</a></p><h4 id="使用GSON转换时报的一个异常。"><a href="#使用GSON转换时报的一个异常。" class="headerlink" title="使用GSON转换时报的一个异常。"></a>使用GSON转换时报的一个异常。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread "main" com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was BEGIN_ARRAY at line 1 column 2  at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:176)  </span><br><span class="line">    at com.google.gson.Gson.fromJson(Gson.java:803)  </span><br><span class="line">    at com.google.gson.Gson.fromJson(Gson.java:768)  </span><br><span class="line">    at com.google.gson.Gson.fromJson(Gson.java:717)  </span><br><span class="line">    at com.google.gson.Gson.fromJson(Gson.java:689)  </span><br><span class="line">    at com.demoone.UseGson.testOneBeanFromJSON(UseGson.java:54)  </span><br><span class="line">    at com.demoone.UseGson.main(UseGson.java:89)  </span><br><span class="line">Caused by: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was BEGIN_ARRAY at line 1 column 2   //注意这句话跟数组集合有关  </span><br><span class="line">    at com.google.gson.stream.JsonReader.beginObject(JsonReader.java:374)  </span><br><span class="line">    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:165)  </span><br><span class="line">    ... 6 more</span><br></pre></td></tr></table></figure><p>下面贴出，笔者的测试源码，注意上述异常，在代码的注释中已经指出问题原因</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demoone;  </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;    </span><br><span class="line"><span class="keyword">import</span> com.entity.Person;  </span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;  </span><br><span class="line"><span class="keyword">import</span> com.google.gson.reflect.*;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/***  </span></span><br><span class="line"><span class="comment"> * 使用gson </span></span><br><span class="line"><span class="comment"> * 进行序列化,反序列化的操作 </span></span><br><span class="line"><span class="comment"> * json </span></span><br><span class="line"><span class="comment"> * **/</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseGson</span> </span>&#123;       </span><br><span class="line"> <span class="keyword">static</span> Gson g=<span class="keyword">new</span> Gson();  </span><br><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment">  * 由集合类型的实体类 </span></span><br><span class="line"><span class="comment">  * 转换成Json类型  </span></span><br><span class="line"><span class="comment">  * **/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testToJSON</span><span class="params">()</span></span>&#123;     </span><br><span class="line">        List&lt;Person&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();      </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;  </span><br><span class="line">         Person p=<span class="keyword">new</span> Person(i, <span class="string">"散仙"</span>+i, <span class="string">"北京市"</span>+i, <span class="string">"54152541@qq.com"</span>, <span class="number">500.0</span>);  </span><br><span class="line">            list.add(p);  </span><br><span class="line">        &#125;  </span><br><span class="line">        String json=g.toJson(list);  </span><br><span class="line">        System.out.println(json);          </span><br><span class="line">    &#125;      </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 由json转换为实体类 </span></span><br><span class="line"><span class="comment">     * */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testOneBeanFromJSON</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 转换一个Java Bean的时候 </span></span><br><span class="line"><span class="comment">         * 记住不能使用[],只有在使用集合的时候才可以使用  </span></span><br><span class="line"><span class="comment">         * 如上图贴的那个异常就是由此原因造成的，另外 </span></span><br><span class="line"><span class="comment">         * 格式要规范，中间不能出现空格字符 </span></span><br><span class="line"><span class="comment">         *  </span></span><br><span class="line"><span class="comment">         * **/</span>  </span><br><span class="line">        String jsonBean=<span class="string">"[&#123;\"id\":0,\"name\":\"散仙0\",\"address\":\"北京市0\",\"email\":\"54152541@qq.com\",\"money\":500.0&#125;]"</span>;  </span><br><span class="line">         Person p=g.fromJson(jsonBean, Person.class);  </span><br><span class="line">         System.out.println(p);  </span><br><span class="line">   </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 由json转换为实体类集合 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testListBeanFromJSON</span><span class="params">()</span></span>&#123;    </span><br><span class="line">         <span class="comment">/** </span></span><br><span class="line"><span class="comment">          * 转换一个集合 的实体Bean </span></span><br><span class="line"><span class="comment">          * 注意前面加上[]方括号，代表一个数组 </span></span><br><span class="line"><span class="comment">          * **/</span>   </span><br><span class="line">         String  jsonBeanList=<span class="string">"[&#123;\"id\":0,\"name\":\"散仙0\",\"address\":\"北京市0\",\"email\":\"54152541@qq.com\",\"money\":500.0&#125;,&#123;\"id\":1,\"name\":\"散仙1\",\"address\":\"北京市1\",\"email\":\"54152541@qq.com\",\"money\":500.0&#125;]"</span>;  </span><br><span class="line">           </span><br><span class="line">         List&lt;Person&gt; lists=g.fromJson(jsonBeanList,<span class="keyword">new</span>   TypeToken&lt;List&lt;Person&gt;&gt;()&#123;&#125;.getType());  </span><br><span class="line">         System.out.println(<span class="string">"反序列之后"</span>);  </span><br><span class="line">         <span class="keyword">for</span>(Person pp:lists)&#123;  </span><br><span class="line">               </span><br><span class="line">             System.out.println(pp);  </span><br><span class="line">         &#125;  </span><br><span class="line">    &#125;     </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">         testListBeanFromJSON();<span class="comment">//测试集合反序列化  </span></span><br><span class="line">         testOneBeanFromJSON();<span class="comment">//测试单个实体类反序列化  </span></span><br><span class="line">         <span class="comment">//testToJSON();//测试序列化            </span></span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testListBeanFromJSON()  方法:  </span><br><span class="line">反序列之后  </span><br><span class="line">编号：0  名字:散仙0   地址:北京市0   E-mail:54152541@qq.com  钱:500.0  </span><br><span class="line">编号：1  名字:散仙1   地址:北京市1   E-mail:54152541@qq.com  钱:500.0  </span><br><span class="line">testOneBeanFromJSON()  方法:  </span><br><span class="line">编号：0  名字:散仙0   地址:北京市0   E-mail:54152541@qq.com  钱:500.0</span><br></pre></td></tr></table></figure><p>实体类Person:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.entity;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 实体类 </span></span><br><span class="line"><span class="comment"> * **/</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> String address;  </span><br><span class="line">    <span class="keyword">private</span> String email;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> money;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub  </span></span><br><span class="line">        <span class="keyword">return</span>  <span class="string">"编号："</span>+id+<span class="string">"  名字:"</span>+name+<span class="string">"   地址:"</span>+address+<span class="string">"   E-mail:"</span>+email+<span class="string">"  钱:"</span>+money;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> id, String name, String address, String email,  </span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">double</span> money)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>();  </span><br><span class="line">        <span class="keyword">this</span>.id = id;  </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">        <span class="keyword">this</span>.address = address;  </span><br><span class="line">        <span class="keyword">this</span>.email = email;  </span><br><span class="line">        <span class="keyword">this</span>.money = money;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> id;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.id = id;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> address;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.address = address;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> email;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.email = email;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> money;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.money = money;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0102.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在json的第三方解析工作很多，如json-lib，gson，jackson，fastjson等，先学习下面两种。&lt;br&gt;
    
    </summary>
    
      <category term="Json" scheme="http://www.iskei.cn/categories/Json/"/>
    
    
      <category term="Json" scheme="http://www.iskei.cn/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>SASS是什么</title>
    <link href="http://www.iskei.cn/posts/16024.html"/>
    <id>http://www.iskei.cn/posts/16024.html</id>
    <published>2018-01-24T07:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.029Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0104.jpg" alt="image"></p><p><em>SASS</em> 是 CSS 的一个预处理工具，简单来说，它通过自己的一套语法规则来写源码，然后通过编译器，得到 CSS 代码。<br><a id="more"></a></p><h1 id="1-SASS是什么"><a href="#1-SASS是什么" class="headerlink" title="1. SASS是什么"></a>1. SASS是什么</h1><p>为什么需要这东西呢？因为如果每天都要写很多的 CSS ，那么里面重复的内容会很多，同时，CSS 本身并没有相应的逻辑抽像工具，这就造成在项目中要对样式做有效的管理，似乎没有什么好办法了。</p><p><em>SASS</em> 本身是来源于 Ruby 的一个项目，它目前的标准，应该是一个叫 <em>libSass</em> 的 C 语言库，有了这个 C 语言的实现之后，各种语言就可以很方便地 bind 过去了，从官网上的信息看，目前 C, Go, Java, Javascript, Lua, .NET, Node, Perl, PHP, Python, Ruby, Scala 这些语言上都有实现。</p><p><em>SASS</em> 支持两种格式的源码写法，一种叫 SASS ，另一种叫 SCSS ，区别只是前者使用缩进，后者使用大括号。（我就不明白了，为什么有人喜欢大括号，你写了大括号不也要缩进么）</p><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h1><p>这里，使用 Node 上的实现，叫 <strong>node-sass</strong> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g node-sass</span><br></pre></td></tr></table></figure><p>安装之后，除了相应的 node 模块，还会有一个命令行可执行程序，叫 <code>node-sass</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node-sass a.sass</span><br></pre></td></tr></table></figure><p>通过 <code>--output-style</code> 参数可以控制输出的 CSS 的格式，我喜欢用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node-sass --output-style compact a.sass</span><br></pre></td></tr></table></figure><p>这样输出的 CSS ，是一行一条。（以前喜欢这种形式，是因为一行一条的格式，可以方便地在编辑器中使用列编辑作批量修改）</p><h1 id="3-变量-赋值-数据类型"><a href="#3-变量-赋值-数据类型" class="headerlink" title="3. 变量, 赋值, 数据类型"></a>3. 变量, 赋值, 数据类型</h1><p>SASS 中使用 <em>$</em> 开头来标识一个变量名，使用 <em>:</em> 完成赋值的操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a: 123</span><br></pre></td></tr></table></figure><p>数据类型有以下几种：</p><ul><li><p><em>数字</em></p><p><code>123</code> , <code>1.2</code> , <code>12px</code> , <code>12%</code>, 这些是数字类型。比较特殊的一点，可能在于， SASS 把带有 CSS 单位的标识也作为数字处理，在后面的运算符行为时，单位部分也会一并处理。</p></li></ul><ul><li><p><em>字符串</em></p><p><code>abc</code> 或 <code>&quot;abc&quot;</code> 或 <code>&#39;abc&#39;</code> 。简单来说，单引号，双引号都可以，不要引号也可以。但是，因为 CSS 中大部分的描述都是不要引号的形式，比如 <code>color: red</code> ，而不是 <code>color: &#39;red&#39;</code> ，所以，在引号的处理上，要小心。</p></li></ul><ul><li><p><em>颜色</em></p><p><code>red</code> , <code>#abcd</code> , <code>rgb(123,255,67)</code> , <code>rgba(123, 255, 67, 0.5)</code> , CSS 中表示颜色的形式，在 SASS 中作为颜色类型处理。这里注意，第一个 <code>red</code> ，跟字符串的形式一样的。（我猜这类标识具有混合属性吧）</p></li></ul><ul><li><p><em>列表</em></p><p><code>10px 2px 0 0</code> 或 <code>Helvtica, Arial, sans-serif</code> ，以空格，或者以逗号分割的数据形式，为列表。主要对应于 CSS 中的对应形式，比如 <code>margin: 10px 2px 0 0</code> ， <code>font-family: Helvtica, Arial, sans-serif</code> 。 同时，列表这种类型，在处理函数的参数时也有用。</p></li></ul><ul><li><p><em>映射</em></p><p><code>(k1: v1, k2: v2)</code> ，映射其实就是一个嵌套的列表，形如 <code>(k1 v1), (k2 v2)</code> ，主要用于迭代的一些控制结构中。</p></li></ul><h1 id="4-变量符号化"><a href="#4-变量符号化" class="headerlink" title="4. 变量符号化"></a>4. 变量符号化</h1><p>这里的“符号化”说法，意思就是“行内求值”。简单来说，就是把变量的值，在任何地方，转换为语法结构的一部分（因为按语法规则，“这里”是不能使用变量的）。举一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a cls</span><br><span class="line"></span><br><span class="line">.$a:</span><br><span class="line">    color: red</span><br></pre></td></tr></table></figure><p>这肯定是错误的。因为 “规则” / “选择器” 部分，是不允许使用变量的。但是你可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a cls</span><br><span class="line"></span><br><span class="line">.#&#123;$a&#125;</span><br><span class="line">    color: red</span><br></pre></td></tr></table></figure><p>这样，就是正确的了，编译出来是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.cls &#123; color: red; &#125;</span><br></pre></td></tr></table></figure><p>同时，还有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a: &apos;red&apos;</span><br><span class="line"></span><br><span class="line">.cls</span><br><span class="line">    color: $a</span><br></pre></td></tr></table></figure><p>这样写，虽然编译没有问题，但是结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.cls &#123; color: &apos;red&apos;; &#125;</span><br></pre></td></tr></table></figure><p>这是不对的。换成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a: &apos;red&apos;</span><br><span class="line"></span><br><span class="line">.cls</span><br><span class="line">    color: #&#123;$a&#125;</span><br></pre></td></tr></table></figure><p>就可以正确得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.cls &#123; color: red; &#125;</span><br></pre></td></tr></table></figure><p>所以， <strong>#{}</strong> 的功能，算是非常有用且强大。</p><h1 id="5-嵌套规则与引用"><a href="#5-嵌套规则与引用" class="headerlink" title="5. 嵌套规则与引用"></a>5. 嵌套规则与引用</h1><p>CSS 简单来说，只有两部分内容，一是规则，或者说选择器。二是属性描述。DOM 本身是一个层级结构，所以我们在书写规则时，也是层级下降的方式，这样，如果直接写 CSS ，就不可避免地要写很多重复的前置规则，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.project &gt; .header &gt; .title &#123; color: red; &#125;</span><br><span class="line">.project &gt; .header &gt; .content &#123; color: blue; &#125;</span><br></pre></td></tr></table></figure><p>SASS 最直观的一个功能，就是可以以一种嵌套的层级形式，来处理规则的书写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.project</span><br><span class="line">    &gt; .header</span><br><span class="line">        &gt; .title</span><br><span class="line">            color: red</span><br><span class="line">        &gt; .content</span><br><span class="line">            color: blue</span><br></pre></td></tr></table></figure><p>这样不光可以少写很多代码，而且最重要的，是容易维护。</p><p>这种嵌套的层级结构，有一个特别的功能，就是使用 <strong>&amp;</strong> 可以作为当前选择的引用，这个功能，一般用于伪类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.project</span><br><span class="line">  &gt; .header</span><br><span class="line">    &gt; .title</span><br><span class="line">      color: red</span><br><span class="line">      </span><br><span class="line">      &gt; a</span><br><span class="line">        color: yellow</span><br><span class="line">        </span><br><span class="line">        &amp;:hover</span><br><span class="line">          text-decoration: none</span><br></pre></td></tr></table></figure><p>编译得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.project &gt; .header &gt; .title &#123; color: red; &#125;</span><br><span class="line">.project &gt; .header &gt; .title &gt; a &#123; color: yellow; &#125;</span><br><span class="line">.project &gt; .header &gt; .title &gt; a:hover &#123; text-decoration: none; &#125;</span><br></pre></td></tr></table></figure><h1 id="6-运算符-逻辑判断-控制结构"><a href="#6-运算符-逻辑判断-控制结构" class="headerlink" title="6. 运算符, 逻辑判断, 控制结构"></a>6. 运算符, 逻辑判断, 控制结构</h1><p>SASS 虽然不是完整的一门编程语言，但是，运算符和控制结构的概念还是有的。</p><p>这里先说一下， <strong>SASS 中可以使用 @debug 作标准输出。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$a: 1px + 1px</span><br><span class="line">$b: 1px * 20</span><br><span class="line">$c: 10px - 2px</span><br><span class="line">$d: 10px / 2</span><br><span class="line">$e: 10 + 2 - 3 + 0px</span><br><span class="line">$e2: 10 + 2 - 3 + 0%</span><br><span class="line">$e3: (10 + 2) * 3 / 100 * 100%</span><br><span class="line"></span><br><span class="line">@debug $a, $b, $c, $d, $e, $e2, $e3</span><br></pre></td></tr></table></figure><p>四则运算时，单位需要匹配，或者，你也可以在最后再处理单位。</p><p>控制结构方面，目前有 <em>@for</em>, <em>@each</em>, <em>@while</em>, <em>@if</em> 。</p><ul><li><p><em>@for</em></p><p>单纯的数字范围的迭代：<code>@for $i from 1 through 10  @debug $i</code></p></li></ul><ul><li><p><em>@each</em></p><p>对列表的迭代：<code>@each $i in 1,2,3,4  @debug $i</code>支持多值匹配：<code>@each $a, $b, $c in (a, b, c), (red, 1, blue)  @debug $a, $b, $c</code></p></li><li><p><em>@while</em></p><p><code>$i: 0@while $i &lt; 10  @debug $i  $i: $i + 1</code></p></li></ul><ul><li><p><em>@if</em></p><p>这里随便把逻辑判断一起用了：<code>$i: 0@while $i &lt; 10  @if $i == 0    @debug zero  @if $i &gt; 2    @debug gtwo  @else    @debug ltwo  @if $i != 0    @debug other  $i: $i + 1</code></p></li></ul><h1 id="7-函数定义"><a href="#7-函数定义" class="headerlink" title="7. 函数定义"></a>7. 函数定义</h1><p>先说清楚这里的函数定义，传入参数，返回值，返回值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@function add($a, $b)</span><br><span class="line">  @return $a + $b</span><br><span class="line"></span><br><span class="line">@debug add(1, 2)</span><br></pre></td></tr></table></figure><p>函数的参数，跟 Python 一样，可以有默认值，可以有关键词参数：</p><p>默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@function add($a, $b:3)</span><br><span class="line">  @return $a + $b</span><br><span class="line"></span><br><span class="line">@debug add(1)</span><br></pre></td></tr></table></figure><p>关键词参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@function add($a:2, $b:3)</span><br><span class="line">  @return $a + $b</span><br><span class="line"></span><br><span class="line">@debug add($b:1)</span><br></pre></td></tr></table></figure><h1 id="8-mixin-宏"><a href="#8-mixin-宏" class="headerlink" title="8. @mixin, 宏"></a>8. @mixin, 宏</h1><p><em>Mixin</em> 是官方的叫的名字， <em>宏</em> 是我自己叫的，因为，这东西的行为就像“宏”一样，可以生成代码片段。</p><p><em>Mixin</em> 是 SASS 中地位很重要，还特别给它了一种简写形式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@mixin em</span><br><span class="line">  color: red</span><br><span class="line"></span><br><span class="line">.header.em</span><br><span class="line">  @include em</span><br></pre></td></tr></table></figure><p>简写形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">=em</span><br><span class="line">  color: red</span><br><span class="line"></span><br><span class="line">.header.em</span><br><span class="line">  +em</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.header.em &#123; color: red; &#125;</span><br></pre></td></tr></table></figure><p>Mixin 也可以带参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">=em-back($color:yellow, $font-size: 14px)</span><br><span class="line">  color: red</span><br><span class="line">  background-color: $color</span><br><span class="line">  font-size: $font-size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.header.true</span><br><span class="line">  +em-back($font-size: 20px)</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.header.true &#123; color: red; background-color: yellow; font-size: 20px; &#125;</span><br></pre></td></tr></table></figure><p>还可以直接传入代码块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">=em</span><br><span class="line">  color: red</span><br><span class="line">  @content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.header.true</span><br><span class="line">  +em</span><br><span class="line">    font-size: 14px</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.header.true &#123; color: red; font-size: 14px; &#125;</span><br></pre></td></tr></table></figure><p>注意， <em>Mixin</em> 的结果是代码块，所以，它不光可以返回属性块，还可以连带规则块一起处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">=em</span><br><span class="line">  span</span><br><span class="line">    color: red</span><br><span class="line"></span><br><span class="line">.header.true</span><br><span class="line">  +em</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.header.true span &#123; color: red; &#125;</span><br></pre></td></tr></table></figure><p>引用 <em>&amp;</em> 也可以照常使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">=hover</span><br><span class="line">  &amp;:hover</span><br><span class="line">    @content</span><br><span class="line"></span><br><span class="line">.header.true</span><br><span class="line">  color: white</span><br><span class="line"></span><br><span class="line">  +hover</span><br><span class="line">    color: red</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.header.true &#123; color: white; &#125;</span><br><span class="line">.header.true:hover &#123; color: red; &#125;</span><br></pre></td></tr></table></figure><p>配合 <em>@at-root</em> 和 <em>&amp;</em> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">=hover</span><br><span class="line">  @at-root</span><br><span class="line">    &amp;</span><br><span class="line">      @content</span><br><span class="line"></span><br><span class="line">.header.true</span><br><span class="line">  color: white</span><br><span class="line"></span><br><span class="line">  +hover</span><br><span class="line">    color: red</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.header.true &#123; color: white; &#125;</span><br><span class="line">.header.true &#123; color: red; &#125;</span><br></pre></td></tr></table></figure><p><em>Mixin</em> 本身是可以嵌套的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">=em</span><br><span class="line">  color: red</span><br><span class="line"></span><br><span class="line">=hover</span><br><span class="line">  +em</span><br><span class="line">  @content</span><br><span class="line"></span><br><span class="line">.header.true</span><br><span class="line">  +hover</span><br><span class="line">    background-color: aqua</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.header.true &#123; color: red; background-color: aqua; &#125;</span><br></pre></td></tr></table></figure><h1 id="9-extend-续写"><a href="#9-extend-续写" class="headerlink" title="9. @extend 续写"></a>9. @extend 续写</h1><p>前面说的 <em>@mixin</em> 是处理抽象的可复用代码，现在说的 <em>@extend</em> 是处理具体的已存在的可复用代码。其实两者的机制都是 Mixin ，这里说的 “续写” 是我自己叫的一个名字，因为我实在不想叫“继承”。</p><h2 id="9-1-最简单情况"><a href="#9-1-最简单情况" class="headerlink" title="9.1. 最简单情况"></a>9.1. 最简单情况</h2><p><em>@extend</em> 的作用，是通过指定标识符，在当前块中引用对应的属性定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.a</span><br><span class="line">  color: red</span><br><span class="line"></span><br><span class="line">.b</span><br><span class="line">  @extend .a</span><br><span class="line">  background-color: blue</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.a, .b &#123; color: red; &#125;</span><br><span class="line">.b &#123; background-color: blue; &#125;</span><br></pre></td></tr></table></figure><p>这里，你也可以看成是生成了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.a &#123; color: red; &#125;</span><br><span class="line">.b &#123; color: red; &#125;</span><br><span class="line">.b &#123; background-color: blue; &#125;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.a &#123; color: red; &#125;</span><br><span class="line">.b &#123; color: red; background-color: blue; &#125;</span><br></pre></td></tr></table></figure><p>这里的行为，可以注意一点，用 <strong>@extend 的块自己本身一定还有一条定义</strong> ，这里的就是最前面的 <code>.b</code> 有自己单独的一条。如果 <code>.b</code> 中没有 <code>background-color</code> ，也可以看成是 <code>.b</code> 会有两条相同的，仅有 <code>color</code> 的属性定义。</p><h2 id="9-2-复合规则"><a href="#9-2-复合规则" class="headerlink" title="9.2. 复合规则"></a>9.2. 复合规则</h2><p>当然，这是最简单的情况，复杂一点的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.g.a</span><br><span class="line">  color: red</span><br><span class="line"></span><br><span class="line">.b</span><br><span class="line">  @extend .a</span><br><span class="line">  background-color: blue</span><br></pre></td></tr></table></figure><p>生成的是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.g.a, .g.b &#123; color: red; &#125;</span><br><span class="line">.b &#123; background-color: blue; &#125;</span><br></pre></td></tr></table></figure><p>这里的行为，可以总结为， <strong>@extend 部分，不会更改原有的规则限制</strong>。这里就是 <code>.a</code> 有 <code>.g</code> 这个限制，那么引用 <code>.a</code> 的 <code>.b</code> ，在引用部分，也有 <code>.g</code> 的限制。</p><p>把 <code>.a</code> 换成 <code>.g</code> 的话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.g.a</span><br><span class="line">  color: red</span><br><span class="line"></span><br><span class="line">.b</span><br><span class="line">  @extend .g</span><br><span class="line">  background-color: blue</span><br></pre></td></tr></table></figure><p>那么生成的就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.g.a, .a.b &#123; color: red; &#125;</span><br><span class="line">.b &#123; background-color: blue; &#125;</span><br></pre></td></tr></table></figure><p>上面的例子，把 <code>.g.a</code> 换成 <code>.g .a</code> 结果相同。</p><p>这里的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.g.a, .a.b &#123; color: red; &#125;</span><br></pre></td></tr></table></figure><p>也可以看成是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.g.a, .b.a &#123; color: red; &#125;</span><br></pre></td></tr></table></figure><h2 id="9-3-伪类"><a href="#9-3-伪类" class="headerlink" title="9.3. 伪类"></a>9.3. 伪类</h2><p>伪类本身是一个限定，所以，如果碰到伪类的情况，就把它看成是一个普通类限定， <em>@extend</em> 就只是指定了一个复合条件而已。</p><p>先看复合条件的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.g .x.y.z</span><br><span class="line">  color: red</span><br><span class="line"></span><br><span class="line">.m</span><br><span class="line">  @extend .x.y</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.g .x.y.z, .g .z.m &#123; color: red; &#125;</span><br></pre></td></tr></table></figure><p>即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.g .x.y.z, .g .m.z &#123; color: red; &#125;</span><br></pre></td></tr></table></figure><p>伪类同样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.g img.user:hover</span><br><span class="line">  color: red</span><br><span class="line"></span><br><span class="line">.b</span><br><span class="line">  @extend img:hover</span><br></pre></td></tr></table></figure><p>把 <code>:hover</code> 看成 <code>.hover</code> 就好了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.g img.user:hover, .g .user.b &#123; color: red; &#125;</span><br><span class="line"></span><br><span class="line">-&gt;</span><br><span class="line"></span><br><span class="line">.g img.user:hover, .g .b.user &#123; color: red; &#125;</span><br></pre></td></tr></table></figure><p>不过伪类一般会这么用吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.g img.user:hover</span><br><span class="line">  color: red</span><br><span class="line"></span><br><span class="line">.b</span><br><span class="line">  &amp;:hover</span><br><span class="line">    @extend img:hover</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.g img.user:hover, .g .user.b:hover &#123; color: red; &#125;</span><br><span class="line"></span><br><span class="line">-&gt;</span><br><span class="line"></span><br><span class="line">.g img.user:hover, .g .b.user:hover &#123; color: red; &#125;</span><br></pre></td></tr></table></figure><h2 id="9-4-序列规则下的使用"><a href="#9-4-序列规则下的使用" class="headerlink" title="9.4. 序列规则下的使用"></a>9.4. 序列规则下的使用</h2><p>前面的例子， <em>@extend</em> 所在的规则，本身都比较简单。最复杂的情况，就是 <em>@extend</em> 所在的规则是多重限定，并且 <em>@extend</em> 指定的条件是多重限定，同时，目标定义时，又有多重限定，最后，目标可能还有多个。</p><p>四个点， <em>@extend</em> 所在的块， <em>@extend</em> 本身， <em>@extend</em> 可能碰到的目标， <em>@extend</em> 可能碰到的多个目标。</p><p>当然，现实情况不会这样，太复杂了 SASS 自己也搞不定。所以， SASS 中， <em>@extend</em> 本身的规则，是不允许有“序列条件”的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.x a</span><br><span class="line">  color: red</span><br><span class="line"></span><br><span class="line">.header &gt; a</span><br><span class="line">  @extend .x a</span><br></pre></td></tr></table></figure><p>这种情况，不被允许。</p><p><em>@extend</em> 本身简单了一点，但是情况还是有些伤脑筋：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.x &gt; .side .m.a</span><br><span class="line">  color: red</span><br><span class="line"></span><br><span class="line">.y .m.a</span><br><span class="line">  background-color: yellow</span><br><span class="line"></span><br><span class="line">.header .title a</span><br><span class="line">  @extend .m.a</span><br></pre></td></tr></table></figure><p>当 <em>@extend</em> 的目标有多个时，我们一个一个来看就好了，先看 <code>.x &gt; .side .m.a</code> 。</p><p>前面说过， <em>@extend</em> 不会改变原来的限定，所以， <code>.x &gt; .side</code> 这个条件是不会变的。但是，这里的情况有些不一样，因为， <em>@extend</em> 所在的块，本身还有一个 <code>.header .title</code> 的前置限定条件。</p><p>那么现在的问题就是，对于 <code>.header .title a</code> 中的这个 <strong>a</strong> ，它有两组前置限定条件了。</p><p>这里的两组条件，其实跟前面是一回事。最开始的一条，就说了，别忘了在 <em>@extend</em> 所在的块本身，还会有一条定义生成。不同的是，这里 <em>@extend</em> 所在的块本身，会被附加限定条件。</p><p>所以，单看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.x &gt; .side .m.a</span><br><span class="line">  color: red</span><br><span class="line"></span><br><span class="line">.header .title a</span><br><span class="line">  @extend .m.a</span><br></pre></td></tr></table></figure><ul><li>第一步： <em>目标照写</em>， <code>.x &gt; .side .m.a { color: red }</code> 。</li><li>第二步： <em>自己照写</em>， <code>.header .title .x &gt; .side a { color: red }</code> 。</li><li>第三步： <em>目标 -&gt; @extend</em>， <code>.x &gt; .side .header .title a { color: red }</code> 。</li></ul><p>换作最简单情况的话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.em</span><br><span class="line">  color: red</span><br><span class="line"></span><br><span class="line">.side .content</span><br><span class="line">  @extend .em</span><br></pre></td></tr></table></figure><ul><li>第一步： <em>目标照写</em>， <code>.em { color: red }</code> 。</li><li>第二步： <em>自己照写</em>， <code>.side .content { color: red }</code> 。</li><li>第三步： <em>目标 -&gt; @extend</em>， <code>.side .content { color: red }</code> 。</li></ul><h2 id="9-5-总结"><a href="#9-5-总结" class="headerlink" title="9.5. 总结"></a>9.5. 总结</h2><p>总结起来，对于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[PRE_A] TARGET_A</span><br><span class="line">    color: red</span><br><span class="line"></span><br><span class="line">[PRE_B] TARGET_B</span><br><span class="line">    @extend TARGET_A</span><br></pre></td></tr></table></figure><p>结果就是：</p><ul><li><p><code>[PRE_A] TARGET_A { color: red }</code></p></li><li><p><code>... TARGET_B { color: red }</code></p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">... TARGET_B &#123; color: red &#125;</span><br></pre></td></tr></table></figure><p>​</p><p>然后放</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[PRE_A] [PRE_B]</span><br></pre></td></tr></table></figure><p>  和</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[PRE_B] [PRE_A]</span><br></pre></td></tr></table></figure><p>  两种情况，得到：</p><p>  ​</p><ul><li><p><code>[PRE_A] TARGET_A { color: red }</code></p></li><li><p><code>[PRE_A] [PRE_B] TARGET_B { color: red }</code></p></li><li><p><code>[PRE_B] [PRE_A] TARGET_B { color: red }</code></p></li></ul><p>看之前的第二个目标实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.y .m.a</span><br><span class="line">  background-color: yellow</span><br><span class="line"></span><br><span class="line">.header .title a</span><br><span class="line">  @extend .m.a</span><br></pre></td></tr></table></figure><p>自然就是生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.y .m.a &#123; background-color: yellow &#125;</span><br><span class="line">... a &#123; background-color: yellow &#125;</span><br><span class="line">... a &#123; background-color: yellow &#125;</span><br></pre></td></tr></table></figure><p>补充上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.y .m.a &#123; background-color: yellow &#125;</span><br><span class="line">.header .title .y a &#123; background-color: yellow &#125;</span><br><span class="line">.y .header .title a &#123; background-color: yellow &#125;</span><br></pre></td></tr></table></figure><h2 id="9-6-抽象块"><a href="#9-6-抽象块" class="headerlink" title="9.6. 抽象块"></a>9.6. 抽象块</h2><p>SASS 还真是把 <em>@extend</em> 搞得复杂哦。 SASS 中还有一种“抽象块”的概述，相对于“抽象类”去理解吧。就是，定义的规则块，只是用来被 <em>@extend</em> 的，它自己不会出现在最终的 CSS 中，这种块，使用 <em>%name</em> 结尾来标识：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.x .y a%only</span><br><span class="line">  color: red</span><br><span class="line"></span><br><span class="line">.title div .link</span><br><span class="line">  @extend %only</span><br></pre></td></tr></table></figure><p>结果就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.x .y a &#123; color: red; &#125;</span><br><span class="line">... a.link &#123; color: red; &#125;</span><br><span class="line">... a.link &#123; color: red; &#125;</span><br></pre></td></tr></table></figure><p>补充：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.x .y a &#123; color: red; &#125;</span><br><span class="line">.x .y .title div a.link &#123; color: red; &#125;</span><br><span class="line">.title div .x .y a.link &#123; color: red; &#125;</span><br></pre></td></tr></table></figure><p>最后去掉不要的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.x .y .title div a.link &#123; color: red; &#125;</span><br><span class="line">.title div .x .y a.link &#123; color: red; &#125;</span><br></pre></td></tr></table></figure><p>抽象块最后 <code>a.link</code> 的处理，跟普通 <em>@extend</em> 行为不一样，普通的 <em>@extend</em> 不会保留 <code>a</code> ，只有 <code>.link</code> 。</p><h1 id="10-import-引入其它文件"><a href="#10-import-引入其它文件" class="headerlink" title="10. @import 引入其它文件"></a>10. @import 引入其它文件</h1><p><em>@import</em> ，首先有原本的功能，即可以引入一段其它的 CSS 。</p><p>同时， SASS 中的 <em>@import</em> 也可以引入自己的 SASS 文件，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;reset.sass&quot;</span><br><span class="line"></span><br><span class="line">.ok</span><br><span class="line">  @extend .em</span><br></pre></td></tr></table></figure><p><code>reset.sass</code> 中有定义 <code>.em { color: red; }</code> ，最后编译就可以得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.em, .ok &#123; color: red; &#125;</span><br></pre></td></tr></table></figure><p><em>@import</em> 的其它使用形式还有：</p><ul><li><code>@import &quot;a&quot;, &quot;b&quot;</code> 引入多个文件</li><li><code>@import &quot;a&quot; screen</code> 使用媒体查询</li><li><code>@import url(&quot;http://fonts.googleapis.com/css?family=#{$family}&quot;)</code> 使用变量</li></ul><p><code>@import</code> 可以在规则中使用，它的行为类似单纯的宏替换，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.a1</span><br><span class="line">  @import &quot;a.sass&quot;</span><br></pre></td></tr></table></figure><h1 id="11-media-媒体查询"><a href="#11-media-媒体查询" class="headerlink" title="11. @media 媒体查询"></a>11. @media 媒体查询</h1><p><em>@media</em> 的写法与其在 CSS 中是一样的，SASS 中， <em>@media</em> 的额外能力，就是你可以把它写在规则下面，编译的时候，会自动整理代码，把 <em>@media</em> 部分抽到最外面去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.a</span><br><span class="line">  color: red</span><br><span class="line">  @media print</span><br><span class="line">    color: black</span><br></pre></td></tr></table></figure><p>会生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.a &#123; color: red; &#125;</span><br><span class="line">@media print &#123; .a &#123; color: black; &#125; &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0104.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SASS&lt;/em&gt; 是 CSS 的一个预处理工具，简单来说，它通过自己的一套语法规则来写源码，然后通过编译器，得到 CSS 代码。&lt;br&gt;
    
    </summary>
    
      <category term="SASS" scheme="http://www.iskei.cn/categories/SASS/"/>
    
    
      <category term="SASS" scheme="http://www.iskei.cn/tags/SASS/"/>
    
  </entry>
  
  <entry>
    <title>日志组件slf4j介绍及配置详解</title>
    <link href="http://www.iskei.cn/posts/30235.html"/>
    <id>http://www.iskei.cn/posts/30235.html</id>
    <published>2018-01-24T06:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.041Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0101.jpg" alt="image"></p><p>每一个Java程序员都知道日志对于任何一个Java应用程序尤其是服务端程序是至关重要的，而很多程序员也已经熟悉各种不同的日志库，如java.util.logging、Apache log4j、logback。但如果你还不知道SLF4J（Simple logging facade for Java）的话，那么是时候在你的项目中学习使用SLF4J了。<br><a id="more"></a></p><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>SLF4J不同于其他日志类库，与其它日志类库有很大的不同。SLF4J(Simple logging Facade for Java)不是一个真正的日志实现，而是一个抽象层（ abstraction layer），它允许你在后台使用任意一个日志类库。如果是在编写供内外部都可以使用的API或者通用类库，那么你真不会希望使用你类库的客户端必须使用你选择的日志类库。</p><p>如果一个项目已经使用了log4j，而你加载了一个类库，比方说 Apache Active MQ——它依赖于于另外一个日志类库logback，那么你就需要把它也加载进去。但如果Apache Active MQ使用了SLF4J，你可以继续使用你的日志类库而无需忍受加载和维护一个新的日志框架的痛苦。</p><p>总的来说，SLF4J使你的代码独立于任意一个特定的日志API，这是对于API开发者的很好的思想。虽然抽象日志类库的思想已经不是新鲜的事物，而且Apache commons logging也已经在使用这种思想了，但SLF4J正迅速成为Java世界的日志标准。让我们再看几个使用SLF4J而不是log4j、logback或者java.util.logging的理由。</p><h3 id="SLF4J对比Log4J，logback和java-util-Logging的优势"><a href="#SLF4J对比Log4J，logback和java-util-Logging的优势" class="headerlink" title="SLF4J对比Log4J，logback和java.util.Logging的优势"></a>SLF4J对比Log4J，logback和java.util.Logging的优势</h3><p>正如我之前说的，在你的代码中使用SLF4J写日志语句的主要出发点是使得你的程序独立于任何特定的日志类库，依赖于特定类库可能需要使用不同于你已有的配置，并且导致更多维护的麻烦。除此之外，还有一个SLF4J API的特性是使得我坚持使用SLF4J而抛弃我长期间钟爱的Log4j的理由，是被称为占位符(place holder)，在代码中表示为“{}”的特性。占位符是一个非常类似于在String的format()方法中的%s，因为它会在运行时被某个提供的实际字符串所替换。这不仅降低了你代码中字符串连接次数，而且还节省了新建的String对象。通过使用SLF4J，你可以在运行时延迟字符串的建立，这意味着只有需要的String对象才被建立。而如果你已经使用log4j，那么你已经对于在if条件中使用debug语句这种变通方案十分熟悉了，但SLF4J的占位符就比这个好用得多。</p><p>这是你在Log4j中使用的方案，但这并不有趣，而且降低了代码可读性，因为它增加了不必要的繁琐重复代码(boiler-plate code)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Processing trade with id: "</span> + id + <span class="string">" symbol: "</span> + symbol);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一方面，如果你使用SLF4J的话，你可以得到更简洁格式的结果，就像以下展示的一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.debug(<span class="string">"Processing trade with id: &#123;&#125; and symbol : &#123;&#125; "</span>, id, symbol);</span><br></pre></td></tr></table></figure><p>在SLF4J，我们不需要字符串连接而且不会导致暂时不需要的字符串消耗。取而代之，我们在一个以占位符和参数传递实际值构成的模板格式下写日志信息。你可能会在想万一我有很多个参数怎么办？嗯，那么你可以选择使用变量参数版本的日志方法或者以Object数组传递。这是一个相当方便和高效方法的打日志方法。记住，在生产最终日志信息字符串之前，这个方法会检查一个特定的日志级别是不是打开了，这不仅降低了内存消耗而且预先降低了CPU去处理字符串连接命令的时间。这里是使用SLF4J日志方法的代码，来自于slf4j-log4j12-1.6.1.jar中的Log4j的适配器类Log4jLoggerAdapter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(String format, Object arg1, Object arg2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        FormattingTuple ft = MessageFormatter.format(format, arg1, arg2);</span><br><span class="line">        logger.log(FQCN, Level.DEBUG, ft.getMessage(), ft.getThrowable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，我们应该知道打日志是对应用程序性能有着很大影响，在生产环节上我们建议只进行必要的日志记录。</p><h3 id="使用配置"><a href="#使用配置" class="headerlink" title="使用配置"></a>使用配置</h3><h4 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="日志系统配置"><a href="#日志系统配置" class="headerlink" title="日志系统配置"></a>日志系统配置</h4><p>假设现有如下程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Main.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> status = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (status == <span class="number">0</span>) &#123;</span><br><span class="line">            logger.info(<span class="string">"status:&#123;&#125;"</span>, status);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"status:&#123;&#125;"</span>, status);</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">"end!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用以下两种方式对日志系统的输出格式、记录级别、输出方式等进行配置。</p><h5 id="properties文件方式"><a href="#properties文件方式" class="headerlink" title="properties文件方式"></a>properties文件方式</h5><p>log4j.properties:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=info, ServerDailyRollingFile, stdout</span><br><span class="line">log4j.appender.ServerDailyRollingFile=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.ServerDailyRollingFile.DatePattern=&apos;.&apos;yyyy-MM-dd</span><br><span class="line">log4j.appender.ServerDailyRollingFile.File=logs/notify-subscription.log</span><br><span class="line">log4j.appender.ServerDailyRollingFile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.ServerDailyRollingFile.layout.ConversionPattern=%d - %m%n</span><br><span class="line">log4j.appender.ServerDailyRollingFile.Append=true</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH\:mm\:ss&#125; %p [%c] %m%n</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2016-05-12 16:08:21 INFO [club.chuxing.learn.Main] status:0 </span><br><span class="line">2016-05-12 16:08:21 INFO [club.chuxing.learn.Main] end!</span><br></pre></td></tr></table></figure><h5 id="xml文件方式"><a href="#xml文件方式" class="headerlink" title="xml文件方式"></a>xml文件方式</h5><p>首先pom中添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 应用名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"APP_NAME"</span> <span class="attr">value</span>=<span class="string">"logtest"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志文件的保存路径,首先查找系统属性-Dlog.dir,如果存在就使用其；否则，在当前目录下创建名为logs目录做日志存放的目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"$&#123;log.dir:-logs&#125;/$&#123;APP_NAME&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ENCODER_PATTERN"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd  HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;80&#125; - %msg%n"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>$&#123;APP_NAME&#125;<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 控制台日志：输出全部日志到控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;ENCODER_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 文件日志：输出全部日志到文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/output.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;ENCODER_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 错误日志：用于将错误日志输出到独立文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR_FILE"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/error.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;ENCODER_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 独立输出的同步日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"SYNC_FILE"</span>  <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/sync.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;ENCODER_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"log.sync"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> <span class="attr">addtivity</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"SYNC_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"DEBUG"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2016-05-12 17:08:32.105 [main] INFO club.chuxing.learn.Main - status:0 </span><br><span class="line">2016-05-12 17:08:32.114 [main] INFO club.chuxing.learn.Main - end!</span><br></pre></td></tr></table></figure><h4 id="日志系统配置说明"><a href="#日志系统配置说明" class="headerlink" title="日志系统配置说明"></a>日志系统配置说明</h4><h5 id="输出级别的种类"><a href="#输出级别的种类" class="headerlink" title="输出级别的种类"></a>输出级别的种类</h5><ol><li>ERROR 为严重错误 主要是程序的错误</li><li>WARN 为一般警告，比如session丢失</li><li>INFO 为一般要显示的信息，比如登录登出</li><li>DEBUG 为程序的调试信息</li></ol><h5 id="配置日志信息输出目的地"><a href="#配置日志信息输出目的地" class="headerlink" title="配置日志信息输出目的地"></a>配置日志信息输出目的地</h5><blockquote><p>log4j.appender.appenderName=??</p><p>org.apache.log4j.ConsoleAppender（控制台）<br>org.apache.log4j.FileAppender（文件）<br>org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）<br>org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）<br>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</p></blockquote><h5 id="配置日志信息的格式"><a href="#配置日志信息的格式" class="headerlink" title="配置日志信息的格式"></a>配置日志信息的格式</h5><blockquote><p>log4j.appender.appenderName.layout = ??</p><p>org.apache.log4j.HTMLLayout（以HTML表格形式布局）<br>org.apache.log4j.PatternLayout（可以灵活地指定布局模式）<br>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）<br>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</p></blockquote><h5 id="ConsoleAppender选项"><a href="#ConsoleAppender选项" class="headerlink" title="ConsoleAppender选项"></a>ConsoleAppender选项</h5><blockquote><p>Threshold=DEBUG:指定日志消息的输出最低层次。<br>ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。<br>Target=System.err:默认情况下是System.out,指定输出控制台</p></blockquote><h5 id="FileAppender-选项"><a href="#FileAppender-选项" class="headerlink" title="FileAppender 选项"></a>FileAppender 选项</h5><blockquote><p>Threshold=DEBUG:指定日志消息的输出最低层次。<br>ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。<br>File=mylog.txt:指定消息输出到mylog.txt文件。<br>Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。</p></blockquote><h5 id="RollingFileAppender-选项"><a href="#RollingFileAppender-选项" class="headerlink" title="RollingFileAppender 选项"></a>RollingFileAppender 选项</h5><blockquote><p>Threshold=DEBUG:指定日志消息的输出最低层次。<br>ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。<br>File=mylog.txt:指定消息输出到mylog.txt文件。<br>Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。<br>MaxFileSize=100KB: 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。<br>MaxBackupIndex=2:指定可以产生的滚动文件的最大数。</p></blockquote><h5 id="日志信息格式中几个符号所代表的含义"><a href="#日志信息格式中几个符号所代表的含义" class="headerlink" title="日志信息格式中几个符号所代表的含义"></a>日志信息格式中几个符号所代表的含义</h5><blockquote><p>-X号: X信息输出时左对齐；<br>%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,<br>%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921<br>%r: 输出自应用启动到输出该log信息耗费的毫秒数<br>%c: 输出日志信息所属的类目，通常就是所在类的全名<br>%t: 输出产生该日志事件的线程名<br>%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.java:10)<br>%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。<br>%%: 输出一个”%”字符<br>%F: 输出日志消息产生时所在的文件名称<br>%L: 输出代码中的行号<br>%m: 输出代码中指定的消息,产生的日志具体信息<br>%n: 输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”输出日志信息换行</p></blockquote><p>一个示例配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">log4j.debug=true   </span><br><span class="line">log4j.rootLogger=DEBUG,D,E</span><br><span class="line">log4j.appender.E = org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.E.File = logs/logs.log</span><br><span class="line">log4j.appender.E.Append = true</span><br><span class="line">log4j.appender.E.Threshold = DEBUG</span><br><span class="line">log4j.appender.E.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.E.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class="line">log4j.appender.D = org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.D.File = logs/error.log</span><br><span class="line">log4j.appender.D.Append = true</span><br><span class="line">log4j.appender.D.Threshold = ERROR</span><br><span class="line">log4j.appender.D.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.D.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>过滤器，执行一个过滤器会有返回个枚举值，即DENY，NEUTRAL，ACCEPT其中之一。返回DENY，日志将立即被抛弃不再经过其他过滤器；返回NEUTRAL，有序列表里的下个过滤器过接着处理日志；返回ACCEPT，日志会被立即处理，不再经过剩余过滤器。<br>过滤器被添加到<appender> 中，为<appender> 添加一个或多个过滤器后，可以用任意条件对日志进行过滤。<appender> 有多个过滤器时，按照配置顺序执行。</appender></appender></appender></p><h4 id="常用的过滤器："><a href="#常用的过滤器：" class="headerlink" title="常用的过滤器："></a>常用的过滤器：</h4><ol><li>LevelFilter： 级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。有以下子节点： </li></ol><p><level>:设置过滤级别 </level></p><p><onmatch>:用于配置符合过滤条件的操作 </onmatch></p><p><onmismatch>:用于配置不符合过滤条件的操作</onmismatch></p><ol><li>ThresholdFilter： 临界值过滤器，过滤掉低于指定临界值的日志。当日志级别等于或高于临界值时，过滤器返回NEUTRAL；当日志级别低于临界值时，日志会被拒绝。 </li></ol><p>例如：过滤掉所有低于INFO级别的日志。</p><ol><li>EvaluatorFilter： 求值过滤器，评估、鉴别日志是否符合指定条件。有一下子节点： </li></ol><p><evaluator>:<br>鉴别器，常用的鉴别器是JaninoEventEvaluato，也是默认的鉴别器，它以任意的Java布尔值表达式作为求值条件，求值条件在配置文件解释过成功被动态编译，布尔值表达式返回true就表示符合过滤条件。evaluator有个子标签<expression>，用于配置求值条件。 </expression></evaluator></p><p>求值表达式作用于当前日志，logback向求值表达式暴露日志的各种字段：<br>Name    Type    Description<br>event    LoggingEvent    与记录请求相关联的原始记录事件，下面所有变量都来自event</p><p>例如，event.getMessage()返回下面”message”相同的字符串</p><p>message    String    日志的原始消息</p><p>例如，设有logger mylogger，”name”的值是”AUB”，对于 mylogger.info(“Hello {}”,name); “Hello {}”就是原始消息。<br>formatedMessage    String    日志被各式话的消息，</p><p>例如，设有logger mylogger，”name”的值是”AUB”，对于 mylogger.info(“Hello {}”,name); “Hello Aub”就是格式化后的消息。<br>logger    String    logger 名。</p><p>loggerContext    LoggerContextVO    日志所属的logger上下文。</p><p>level    int    级别对应的整数值，所以 level &gt; INFO 是正确的表达式。</p><p>timeStamp    long    创建日志的时间戳。</p><p>marker    Marker    与日志请求相关联的Marker对象，注意“Marker”有可能为null，所以你要确保它不能是null。</p><p>mdc    Map    包含创建日志期间的MDC所有值得map。访问方法是：mdc.get(“myKey”) 。</p><p>mdc.get()返回的是Object不是String，要想调用String的方法就要强转</p><p>例如，((String) mdc.get(“k”)).contains(“val”) .MDC可能为null，调用时注意。</p><p>throwable    java.lang.Throwable    如果没有异常与日志关联”throwable” 变量为 null. 不幸的是， “throwable” 不能被序列化。在远程系统上永远为null，对于与位置无关的表达式请使用下面的变量throwableProxy</p><p>throwableProxy    IThrowableProxy    与日志事件关联的异常代理。如果没有异常与日志事件关联，则变量”throwableProxy” 为 null. 当异常被关联到日志事件时，”throwableProxy” 在远程系统上不会为null</p><p><onmatch>:用于配置符合过滤条件的操作 </onmatch></p><p><onmismatch>:用于配置不符合过滤条件的操作 </onmismatch></p><p>例如：过滤掉所有日志消息中不包含“billing”字符串的日志。</p><h4 id="参考来源："><a href="#参考来源：" class="headerlink" title="参考来源："></a>参考来源：</h4><ol><li><a href="http://www.importnew.com/7450.html#comment-204549" target="_blank" rel="noopener">http://www.importnew.com/7450.html#comment-204549</a> </li><li><a href="http://www.tuicool.com/articles/6VRnui" target="_blank" rel="noopener">http://www.tuicool.com/articles/6VRnui</a> </li><li><a href="http://blog.csdn.net/linwei_1029/article/details/8844939" target="_blank" rel="noopener">http://blog.csdn.net/linwei_1029/article/details/8844939</a> </li><li><a href="http://blog.csdn.net/xuanjiewu/article/details/7587586" target="_blank" rel="noopener">http://blog.csdn.net/xuanjiewu/article/details/7587586</a> </li><li><a href="http://blog.csdn.net/haidage/article/details/6794540" target="_blank" rel="noopener">http://blog.csdn.net/haidage/article/details/6794540</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0101.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;每一个Java程序员都知道日志对于任何一个Java应用程序尤其是服务端程序是至关重要的，而很多程序员也已经熟悉各种不同的日志库，如java.util.logging、Apache log4j、logback。但如果你还不知道SLF4J（Simple logging facade for Java）的话，那么是时候在你的项目中学习使用SLF4J了。&lt;br&gt;
    
    </summary>
    
      <category term="SLF4J" scheme="http://www.iskei.cn/categories/SLF4J/"/>
    
    
      <category term="SLF4J" scheme="http://www.iskei.cn/tags/SLF4J/"/>
    
  </entry>
  
  <entry>
    <title>Web站点如何防范XSS、CSRF、SQL注入攻击</title>
    <link href="http://www.iskei.cn/posts/52946.html"/>
    <id>http://www.iskei.cn/posts/52946.html</id>
    <published>2018-01-24T05:44:36.000Z</published>
    <updated>2018-02-22T02:15:40.029Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0100.jpg" alt="image"></p><p>对Web服务器的攻击也可以说是形形色色、种类繁多，常见的有挂马、SQL注入、缓冲区溢出、嗅探、利用IIS等针对Webserver漏洞进行攻击。本文结合WEB TOP10漏洞中常见的SQL注入，跨站脚本攻击(XSS)，跨站请求伪造（CSRF）攻击的产生原理，介绍相应的防范方法。<br><a id="more"></a></p><h3 id="XSS跨站脚本攻击"><a href="#XSS跨站脚本攻击" class="headerlink" title="XSS跨站脚本攻击**"></a>XSS跨站脚本攻击**</h3><p>XSS跨站脚本攻击指攻击者在网页中嵌入客户端脚本(例如JavaScript)，当用户浏览此网页时，脚本就会在用户的浏览器上执行，从而达到攻击者的目的，比如获取用户的Cookie，导航到恶意网站，携带木马等。</p><h4 id="如何防止XSS跨站脚本攻击："><a href="#如何防止XSS跨站脚本攻击：" class="headerlink" title="如何防止XSS跨站脚本攻击："></a><strong>如何防止XSS跨站脚本攻击：</strong></h4><p><em>原则：不相信用户输入的数据</em></p><ol><li><p>将重要的cookie标记为http only，这样的话Javascript 中的document.cookie语句就不能获取到cookie了</p></li><li><p>只允许用户输入我们期望的数据。例如：年龄的textbox中，只允许用户输入数字，而数字之外的字符都过滤掉</p></li><li><p>对数据进行Html Encode 处理。<code>&lt; 转化为 &amp;lt;、&gt; 转化为 &amp;gt;、&amp; 转化为 &amp;amp;、&#39; 转化为 &amp;#039;、&quot; 转化为 &amp;quot;、空格 转化为 &amp;nbsp;</code></p></li><li><p>过滤或移除特殊的Html标签。例如：<code>&lt;script&gt;、&lt;iframe&gt;、&amp;lt; for &lt;、&amp;gt; for &gt;、&amp;quot for</code></p></li><li><p>过滤JavaScript 事件的标签。例如 “onclick=”、”onfocus” 等等<br>很多浏览器都加入了安全机制来过滤XSS</p><p><em>注意：攻击代码不一定在<script></script>中</em></p></li></ol><h3 id="CSRF跨站请求伪造"><a href="#CSRF跨站请求伪造" class="headerlink" title="CSRF跨站请求伪造"></a><strong>CSRF跨站请求伪造</strong></h3><p>CSRF（XSRF）尽管听起来很想XSS跨站脚本攻击，但是它于XSS完全不同。XSS是利用站点内的信任用户，而CSRF则是通过伪装来自受信任用户的请求来利用受信任的站点。与XSS相比，CSRF攻击不大流行和难以防范，所以比XSS更具危险性。</p><h4 id="如何防止CSRF跨站请求伪造："><a href="#如何防止CSRF跨站请求伪造：" class="headerlink" title="如何防止CSRF跨站请求伪造："></a><strong>如何防止CSRF跨站请求伪造：</strong></h4><ol><li>对于web站点，将持久化的授权方法（例如cookie或者HTTP授权）切换为瞬时的授权方法（在每个form中提供隐藏field）。</li><li>“双提交”cookie。此方法只工作于Ajax请求，但它能够作为无需改变大量form的全局修正方法。如果某个授权的cookie在form post之前正被JavaScript代码读取，那么限制跨域规则将被应用。什么叫限制跨域规则呢？限制跨域规则就是：如果服务器需要在Post请求体或者URL中包含授权cookie的请求，那么这个请求必须来自于受信任的域，因为其它域是不能从信任域读取cookie的。上面那个例子的受信任域就是银行网站的某个域，而Mallory发给Bob的链接不是受信任的域。</li><li>使用Post代替Get。Post方式不会在web服务器和代理服务器日志中留下数据尾巴，然而Get方式却会留下数据尾巴。</li><li>以上三点都是正对web站点的防御手段，第4点是从用户的角度的防御手段。通过在浏览其它站点前登出站点或者在浏览器会话结束后清理浏览器的cookie来防止CSRF攻击。</li></ol><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a><strong>SQL注入</strong></h3><p>所谓SQL注入，就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p><h4 id="如何防止SQL注入："><a href="#如何防止SQL注入：" class="headerlink" title="如何防止SQL注入："></a><strong>如何防止SQL注入：</strong></h4><ol><li>永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和双”-“进行转换等。</li><li>永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取</li><li>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接</li><li>不要把机密信息直接存放，加密或者hash掉密码和敏感的信息</li><li>应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0100.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;对Web服务器的攻击也可以说是形形色色、种类繁多，常见的有挂马、SQL注入、缓冲区溢出、嗅探、利用IIS等针对Webserver漏洞进行攻击。本文结合WEB TOP10漏洞中常见的SQL注入，跨站脚本攻击(XSS)，跨站请求伪造（CSRF）攻击的产生原理，介绍相应的防范方法。&lt;br&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://www.iskei.cn/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://www.iskei.cn/tags/JavaWeb/"/>
    
  </entry>
  
</feed>
